{"ast":null,"code":"window.getScreenId = function (firefoxString, callback, custom_parameter) {\n  if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n    callback({\n      video: true\n    });\n    return;\n  }\n\n  if (!!navigator.mozGetUserMedia) {\n    callback(null, 'firefox', {\n      video: {\n        mozMediaSource: firefoxString,\n        mediaSource: firefoxString\n      }\n    });\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeMediaSourceId) {\n      if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n        callback('permission-denied');\n      } else {\n        callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n      }\n\n      window.removeEventListener('message', onIFrameCallback);\n    }\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  if (!custom_parameter) {\n    setTimeout(postGetSourceIdMessage, 100);\n  } else {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n  }\n};\n\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n  var screen_constraints = {\n    audio: false,\n    video: {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop',\n        maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,\n        maxHeight: window.screen.height > 1080 ? window.screen.height : 1080\n      },\n      optional: []\n    }\n  };\n\n  if (!!canRequestAudioTrack) {\n    screen_constraints.audio = {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop'\n      },\n      optional: []\n    };\n  }\n\n  if (sourceId) {\n    screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n\n    if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n      screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n    }\n  }\n\n  return screen_constraints;\n}\n\nfunction postGetSourceIdMessage(custom_parameter) {\n  if (!iframe) {\n    loadIFrame(function () {\n      postGetSourceIdMessage(custom_parameter);\n    });\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n    return;\n  }\n\n  if (!custom_parameter) {\n    iframe.contentWindow.postMessage({\n      captureSourceId: true\n    }, '*');\n  } else if (!!custom_parameter.forEach) {\n    iframe.contentWindow.postMessage({\n      captureCustomSourceId: custom_parameter\n    }, '*');\n  } else {\n    iframe.contentWindow.postMessage({\n      captureSourceIdWithAudio: true\n    }, '*');\n  }\n}\n\nvar iframe;\n\nwindow.getScreenConstraints = function (callback) {\n  loadIFrame(function () {\n    getScreenId(function (error, sourceId, screen_constraints) {\n      if (!screen_constraints) {\n        screen_constraints = {\n          video: true\n        };\n      }\n\n      callback(error, screen_constraints.video);\n    });\n  });\n};\n\nfunction loadIFrame(loadCallback) {\n  if (iframe) {\n    loadCallback();\n    return;\n  }\n\n  iframe = document.createElement('iframe');\n\n  iframe.onload = function () {\n    iframe.isLoaded = true;\n    loadCallback();\n  };\n\n  iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n  iframe.style.display = 'none';\n  (document.body || document.documentElement).appendChild(iframe);\n}\n\nwindow.getChromeExtensionStatus = function (callback) {\n  if (!!navigator.mozGetUserMedia) {\n    callback('installed-enabled');\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus);\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\n\nfunction postGetChromeExtensionStatusMessage() {\n  if (!iframe) {\n    loadIFrame(postGetChromeExtensionStatusMessage);\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n    return;\n  }\n\n  iframe.contentWindow.postMessage({\n    getChromeExtensionStatus: true\n  }, '*');\n}\n\nexports.getScreenId = window.getScreenId;","map":{"version":3,"mappings":"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","names":["window","getScreenId","firefoxString","callback","custom_parameter","navigator","userAgent","indexOf","msSaveOrOpenBlob","msSaveBlob","video","mozGetUserMedia","mozMediaSource","mediaSource","addEventListener","onIFrameCallback","event","data","chromeMediaSourceId","getScreenConstraints","canRequestAudioTrack","removeEventListener","chromeExtensionStatus","setTimeout","postGetSourceIdMessage","error","sourceId","screen_constraints","audio","mandatory","chromeMediaSource","maxWidth","screen","width","maxHeight","height","optional","iframe","loadIFrame","isLoaded","contentWindow","postMessage","captureSourceId","forEach","captureCustomSourceId","captureSourceIdWithAudio","loadCallback","document","createElement","onload","src","style","display","body","documentElement","appendChild","getChromeExtensionStatus","postGetChromeExtensionStatusMessage","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\ScreenSharing\\Screen-Capturing-Auto.js"],"sourcesContent":["// Last time updated on June 08, 2018\n\n// Latest file can be found here: https://cdn.webrtc-experiment.com/getScreenId.js\n\n// Muaz Khan         - www.MuazKhan.com\n// MIT License       - www.WebRTC-Experiment.com/licence\n// Documentation     - https://github.com/muaz-khan/getScreenId.\n\n// ______________\n// getScreenId.js\n\n/*\ngetScreenId(function (error, sourceId, screen_constraints) {\n    // error    == null || 'permission-denied' || 'not-installed' || 'installed-disabled' || 'not-chrome'\n    // sourceId == null || 'string' || 'firefox'\n\n    if(microsoftEdge) {\n        navigator.getDisplayMedia(screen_constraints).then(onSuccess, onFailure);\n    }\n    else {\n        navigator.mediaDevices.getUserMedia(screen_constraints).then(onSuccess)catch(onFailure);\n    }\n}, 'pass second parameter only if you want system audio');\n*/\n\nwindow.getScreenId = function (firefoxString, callback, custom_parameter) {\n    if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n        // microsoft edge => navigator.getDisplayMedia(screen_constraints).then(onSuccess, onFailure);\n        callback({\n            video: true\n        });\n        return;\n    }\n\n    // for Firefox:\n    // sourceId == 'firefox'\n    // screen_constraints = {...}\n    if (!!navigator.mozGetUserMedia) {\n        callback(null, 'firefox', {\n            video: {\n                mozMediaSource: firefoxString,\n                mediaSource: firefoxString\n            }\n        });\n        return;\n    }\n\n    window.addEventListener('message', onIFrameCallback);\n\n    function onIFrameCallback(event) {\n        if (!event.data) return;\n\n        if (event.data.chromeMediaSourceId) {\n            if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n                callback('permission-denied');\n            } else {\n                callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n            }\n\n            // this event listener is no more needed\n            window.removeEventListener('message', onIFrameCallback);\n        }\n\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n\n            // this event listener is no more needed\n            window.removeEventListener('message', onIFrameCallback);\n        }\n    }\n\n    if (!custom_parameter) {\n        setTimeout(postGetSourceIdMessage, 100);\n    }\n    else {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n    }\n};\n\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n    var screen_constraints = {\n        audio: false,\n        video: {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n                maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,\n                maxHeight: window.screen.height > 1080 ? window.screen.height : 1080\n            },\n            optional: []\n        }\n    };\n\n    if (!!canRequestAudioTrack) {\n        screen_constraints.audio = {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n                // echoCancellation: true\n            },\n            optional: []\n        };\n    }\n\n    if (sourceId) {\n        screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n\n        if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n            screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n        }\n    }\n\n    return screen_constraints;\n}\n\nfunction postGetSourceIdMessage(custom_parameter) {\n    if (!iframe) {\n        loadIFrame(function () {\n            postGetSourceIdMessage(custom_parameter);\n        });\n        return;\n    }\n\n    if (!iframe.isLoaded) {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n        return;\n    }\n\n    if (!custom_parameter) {\n        iframe.contentWindow.postMessage({\n            captureSourceId: true\n        }, '*');\n    }\n    else if (!!custom_parameter.forEach) {\n        iframe.contentWindow.postMessage({\n            captureCustomSourceId: custom_parameter\n        }, '*');\n    }\n    else {\n        iframe.contentWindow.postMessage({\n            captureSourceIdWithAudio: true\n        }, '*');\n    }\n}\n\nvar iframe;\n\n// this function is used in RTCMultiConnection v3\nwindow.getScreenConstraints = function (callback) {\n    loadIFrame(function () {\n        getScreenId(function (error, sourceId, screen_constraints) {\n            if (!screen_constraints) {\n                screen_constraints = {\n                    video: true\n                };\n            }\n\n            callback(error, screen_constraints.video);\n        });\n    });\n};\n\nfunction loadIFrame(loadCallback) {\n    if (iframe) {\n        loadCallback();\n        return;\n    }\n\n    iframe = document.createElement('iframe');\n    iframe.onload = function () {\n        iframe.isLoaded = true;\n        loadCallback();\n    };\n    iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n    iframe.style.display = 'none';\n    (document.body || document.documentElement).appendChild(iframe);\n}\n\nwindow.getChromeExtensionStatus = function (callback) {\n    // for Firefox:\n    if (!!navigator.mozGetUserMedia) {\n        callback('installed-enabled');\n        return;\n    }\n\n    window.addEventListener('message', onIFrameCallback);\n\n    function onIFrameCallback(event) {\n        if (!event.data) return;\n\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus);\n\n            // this event listener is no more needed\n            window.removeEventListener('message', onIFrameCallback);\n        }\n    }\n\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\n\nfunction postGetChromeExtensionStatusMessage() {\n    if (!iframe) {\n        loadIFrame(postGetChromeExtensionStatusMessage);\n        return;\n    }\n\n    if (!iframe.isLoaded) {\n        setTimeout(postGetChromeExtensionStatusMessage, 100);\n        return;\n    }\n\n    iframe.contentWindow.postMessage({\n        getChromeExtensionStatus: true\n    }, '*');\n}\n\nexports.getScreenId = window.getScreenId;"]},"metadata":{},"sourceType":"script"}