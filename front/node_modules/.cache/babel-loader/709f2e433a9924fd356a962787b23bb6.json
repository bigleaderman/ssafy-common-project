{"ast":null,"code":"window.getScreenId = function (firefoxString, callback, custom_parameter) {\n  if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n    callback({\n      video: true\n    });\n    return;\n  }\n\n  if (!!navigator.mozGetUserMedia) {\n    callback(null, 'firefox', {\n      video: {\n        mozMediaSource: firefoxString,\n        mediaSource: firefoxString\n      }\n    });\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeMediaSourceId) {\n      if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n        callback('permission-denied');\n      } else {\n        callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n      }\n\n      window.removeEventListener('message', onIFrameCallback);\n    }\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  if (!custom_parameter) {\n    setTimeout(postGetSourceIdMessage, 100);\n  } else {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n  }\n};\n\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n  var screen_constraints = {\n    audio: false,\n    video: {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop',\n        maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,\n        maxHeight: window.screen.height > 1080 ? window.screen.height : 1080\n      },\n      optional: []\n    }\n  };\n\n  if (!!canRequestAudioTrack) {\n    screen_constraints.audio = {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop'\n      },\n      optional: []\n    };\n  }\n\n  if (sourceId) {\n    screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n\n    if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n      screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n    }\n  }\n\n  return screen_constraints;\n}\n\nfunction postGetSourceIdMessage(custom_parameter) {\n  if (!iframe) {\n    loadIFrame(function () {\n      postGetSourceIdMessage(custom_parameter);\n    });\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n    return;\n  }\n\n  if (!custom_parameter) {\n    iframe.contentWindow.postMessage({\n      captureSourceId: true\n    }, '*');\n  } else if (!!custom_parameter.forEach) {\n    iframe.contentWindow.postMessage({\n      captureCustomSourceId: custom_parameter\n    }, '*');\n  } else {\n    iframe.contentWindow.postMessage({\n      captureSourceIdWithAudio: true\n    }, '*');\n  }\n}\n\nvar iframe;\n\nwindow.getScreenConstraints = function (callback) {\n  loadIFrame(function () {\n    getScreenId(function (error, sourceId, screen_constraints) {\n      if (!screen_constraints) {\n        screen_constraints = {\n          video: true\n        };\n      }\n\n      callback(error, screen_constraints.video);\n    });\n  });\n};\n\nfunction loadIFrame(loadCallback) {\n  if (iframe) {\n    loadCallback();\n    return;\n  }\n\n  iframe = document.createElement('iframe');\n\n  iframe.onload = function () {\n    iframe.isLoaded = true;\n    loadCallback();\n  };\n\n  iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n  iframe.style.display = 'none';\n  (document.body || document.documentElement).appendChild(iframe);\n}\n\nwindow.getChromeExtensionStatus = function (callback) {\n  if (!!navigator.mozGetUserMedia) {\n    callback('installed-enabled');\n    return;\n  }\n\n  window.addEventListener('message', onIFrameCallback);\n\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus);\n      window.removeEventListener('message', onIFrameCallback);\n    }\n  }\n\n  setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\n\nfunction postGetChromeExtensionStatusMessage() {\n  if (!iframe) {\n    loadIFrame(postGetChromeExtensionStatusMessage);\n    return;\n  }\n\n  if (!iframe.isLoaded) {\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n    return;\n  }\n\n  iframe.contentWindow.postMessage({\n    getChromeExtensionStatus: true\n  }, '*');\n}\n\nexports.getScreenId = window.getScreenId;","map":null,"metadata":{},"sourceType":"script"}