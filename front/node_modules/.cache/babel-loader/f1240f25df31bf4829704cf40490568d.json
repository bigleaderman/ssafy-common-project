{"ast":null,"code":"var _jsxFileName = \"C:\\\\SSAFY\\\\2nd semester\\\\S07P12D106\\\\front\\\\src\\\\components\\\\Friends.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { Table, TableContainer, TableBody, Paper, TableRow, TableCell, Button, Container } from \"@mui/material\";\nimport SockJS from \"sockjs-client\";\nimport { over } from \"stompjs\"; // 나에게 친구 건 사람 목록(프로필 / 친구 수락 버튼, 친구 거절 버튼)\n// + 친구 목록(프로필 / 친구 삭제 버튼)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nfunction Friends() {\n  _s();\n\n  const me = useSelector(state => state.user); // 친구 관련\n\n  const [friend, setFriend] = useState([]); // 친구 목록\n\n  const [wantFriend, setWantFriend] = useState([]); // 나에게 친구 신청한 목록\n\n  useEffect(() => {\n    // 친구 목록\n    axios.get(\"/api/user/friend/friend-list\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${me.accessToken}`\n      }\n    }).then(response => {\n      console.log(\"axios 내 친구 목록 :\", response.data);\n      setFriend(response.data);\n    }); // 친구 신청 목록\n\n    axios.get(\"/api/user/friend/request-list\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${me.accessToken}`\n      }\n    }).then(response => {\n      console.log(\"axios 나에게 친구신청 한 유저 목록 : \", response.data);\n      setWantFriend(response.data);\n    });\n    connect();\n  }, []); // 소켓 연결\n\n  const connect = () => {\n    let Sock = new SockJS(\"https://i7d106.p.ssafy.io:8080/ws\");\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  }; // 구독 연결\n\n\n  const onConnected = () => {\n    console.log(\"소켓 친구 구독 연결\");\n    stompClient.subscribe(`/sub/friend/${me.nickname}`, Received);\n  };\n\n  const onError = err => {\n    console.log(\"에러가 남\", err);\n  }; // 서버로부터 받기 (친구 목록, 나에게 친구 신청한 목록)\n\n\n  const Received = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (payloadData.header.type === \"list\") {\n      // 내목록\n      console.log(\"소켓 서버가 주는 친구 목록\", payloadData);\n      setFriend(payloadData.data.users);\n    } else {\n      if (payloadData.header.type === \"offer-list\") {\n        console.log(\"소켓 서버가 주는 나에게 친구 신청 한 목록\", payloadData);\n        setWantFriend(payloadData.data.users);\n      }\n    }\n  }; // 서버로 전송하기 (친구 수락, 친구 거절, 친구 삭제)\n\n\n  const SendF = (f, type) => {\n    console.log(\"친구\", f);\n    console.log(type);\n    console.log(stompClient);\n\n    if (stompClient.ws.readyState === 1) {\n      // 연결이 되었을 때 전송해야함\n      console.log(\"친구 수락/거절/삭제 보내요\");\n      var sendData = {\n        header: {\n          type\n        },\n        data: {\n          friendSeq: f.friendSeq,\n          from: me.nickname,\n          to: f.nickname\n        }\n      };\n      return stompClient.send(`/pub/friend/${f.nickname}`, {}, JSON.stringify(sendData));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      style: {\n        padding: \"20px\",\n        height: \"100px\"\n      },\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"medium\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [\"\\uB098\\uC5D0\\uAC8C \\uC2E0\\uCCAD\\uD55C \\uCE5C\\uAD6C \\uBAA9\\uB85D\", wantFriend && wantFriend.map((wantF, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [wantF.nickname, /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  SendF(wantF, \"offer-accept\");\n                },\n                children: \"O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  SendF(wantF, \"offer-deny\");\n                },\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this)), \"\\uCE5C\\uAD6C \\uBAA9\\uB85D\", friend && friend.map((f, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: f.nickname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Friends, \"dUOgJ26PGbDhJtv4QcuNo8VlF4k=\", false, function () {\n  return [useSelector];\n});\n\n_c = Friends;\nexport default Friends;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friends\");","map":{"version":3,"names":["React","useEffect","useState","axios","useSelector","Table","TableContainer","TableBody","Paper","TableRow","TableCell","Button","Container","SockJS","over","stompClient","Friends","me","state","user","friend","setFriend","wantFriend","setWantFriend","get","headers","Authorization","accessToken","then","response","console","log","data","connect","Sock","onConnected","onError","subscribe","nickname","Received","err","payload","payloadData","JSON","parse","body","header","type","users","SendF","f","ws","readyState","sendData","friendSeq","from","to","send","stringify","padding","height","map","wantF","index"],"sources":["C:/SSAFY/2nd semester/S07P12D106/front/src/components/Friends.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Table,\r\n    TableContainer,\r\n    TableBody,\r\n    Paper,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    Container,\r\n} from \"@mui/material\";\r\n\r\nimport SockJS from \"sockjs-client\";\r\nimport { over } from \"stompjs\";\r\n// 나에게 친구 건 사람 목록(프로필 / 친구 수락 버튼, 친구 거절 버튼)\r\n// + 친구 목록(프로필 / 친구 삭제 버튼)\r\n\r\nvar stompClient = null;\r\nfunction Friends() {\r\n    const me = useSelector((state) => state.user);\r\n    // 친구 관련\r\n    const [friend, setFriend] = useState([]); // 친구 목록\r\n    const [wantFriend, setWantFriend] = useState([]); // 나에게 친구 신청한 목록\r\n    useEffect(() => {\r\n        // 친구 목록\r\n        axios\r\n            .get(\"/api/user/friend/friend-list\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${me.accessToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                console.log(\"axios 내 친구 목록 :\", response.data);\r\n                setFriend(response.data);\r\n            });\r\n        // 친구 신청 목록\r\n        axios\r\n            .get(\"/api/user/friend/request-list\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${me.accessToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                console.log(\r\n                    \"axios 나에게 친구신청 한 유저 목록 : \",\r\n                    response.data\r\n                );\r\n                setWantFriend(response.data);\r\n            });\r\n        connect();\r\n    }, []);\r\n    // 소켓 연결\r\n    const connect = () => {\r\n        let Sock = new SockJS(\"https://i7d106.p.ssafy.io:8080/ws\");\r\n        stompClient = over(Sock);\r\n        stompClient.connect({}, onConnected, onError);\r\n    };\r\n    // 구독 연결\r\n    const onConnected = () => {\r\n        console.log(\"소켓 친구 구독 연결\");\r\n        stompClient.subscribe(`/sub/friend/${me.nickname}`, Received);\r\n    };\r\n    const onError = (err) => {\r\n        console.log(\"에러가 남\", err);\r\n    };\r\n\r\n    // 서버로부터 받기 (친구 목록, 나에게 친구 신청한 목록)\r\n    const Received = (payload) => {\r\n        var payloadData = JSON.parse(payload.body);\r\n        if (payloadData.header.type === \"list\") {\r\n            // 내목록\r\n            console.log(\"소켓 서버가 주는 친구 목록\", payloadData);\r\n            setFriend(payloadData.data.users);\r\n        } else {\r\n            if (payloadData.header.type === \"offer-list\") {\r\n                console.log(\r\n                    \"소켓 서버가 주는 나에게 친구 신청 한 목록\",\r\n                    payloadData\r\n                );\r\n                setWantFriend(payloadData.data.users);\r\n            }\r\n        }\r\n    };\r\n\r\n    // 서버로 전송하기 (친구 수락, 친구 거절, 친구 삭제)\r\n    const SendF = (f, type) => {\r\n        console.log(\"친구\", f);\r\n        console.log(type)\r\n        console.log(stompClient);\r\n        if (stompClient.ws.readyState === 1) {\r\n            // 연결이 되었을 때 전송해야함\r\n            console.log(\"친구 수락/거절/삭제 보내요\");\r\n            var sendData = {\r\n                header: {\r\n                    type,\r\n                },\r\n                data: {\r\n                    friendSeq: f.friendSeq,\r\n                    from: me.nickname,\r\n                    to: f.nickname,\r\n                },\r\n            };\r\n            return stompClient.send(\r\n                `/pub/friend/${f.nickname}`,\r\n                {},\r\n                JSON.stringify(sendData)\r\n            );\r\n        }\r\n    };\r\n    return (\r\n        <span>\r\n            <TableContainer\r\n                style={{ padding: \"20px\", height: \"100px\" }}\r\n                component={Paper}\r\n            >\r\n                <Table size=\"medium\">\r\n                    <TableBody>\r\n                        나에게 신청한 친구 목록\r\n                        {wantFriend &&\r\n                            wantFriend.map((wantF, index) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell>\r\n                                        {wantF.nickname}\r\n                                        <Button\r\n                                            onClick={()=>{SendF(\r\n                                                wantF,\r\n                                                \"offer-accept\"\r\n                                            )}}\r\n                                        >\r\n                                            O\r\n                                        </Button>\r\n                                        <Button\r\n                                            onClick={()=>{SendF(wantF, \"offer-deny\")}}\r\n                                        >\r\n                                            X\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        친구 목록\r\n                        {friend &&\r\n                            friend.map((f, index) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell>\r\n                                        {f.nickname}\r\n                                        {/* <button onClick={SendF(f, \"delete\")}>\r\n                                            DEL\r\n                                        </button> */}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </span>\r\n    );\r\n}\r\nexport default Friends;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}