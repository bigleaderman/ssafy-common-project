{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignalEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Triggered by [[SessionEventMap.signal]]\n */\n\n\nvar SignalEvent =\n/** @class */\nfunction (_super) {\n  __extends(SignalEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function SignalEvent(target, type, data, from) {\n    var _this = _super.call(this, false, target, 'signal') || this;\n\n    if (!!type) {\n      _this.type = 'signal:' + type;\n    }\n\n    _this.data = data;\n    _this.from = from;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  SignalEvent.prototype.callDefaultBehavior = function () {};\n\n  return SignalEvent;\n}(Event_1.Event);\n\nexports.SignalEvent = SignalEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAKA;;;;;AAGA;AAAA;AAAA;EAAiCA;EAuB7B;;;;;EAGA,qBAAYC,MAAZ,EAA6BC,IAA7B,EAA4CC,IAA5C,EAA2DC,IAA3D,EAA4E;IAA5E,YACIC,kBAAM,KAAN,EAAaJ,MAAb,EAAqB,QAArB,KAA8B,IADlC;;IAEI,IAAI,CAAC,CAACC,IAAN,EAAY;MACRI,KAAI,CAACJ,IAAL,GAAY,YAAYA,IAAxB;IACH;;IACDI,KAAI,CAACH,IAAL,GAAYA,IAAZ;IACAG,KAAI,CAACF,IAAL,GAAYA,IAAZ;;EACH;EAED;;;EAGA;;;EACAG,yDAAyB,CAAzB;;EAEJ;AAAC,CAzCD,CAAiCC,aAAjC;;AAAaC","names":["__extends","target","type","data","from","_super","_this","SignalEvent","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\SignalEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Connection } from '../../OpenVidu/Connection';\nimport { Session } from '../../OpenVidu/Session';\n\n\n/**\n * Triggered by [[SessionEventMap.signal]]\n */\nexport class SignalEvent extends Event {\n\n    /**\n     * The type of signal. It is string `\"signal\"` for those signals sent with no [[SignalOptions.type]] property, and `\"signal:type\"` if was sent with a \n     * valid [[SignalOptions.type]] property.\n     *\n     * The client must be specifically subscribed to `Session.on('signal:type', function(signalEvent) {...})` to trigger that type of signal.\n     *\n     * Subscribing to `Session.on('signal', function(signalEvent) {...})` will trigger all signals, no matter their type.\n     */\n    type: string;\n\n    /**\n     * The message of the signal (can be empty)\n     */\n    data?: string;\n\n    /**\n     * The client that sent the signal. This property is undefined if the signal\n     * was directly generated by the application server (not by other client)\n     */\n    from?: Connection;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session, type?: string, data?: string, from?: Connection) {\n        super(false, target, 'signal');\n        if (!!type) {\n            this.type = 'signal:' + type;\n        }\n        this.data = data;\n        this.from = from;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n\n}"]},"metadata":{},"sourceType":"script"}