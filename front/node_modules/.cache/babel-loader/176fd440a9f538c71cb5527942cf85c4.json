{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n\n      if (typeof returnValue === 'string') {\n        return event.returnValue = returnValue;\n      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n\n\n      if (event.defaultPrevented) {\n        return event.returnValue = '';\n      }\n    };\n  }, [handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      return eventListenerRef.current(event);\n    };\n\n    window.addEventListener('beforeunload', eventListener);\n    return function () {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes\n/* remove-proptypes */\n= process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n} : {};\nexport { Beforeunload, useBeforeunload };","map":null,"metadata":{},"sourceType":"module"}