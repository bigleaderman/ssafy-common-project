{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventDispatcher = void 0;\n\nvar EventEmitter = require(\"wolfy87-eventemitter\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n\nvar EventDispatcher =\n/** @class */\nfunction () {\n  function EventDispatcher() {\n    /**\n     * @hidden\n     */\n    this.userHandlerArrowHandler = new WeakMap();\n    /**\n     * @hidden\n     */\n\n    this.ee = new EventEmitter();\n  }\n  /**\n   * @hidden\n   */\n\n\n  EventDispatcher.prototype.onAux = function (type, message, handler) {\n    var arrowHandler = function arrowHandler(event) {\n      if (event) {\n        logger.info(message, event);\n      } else {\n        logger.info(message);\n      }\n\n      handler(event);\n    };\n\n    this.userHandlerArrowHandler.set(handler, arrowHandler);\n    this.ee.on(type, arrowHandler);\n    return this;\n  };\n  /**\n   * @hidden\n   */\n\n\n  EventDispatcher.prototype.onceAux = function (type, message, handler) {\n    var _this = this;\n\n    var arrowHandler = function arrowHandler(event) {\n      if (event) {\n        logger.info(message, event);\n      } else {\n        logger.info(message);\n      }\n\n      handler(event); // Remove handler from map after first and only execution\n\n      _this.userHandlerArrowHandler.delete(handler);\n    };\n\n    this.userHandlerArrowHandler.set(handler, arrowHandler);\n    this.ee.once(type, arrowHandler);\n    return this;\n  };\n  /**\n   * @hidden\n   */\n\n\n  EventDispatcher.prototype.offAux = function (type, handler) {\n    if (!handler) {\n      this.ee.removeAllListeners(type);\n    } else {\n      // Must remove internal arrow function handler paired with user handler\n      var arrowHandler = this.userHandlerArrowHandler.get(handler);\n\n      if (!!arrowHandler) {\n        this.ee.off(type, arrowHandler);\n      }\n\n      this.userHandlerArrowHandler.delete(handler);\n    }\n\n    return this;\n  };\n\n  return EventDispatcher;\n}();\n\nexports.EventDispatcher = EventDispatcher;","map":null,"metadata":{},"sourceType":"script"}