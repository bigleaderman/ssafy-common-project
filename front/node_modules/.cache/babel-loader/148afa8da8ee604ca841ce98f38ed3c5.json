{"ast":null,"code":"var chromeMediaSource = 'screen';\nvar sourceId;\nvar screenCallback;\n\nif (typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined') {\n  var isFirefox = typeof window.InstallTrigger !== 'undefined';\n  var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n  var isChrome = !!window.chrome && !isOpera;\n  window.addEventListener('message', function (event) {\n    if (event.origin != window.location.origin) {\n      return;\n    }\n\n    onMessageCallback(event.data);\n  });\n}\n\nfunction onMessageCallback(data) {\n  if (data == 'PermissionDeniedError') {\n    if (screenCallback) return screenCallback('PermissionDeniedError');else throw new Error('PermissionDeniedError');\n  }\n\n  if (data == 'rtcmulticonnection-extension-loaded') {\n    chromeMediaSource = 'desktop';\n  }\n\n  if (data.sourceId && screenCallback) {\n    screenCallback(sourceId = data.sourceId, data.canRequestAudioTrack === true);\n  }\n}\n\nfunction isChromeExtensionAvailable(callback) {\n  if (!callback) return;\n  if (chromeMediaSource == 'desktop') return callback(true);\n  window.postMessage('are-you-there', '*');\n  setTimeout(function () {\n    if (chromeMediaSource == 'screen') {\n      callback(false);\n    } else callback(true);\n  }, 2000);\n}\n\nfunction getSourceId(callback) {\n  if (!callback) throw '\"callback\" parameter is mandatory.';\n  if (sourceId) return callback(sourceId);\n  screenCallback = callback;\n  window.postMessage('get-sourceId', '*');\n}\n\nfunction getCustomSourceId(arr, callback) {\n  if (!arr || !arr.forEach) throw '\"arr\" parameter is mandatory and it must be an array.';\n  if (!callback) throw '\"callback\" parameter is mandatory.';\n  if (sourceId) return callback(sourceId);\n  screenCallback = callback;\n  window.postMessage({\n    'get-custom-sourceId': arr\n  }, '*');\n}\n\nfunction getSourceIdWithAudio(callback) {\n  if (!callback) throw '\"callback\" parameter is mandatory.';\n  if (sourceId) return callback(sourceId);\n  screenCallback = callback;\n  window.postMessage('audio-plus-tab', '*');\n}\n\nfunction getChromeExtensionStatus(extensionid, callback) {\n  if (isFirefox) return callback('not-chrome');\n\n  if (arguments.length != 2) {\n    callback = extensionid;\n    extensionid = 'lfcgfepafnobdloecchnfaclibenjold';\n  }\n\n  var image = document.createElement('img');\n  image.src = 'chrome-extension://' + extensionid + '/icon.png';\n\n  image.onload = function () {\n    chromeMediaSource = 'screen';\n    window.postMessage('are-you-there', '*');\n    setTimeout(function () {\n      if (chromeMediaSource == 'screen') {\n        callback('installed-disabled');\n      } else callback('installed-enabled');\n    }, 2000);\n  };\n\n  image.onerror = function () {\n    callback('not-installed');\n  };\n}\n\nfunction getScreenConstraintsWithAudio(callback) {\n  getScreenConstraints(callback, true);\n}\n\nfunction getScreenConstraints(callback, captureSourceIdWithAudio) {\n  sourceId = '';\n  var firefoxScreenConstraints = {\n    mozMediaSource: 'window',\n    mediaSource: 'window'\n  };\n  if (isFirefox) return callback(null, firefoxScreenConstraints);\n  var screen_constraints = {\n    mandatory: {\n      chromeMediaSource: chromeMediaSource,\n      maxWidth: screen.width > 1920 ? screen.width : 1920,\n      maxHeight: screen.height > 1080 ? screen.height : 1080\n    },\n    optional: []\n  };\n\n  if (chromeMediaSource == 'desktop' && !sourceId) {\n    if (captureSourceIdWithAudio) {\n      getSourceIdWithAudio(function (sourceId, canRequestAudioTrack) {\n        screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n\n        if (canRequestAudioTrack) {\n          screen_constraints.canRequestAudioTrack = true;\n        }\n\n        callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n      });\n    } else {\n      getSourceId(function (sourceId) {\n        screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n        callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n      });\n    }\n\n    return;\n  }\n\n  if (chromeMediaSource == 'desktop') {\n    screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n  }\n\n  callback(null, screen_constraints);\n}\n\nexports.getScreenConstraints = getScreenConstraints;\nexports.getScreenConstraintsWithAudio = getScreenConstraintsWithAudio;\nexports.isChromeExtensionAvailable = isChromeExtensionAvailable;\nexports.getChromeExtensionStatus = getChromeExtensionStatus;\nexports.getSourceId = getSourceId;","map":{"version":3,"mappings":"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","names":["chromeMediaSource","sourceId","screenCallback","window","navigator","userAgent","isFirefox","InstallTrigger","isOpera","opera","indexOf","isChrome","chrome","addEventListener","event","origin","location","onMessageCallback","data","Error","canRequestAudioTrack","isChromeExtensionAvailable","callback","postMessage","setTimeout","getSourceId","getCustomSourceId","arr","forEach","getSourceIdWithAudio","getChromeExtensionStatus","extensionid","arguments","length","image","document","createElement","src","onload","onerror","getScreenConstraintsWithAudio","getScreenConstraints","captureSourceIdWithAudio","firefoxScreenConstraints","mozMediaSource","mediaSource","screen_constraints","mandatory","maxWidth","screen","width","maxHeight","height","optional","chromeMediaSourceId","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\ScreenSharing\\Screen-Capturing.js"],"sourcesContent":["// global variables\nvar chromeMediaSource = 'screen';\nvar sourceId;\nvar screenCallback;\n\nif(typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'){\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isChrome = !!window.chrome && !isOpera;\n\n    window.addEventListener('message', function (event) {\n        if (event.origin != window.location.origin) {\n            return;\n        }\n        onMessageCallback(event.data);\n    });\n}\n\n// and the function that handles received messages\nfunction onMessageCallback(data) {\n    // \"cancel\" button is clicked\n    if (data == 'PermissionDeniedError') {\n        if (screenCallback)\n            return screenCallback('PermissionDeniedError');\n        else\n            throw new Error('PermissionDeniedError');\n    }\n    // extension notified his presence\n    if (data == 'rtcmulticonnection-extension-loaded') {\n        chromeMediaSource = 'desktop';\n    }\n    // extension shared temp sourceId\n    if (data.sourceId && screenCallback) {\n        screenCallback(sourceId = data.sourceId, data.canRequestAudioTrack === true);\n    }\n}\n\n// this method can be used to check if chrome extension is installed & enabled.\nfunction isChromeExtensionAvailable(callback) {\n    if (!callback) return;\n    if (chromeMediaSource == 'desktop') return callback(true);\n\n    // ask extension if it is available\n    window.postMessage('are-you-there', '*');\n    setTimeout(function () {\n        if (chromeMediaSource == 'screen') {\n            callback(false);\n        } else callback(true);\n    }, 2000);\n}\n\n// this function can be used to get \"source-id\" from the extension\nfunction getSourceId(callback) {\n    if (!callback)\n        throw '\"callback\" parameter is mandatory.';\n    if (sourceId)\n        return callback(sourceId);\n    screenCallback = callback;\n    window.postMessage('get-sourceId', '*');\n}\n\n// this function can be used to get \"source-id\" from the extension\nfunction getCustomSourceId(arr, callback) {\n    if (!arr || !arr.forEach) throw '\"arr\" parameter is mandatory and it must be an array.';\n    if (!callback) throw '\"callback\" parameter is mandatory.';\n\n    if (sourceId) return callback(sourceId);\n\n    screenCallback = callback;\n    window.postMessage({\n        'get-custom-sourceId': arr\n    }, '*');\n}\n\n// this function can be used to get \"source-id\" from the extension\nfunction getSourceIdWithAudio(callback) {\n    if (!callback) throw '\"callback\" parameter is mandatory.';\n    if (sourceId) return callback(sourceId);\n\n    screenCallback = callback;\n    window.postMessage('audio-plus-tab', '*');\n}\n\nfunction getChromeExtensionStatus(extensionid, callback) {\n    if (isFirefox)\n        return callback('not-chrome');\n    if (arguments.length != 2) {\n        callback = extensionid;\n        extensionid = 'lfcgfepafnobdloecchnfaclibenjold'; // default extension-id\n    }\n    var image = document.createElement('img');\n    image.src = 'chrome-extension://' + extensionid + '/icon.png';\n    image.onload = function () {\n        chromeMediaSource = 'screen';\n        window.postMessage('are-you-there', '*');\n        setTimeout(function () {\n            if (chromeMediaSource == 'screen') {\n                callback('installed-disabled');\n            } else\n                callback('installed-enabled');\n        }, 2000);\n    };\n    image.onerror = function () {\n        callback('not-installed');\n    };\n}\n\nfunction getScreenConstraintsWithAudio(callback) {\n    getScreenConstraints(callback, true);\n}\n\n// this function explains how to use above methods/objects\nfunction getScreenConstraints(callback, captureSourceIdWithAudio) {\n    sourceId = '';\n    var firefoxScreenConstraints = {\n        mozMediaSource: 'window',\n        mediaSource: 'window'\n    };\n    if (isFirefox)\n        return callback(null, firefoxScreenConstraints);\n    // this statement defines getUserMedia constraints\n    // that will be used to capture content of screen\n    var screen_constraints = {\n        mandatory: {\n            chromeMediaSource: chromeMediaSource,\n            maxWidth: screen.width > 1920 ? screen.width : 1920,\n            maxHeight: screen.height > 1080 ? screen.height : 1080\n        },\n        optional: []\n    };\n    // this statement verifies chrome extension availability\n    // if installed and available then it will invoke extension API\n    // otherwise it will fallback to command-line based screen capturing API\n    if (chromeMediaSource == 'desktop' && !sourceId) {\n        if (captureSourceIdWithAudio) {\n            getSourceIdWithAudio(function (sourceId, canRequestAudioTrack) {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n\n                if (canRequestAudioTrack) {\n                    screen_constraints.canRequestAudioTrack = true;\n                }\n                callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n            });\n        }\n        else {\n            getSourceId(function (sourceId) {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n                callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n            });\n        }\n        return;\n    }\n\n    // this statement sets gets 'sourceId\" and sets \"chromeMediaSourceId\"\n    if (chromeMediaSource == 'desktop') {\n        screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n    }\n\n    // now invoking native getUserMedia API\n    callback(null, screen_constraints);\n}\n\nexports.getScreenConstraints = getScreenConstraints;\nexports.getScreenConstraintsWithAudio = getScreenConstraintsWithAudio;\nexports.isChromeExtensionAvailable = isChromeExtensionAvailable;\nexports.getChromeExtensionStatus = getChromeExtensionStatus;\nexports.getSourceId = getSourceId;"]},"metadata":{},"sourceType":"script"}