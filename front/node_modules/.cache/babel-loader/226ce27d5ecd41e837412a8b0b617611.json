{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar OpenViduLayout = /*#__PURE__*/function () {\n  function OpenViduLayout() {\n    _classCallCheck(this, OpenViduLayout);\n\n    _defineProperty(this, \"layoutContainer\", void 0);\n\n    _defineProperty(this, \"opts\", void 0);\n  }\n\n  _createClass(OpenViduLayout, [{\n    key: \"fixAspectRatio\",\n    value: function fixAspectRatio(elem, width) {\n      var sub = elem.querySelector('.OT_root');\n\n      if (sub) {\n        // If this is the parent of a subscriber or publisher then we need\n        // to force the mutation observer on the publisher or subscriber to\n        // trigger to get it to fix it's layout\n        var oldWidth = sub.style.width;\n        sub.style.width = width + 'px'; // sub.style.height = height + 'px';\n\n        sub.style.width = oldWidth || '';\n      }\n    }\n  }, {\n    key: \"positionElement\",\n    value: function positionElement(elem, x, y, width, height, animate) {\n      var _this = this;\n\n      var targetPosition = {\n        left: x + 'px',\n        top: y + 'px',\n        width: width + 'px',\n        height: height + 'px'\n      };\n      this.fixAspectRatio(elem, width);\n\n      if (animate && _jquery[\"default\"]) {\n        (0, _jquery[\"default\"])(elem).stop();\n        (0, _jquery[\"default\"])(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', function () {\n          _this.fixAspectRatio(elem, width);\n\n          if (animate.complete) {\n            animate.complete.call(_this);\n          }\n        });\n      } else {\n        (0, _jquery[\"default\"])(elem).css(targetPosition);\n      }\n\n      this.fixAspectRatio(elem, width);\n    }\n  }, {\n    key: \"getVideoRatio\",\n    value: function getVideoRatio(elem) {\n      if (!elem) {\n        return 3 / 4;\n      }\n\n      var video = elem.querySelector('video');\n\n      if (video && video.videoHeight && video.videoWidth) {\n        return video.videoHeight / video.videoWidth;\n      } else if (elem.videoHeight && elem.videoWidth) {\n        return elem.videoHeight / elem.videoWidth;\n      }\n\n      return 3 / 4;\n    }\n  }, {\n    key: \"getCSSNumber\",\n    value: function getCSSNumber(elem, prop) {\n      var cssStr = (0, _jquery[\"default\"])(elem).css(prop);\n      return cssStr ? parseInt(cssStr, 10) : 0;\n    } // Really cheap UUID function\n\n  }, {\n    key: \"cheapUUID\",\n    value: function cheapUUID() {\n      return (Math.random() * 100000000).toFixed(0);\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(elem) {\n      var heightStr = (0, _jquery[\"default\"])(elem).css('height');\n      return heightStr ? parseInt(heightStr, 10) : 0;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth(elem) {\n      var widthStr = (0, _jquery[\"default\"])(elem).css('width');\n      return widthStr ? parseInt(widthStr, 10) : 0;\n    }\n  }, {\n    key: \"getBestDimensions\",\n    value: function getBestDimensions(minR, maxR, count, WIDTH, HEIGHT, targetHeight) {\n      var maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio; // Iterate through every possible combination of rows and columns\n      // and see which one has the least amount of whitespace\n\n      for (var i = 1; i <= count; i++) {\n        var colsAux = i;\n        var rowsAux = Math.ceil(count / colsAux); // Try taking up the whole height and width\n\n        tHeight = Math.floor(HEIGHT / rowsAux);\n        tWidth = Math.floor(WIDTH / colsAux);\n        tRatio = tHeight / tWidth;\n\n        if (tRatio > maxR) {\n          // We went over decrease the height\n          tRatio = maxR;\n          tHeight = tWidth * tRatio;\n        } else if (tRatio < minR) {\n          // We went under decrease the width\n          tRatio = minR;\n          tWidth = tHeight / tRatio;\n        }\n\n        var area = tWidth * tHeight * count; // If this width and height takes up the most space then we're going with that\n\n        if (maxArea === undefined || area > maxArea) {\n          maxArea = area;\n          targetHeight = tHeight;\n          targetWidth = tWidth;\n          targetCols = colsAux;\n          targetRows = rowsAux;\n        }\n      }\n\n      return {\n        maxArea: maxArea,\n        targetCols: targetCols,\n        targetRows: targetRows,\n        targetHeight: targetHeight,\n        targetWidth: targetWidth,\n        ratio: targetHeight / targetWidth\n      };\n    }\n  }, {\n    key: \"arrange\",\n    value: function arrange(children, WIDTH, HEIGHT, offsetLeft, offsetTop, fixedRatio, minRatio, maxRatio, animate) {\n      var targetHeight;\n      var count = children.length;\n      var dimensions;\n\n      if (!fixedRatio) {\n        dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n      } else {\n        // Use the ratio of the first video element we find to approximate\n        var ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n        dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n      } // Loop through each stream in the container and place it inside\n\n\n      var x = 0,\n          y = 0;\n      var rows = [];\n      var row; // Iterate through the children and create an array with a new item for each row\n      // and calculate the width of each row so that we know if we go over the size and need\n      // to adjust\n\n      for (var i = 0; i < children.length; i++) {\n        if (i % dimensions.targetCols === 0) {\n          // This is a new row\n          row = {\n            children: [],\n            width: 0,\n            height: 0\n          };\n          rows.push(row);\n        }\n\n        var elem = children[i];\n        row.children.push(elem);\n        var targetWidth = dimensions.targetWidth;\n        targetHeight = dimensions.targetHeight; // If we're using a fixedRatio then we need to set the correct ratio for this element\n\n        if (fixedRatio) {\n          targetWidth = targetHeight / this.getVideoRatio(elem);\n        }\n\n        row.width += targetWidth;\n        row.height = targetHeight;\n      } // Calculate total row height adjusting if we go too wide\n\n\n      var totalRowHeight = 0;\n      var remainingShortRows = 0;\n\n      for (var _i = 0; _i < rows.length; _i++) {\n        row = rows[_i];\n\n        if (row.width > WIDTH) {\n          // Went over on the width, need to adjust the height proportionally\n          row.height = Math.floor(row.height * (WIDTH / row.width));\n          row.width = WIDTH;\n        } else if (row.width < WIDTH) {\n          remainingShortRows += 1;\n        }\n\n        totalRowHeight += row.height;\n      }\n\n      if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n        // We can grow some of the rows, we're not taking up the whole height\n        var remainingHeightDiff = HEIGHT - totalRowHeight;\n        totalRowHeight = 0;\n\n        for (var _i2 = 0; _i2 < rows.length; _i2++) {\n          row = rows[_i2];\n\n          if (row.width < WIDTH) {\n            // Evenly distribute the extra height between the short rows\n            var extraHeight = remainingHeightDiff / remainingShortRows;\n\n            if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n              // We can't go that big or we'll go too wide\n              extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n            }\n\n            row.width += Math.floor(extraHeight / row.height * row.width);\n            row.height += extraHeight;\n            remainingHeightDiff -= extraHeight;\n            remainingShortRows -= 1;\n          }\n\n          totalRowHeight += row.height;\n        }\n      } // vertical centering\n\n\n      y = (HEIGHT - totalRowHeight) / 2; // Iterate through each row and place each child\n\n      for (var _i3 = 0; _i3 < rows.length; _i3++) {\n        row = rows[_i3]; // center the row\n\n        var rowMarginLeft = (WIDTH - row.width) / 2;\n        x = rowMarginLeft;\n\n        for (var j = 0; j < row.children.length; j++) {\n          var _elem = row.children[j];\n          var _targetWidth = dimensions.targetWidth;\n          targetHeight = row.height; // If we're using a fixedRatio then we need to set the correct ratio for this element\n\n          if (fixedRatio) {\n            _targetWidth = Math.floor(targetHeight / this.getVideoRatio(_elem));\n          }\n\n          _elem.style.position = 'absolute'; // $(elem).css('position', 'absolute');\n\n          var actualWidth = _targetWidth - this.getCSSNumber(_elem, 'paddingLeft') - this.getCSSNumber(_elem, 'paddingRight') - this.getCSSNumber(_elem, 'marginLeft') - this.getCSSNumber(_elem, 'marginRight') - this.getCSSNumber(_elem, 'borderLeft') - this.getCSSNumber(_elem, 'borderRight');\n          var actualHeight = targetHeight - this.getCSSNumber(_elem, 'paddingTop') - this.getCSSNumber(_elem, 'paddingBottom') - this.getCSSNumber(_elem, 'marginTop') - this.getCSSNumber(_elem, 'marginBottom') - this.getCSSNumber(_elem, 'borderTop') - this.getCSSNumber(_elem, 'borderBottom');\n          this.positionElement(_elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n          x += _targetWidth;\n        }\n\n        y += targetHeight;\n      }\n    }\n  }, {\n    key: \"filterDisplayNone\",\n    value: function filterDisplayNone(element) {\n      return element.style.display !== 'none';\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout() {\n      if (this.layoutContainer.style.display === 'none') {\n        return;\n      }\n\n      var id = this.layoutContainer.id;\n\n      if (!id) {\n        id = 'OT_' + this.cheapUUID();\n        this.layoutContainer.id = id;\n      }\n\n      var HEIGHT = this.getHeight(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderTop') - this.getCSSNumber(this.layoutContainer, 'borderBottom');\n      var WIDTH = this.getWidth(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderLeft') - this.getCSSNumber(this.layoutContainer, 'borderRight');\n      var availableRatio = HEIGHT / WIDTH;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n      var bigOffsetTop = 0;\n      var bigOffsetLeft = 0;\n      var bigOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass), this.filterDisplayNone);\n      var smallOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'), this.filterDisplayNone);\n\n      if (bigOnes.length > 0 && smallOnes.length > 0) {\n        var bigWidth, bigHeight;\n\n        if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n          // We are tall, going to take up the whole width and arrange small\n          // guys at the bottom\n          bigWidth = WIDTH;\n          bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n          offsetTop = bigHeight;\n          bigOffsetTop = HEIGHT - offsetTop;\n        } else {\n          // We are wide, going to take up the whole height and arrange the small\n          // guys on the right\n          bigHeight = HEIGHT;\n          bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n          offsetLeft = bigWidth;\n          bigOffsetLeft = WIDTH - offsetLeft;\n        }\n\n        if (this.opts.bigFirst) {\n          this.arrange(bigOnes, bigWidth, bigHeight, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n          this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n        } else {\n          this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, 0, 0, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n          this.arrange(bigOnes, bigWidth, bigHeight, bigOffsetLeft, bigOffsetTop, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n        }\n      } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n        this // We only have one bigOne just center it\n        .arrange(bigOnes, WIDTH, HEIGHT, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n      } else {\n        this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n      }\n    }\n  }, {\n    key: \"initLayoutContainer\",\n    value: function initLayoutContainer(container, opts) {\n      this.opts = {\n        maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n        minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n        fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n        animate: opts.animate != null ? opts.animate : false,\n        bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n        bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n        bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n        bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n        bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n        bigFirst: opts.bigFirst != null ? opts.bigFirst : true\n      };\n      this.layoutContainer = typeof container === 'string' ? (0, _jquery[\"default\"])(container) : container;\n    }\n  }, {\n    key: \"setLayoutOptions\",\n    value: function setLayoutOptions(options) {\n      this.opts = options;\n    }\n  }]);\n\n  return OpenViduLayout;\n}();\n\nvar _default = OpenViduLayout;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}