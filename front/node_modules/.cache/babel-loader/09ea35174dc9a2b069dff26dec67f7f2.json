{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n\nvar Publisher_1 = require(\"../../OpenVidu/Publisher\");\n\nvar Session_1 = require(\"../../OpenVidu/Session\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by:\n * - `streamCreated` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamCreated) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamCreated) objects)\n * - `streamDestroyed]` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamDestroyed) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamDestroyed) objects)\n */\n\nvar StreamEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamEvent(cancelable, target, type, stream, reason) {\n    var _this = _super.call(this, cancelable, target, type) || this;\n\n    _this.stream = stream;\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  StreamEvent.prototype.callDefaultBehavior = function () {\n    if (this.type === 'streamDestroyed') {\n      if (this.target instanceof Session_1.Session) {\n        // Remote Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n        this.stream.disposeWebRtcPeer();\n      } else if (this.target instanceof Publisher_1.Publisher) {\n        // Local Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n        clearInterval(this.target.screenShareResizeInterval);\n        this.stream.isLocalStreamReadyToPublish = false; // Delete Publisher object from OpenVidu publishers array\n\n        var openviduPublishers = this.target.openvidu.publishers;\n\n        for (var i = 0; i < openviduPublishers.length; i++) {\n          if (openviduPublishers[i] === this.target) {\n            openviduPublishers.splice(i, 1);\n            break;\n          }\n        }\n      } // Dispose the MediaStream local object\n\n\n      this.stream.disposeMediaStream(); // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n      // (method Session.subscribe must have been called)\n\n      if (this.stream.streamManager) this.stream.streamManager.removeAllVideos(); // Delete stream from Session.remoteStreamsCreated map\n\n      this.stream.session.remoteStreamsCreated.delete(this.stream.streamId); // Delete StreamOptionsServer from remote Connection\n\n      var remoteConnection = this.stream.session.remoteConnections.get(this.stream.connection.connectionId);\n\n      if (!!remoteConnection && !!remoteConnection.remoteOptions) {\n        var streamOptionsServer = remoteConnection.remoteOptions.streams;\n\n        for (var i = streamOptionsServer.length - 1; i >= 0; --i) {\n          if (streamOptionsServer[i].id === this.stream.streamId) {\n            streamOptionsServer.splice(i, 1);\n          }\n        }\n      }\n    }\n  };\n\n  return StreamEvent;\n}(Event_1.Event);\n\nexports.StreamEvent = StreamEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;;AACA;;AAEA;AAEA;;;;;AAGA,IAAMA,MAAM,GAAmBC,gCAAeC,WAAf,EAA/B;AAEA;;;;;;AAKA;AAAA;AAAA;EAAiCC;EAuB7B;;;;;EAGA,qBAAYC,UAAZ,EAAiCC,MAAjC,EAA8DC,IAA9D,EAA4EC,MAA5E,EAA4FC,MAA5F,EAA0G;IAA1G,YACIC,kBAAML,UAAN,EAAkBC,MAAlB,EAA0BC,IAA1B,KAA+B,IADnC;;IAEII,KAAI,CAACH,MAAL,GAAcA,MAAd;IACAG,KAAI,CAACF,MAAL,GAAcA,MAAd;;EACH;EAED;;;;;EAGAG;IACI,IAAI,KAAKL,IAAL,KAAc,iBAAlB,EAAqC;MAEjC,IAAI,KAAKD,MAAL,YAAuBO,iBAA3B,EAAoC;QAChC;QACAZ,MAAM,CAACa,IAAP,CAAY,oCAAoC,KAAKP,IAAzC,GAAgD,iCAA5D;QACA,KAAKC,MAAL,CAAYO,iBAAZ;MACH,CAJD,MAIO,IAAI,KAAKT,MAAL,YAAuBU,qBAA3B,EAAsC;QACzC;QACAf,MAAM,CAACa,IAAP,CAAY,oCAAoC,KAAKP,IAAzC,GAAgD,mCAA5D;QACAU,aAAa,CAAa,KAAKX,MAAL,CAAaY,yBAA1B,CAAb;QACA,KAAKV,MAAL,CAAYW,2BAAZ,GAA0C,KAA1C,CAJyC,CAMzC;;QACA,IAAMC,kBAAkB,GAAe,KAAKd,MAAL,CAAae,QAAb,CAAsBC,UAA7D;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAAkB,CAACI,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;UAChD,IAAIH,kBAAkB,CAACG,CAAD,CAAlB,KAAsC,KAAKjB,MAA/C,EAAwD;YACpDc,kBAAkB,CAACK,MAAnB,CAA0BF,CAA1B,EAA6B,CAA7B;YACA;UACH;QACJ;MACJ,CApBgC,CAsBjC;;;MACA,KAAKf,MAAL,CAAYkB,kBAAZ,GAvBiC,CAyBjC;MACA;;MACA,IAAI,KAAKlB,MAAL,CAAYmB,aAAhB,EAA+B,KAAKnB,MAAL,CAAYmB,aAAZ,CAA0BC,eAA1B,GA3BE,CA6BjC;;MACA,KAAKpB,MAAL,CAAYqB,OAAZ,CAAoBC,oBAApB,CAAyCC,MAAzC,CAAgD,KAAKvB,MAAL,CAAYwB,QAA5D,EA9BiC,CAgCjC;;MACA,IAAMC,gBAAgB,GAAG,KAAKzB,MAAL,CAAYqB,OAAZ,CAAoBK,iBAApB,CAAsCC,GAAtC,CAA0C,KAAK3B,MAAL,CAAY4B,UAAZ,CAAuBC,YAAjE,CAAzB;;MACA,IAAI,CAAC,CAACJ,gBAAF,IAAsB,CAAC,CAACA,gBAAgB,CAACK,aAA7C,EAA4D;QACxD,IAAMC,mBAAmB,GAAGN,gBAAgB,CAACK,aAAjB,CAA+BE,OAA3D;;QACA,KAAK,IAAIjB,CAAC,GAAGgB,mBAAmB,CAACf,MAApB,GAA6B,CAA1C,EAA6CD,CAAC,IAAI,CAAlD,EAAqD,EAAEA,CAAvD,EAA0D;UACtD,IAAIgB,mBAAmB,CAAChB,CAAD,CAAnB,CAAuBkB,EAAvB,KAA8B,KAAKjC,MAAL,CAAYwB,QAA9C,EAAwD;YACpDO,mBAAmB,CAACd,MAApB,CAA2BF,CAA3B,EAA8B,CAA9B;UACH;QACJ;MACJ;IAEJ;EACJ,CA7CD;;EA+CJ;AAAC,CAlFD,CAAiCmB,aAAjC;;AAAaC","names":["logger","OpenViduLogger_1","getInstance","__extends","cancelable","target","type","stream","reason","_super","_this","StreamEvent","Session_1","info","disposeWebRtcPeer","Publisher_1","clearInterval","screenShareResizeInterval","isLocalStreamReadyToPublish","openviduPublishers","openvidu","publishers","i","length","splice","disposeMediaStream","streamManager","removeAllVideos","session","remoteStreamsCreated","delete","streamId","remoteConnection","remoteConnections","get","connection","connectionId","remoteOptions","streamOptionsServer","streams","id","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\StreamEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Publisher } from '../../OpenVidu/Publisher';\nimport { Session } from '../../OpenVidu/Session';\nimport { Stream } from '../../OpenVidu/Stream';\nimport { OpenViduLogger } from '../Logger/OpenViduLogger';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * Triggered by:\n * - `streamCreated` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamCreated) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamCreated) objects)\n * - `streamDestroyed]` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamDestroyed) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamDestroyed) objects)\n */\nexport class StreamEvent extends Event {\n\n    /**\n     * Stream object that was created or destroyed\n     */\n    stream: Stream;\n\n    /**\n     * For 'streamDestroyed' event:\n     * - \"unpublish\": method `Session.unpublish()` has been called\n     * - \"disconnect\": method `Session.disconnect()` has been called\n     * - \"forceUnpublishByUser\": some user has called `Session.forceUnpublish()` over the Stream\n     * - \"forceDisconnectByUser\": some user has called `Session.forceDisconnect()` over the Stream\n     * - \"forceUnpublishByServer\": the user's stream has been unpublished from the Session by the application\n     * - \"forceDisconnectByServer\": the user has been evicted from the Session by the application\n     * - \"sessionClosedByServer\": the Session has been closed by the application\n     * - \"networkDisconnect\": the user's network connection has dropped\n     * - \"nodeCrashed\": a node has crashed in the server side\n     *\n     * For 'streamCreated' empty string\n     */\n    reason: string;\n\n    /**\n     * @hidden\n     */\n    constructor(cancelable: boolean, target: Session | Publisher, type: string, stream: Stream, reason: string) {\n        super(cancelable, target, type);\n        this.stream = stream;\n        this.reason = reason;\n    }\n\n    /**\n     * @hidden\n     */\n    callDefaultBehavior() {\n        if (this.type === 'streamDestroyed') {\n\n            if (this.target instanceof Session) {\n                // Remote Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n                this.stream.disposeWebRtcPeer();\n            } else if (this.target instanceof Publisher) {\n                // Local Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n                clearInterval((<Publisher>this.target).screenShareResizeInterval);\n                this.stream.isLocalStreamReadyToPublish = false;\n\n                // Delete Publisher object from OpenVidu publishers array\n                const openviduPublishers = (<Publisher>this.target).openvidu.publishers;\n                for (let i = 0; i < openviduPublishers.length; i++) {\n                    if (openviduPublishers[i] === (<Publisher>this.target)) {\n                        openviduPublishers.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n\n            // Dispose the MediaStream local object\n            this.stream.disposeMediaStream();\n\n            // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n            // (method Session.subscribe must have been called)\n            if (this.stream.streamManager) this.stream.streamManager.removeAllVideos();\n\n            // Delete stream from Session.remoteStreamsCreated map\n            this.stream.session.remoteStreamsCreated.delete(this.stream.streamId);\n\n            // Delete StreamOptionsServer from remote Connection\n            const remoteConnection = this.stream.session.remoteConnections.get(this.stream.connection.connectionId);\n            if (!!remoteConnection && !!remoteConnection.remoteOptions) {\n                const streamOptionsServer = remoteConnection.remoteOptions.streams;\n                for (let i = streamOptionsServer.length - 1; i >= 0; --i) {\n                    if (streamOptionsServer[i].id === this.stream.streamId) {\n                        streamOptionsServer.splice(i, 1);\n                    }\n                }\n            }\n\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"script"}