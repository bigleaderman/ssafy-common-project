{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SessionDisconnectedEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by [[sessionDisconnected]]\n */\n\nvar SessionDisconnectedEvent =\n/** @class */\nfunction (_super) {\n  __extends(SessionDisconnectedEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function SessionDisconnectedEvent(target, reason) {\n    var _this = _super.call(this, true, target, 'sessionDisconnected') || this;\n\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  SessionDisconnectedEvent.prototype.callDefaultBehavior = function () {\n    logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n    var session = this.target; // Dispose and delete all remote Connections\n\n    session.remoteConnections.forEach(function (remoteConnection) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      var connectionId = remoteConnection.connectionId;\n\n      if (!!((_a = session.remoteConnections.get(connectionId)) === null || _a === void 0 ? void 0 : _a.stream)) {\n        (_b = session.remoteConnections.get(connectionId)) === null || _b === void 0 ? void 0 : _b.stream.disposeWebRtcPeer();\n        (_c = session.remoteConnections.get(connectionId)) === null || _c === void 0 ? void 0 : _c.stream.disposeMediaStream();\n\n        if ((_d = session.remoteConnections.get(connectionId)) === null || _d === void 0 ? void 0 : _d.stream.streamManager) {\n          (_e = session.remoteConnections.get(connectionId)) === null || _e === void 0 ? void 0 : _e.stream.streamManager.removeAllVideos();\n        }\n\n        var streamId = (_g = (_f = session.remoteConnections.get(connectionId)) === null || _f === void 0 ? void 0 : _f.stream) === null || _g === void 0 ? void 0 : _g.streamId;\n\n        if (!!streamId) {\n          session.remoteStreamsCreated.delete(streamId);\n        }\n\n        (_h = session.remoteConnections.get(connectionId)) === null || _h === void 0 ? void 0 : _h.dispose();\n      }\n\n      session.remoteConnections.delete(connectionId);\n    });\n  };\n\n  return SessionDisconnectedEvent;\n}(Event_1.Event);\n\nexports.SessionDisconnectedEvent = SessionDisconnectedEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAEA;AAEA;;;;;AAGA,IAAMA,MAAM,GAAmBC,gCAAeC,WAAf,EAA/B;AAGA;;;;AAGA;AAAA;AAAA;EAA8CC;EAgB1C;;;;;EAGA,kCAAYC,MAAZ,EAA6BC,MAA7B,EAA2C;IAA3C,YACIC,kBAAM,IAAN,EAAYF,MAAZ,EAAoB,qBAApB,KAA0C,IAD9C;;IAEIG,KAAI,CAACF,MAAL,GAAcA,MAAd;;EACH;EAED;;;;;EAGAG;IAEIR,MAAM,CAACS,IAAP,CAAY,oCAAoC,KAAKC,IAAzC,GAAgD,iCAA5D;IAEA,IAAMC,OAAO,GAAY,KAAKP,MAA9B,CAJJ,CAMI;;IACAO,OAAO,CAACC,iBAAR,CAA0BC,OAA1B,CAAkC,4BAAgB;;;MAC9C,IAAMC,YAAY,GAAGC,gBAAgB,CAACD,YAAtC;;MACA,IAAI,CAAC,EAAC,aAAO,CAACF,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CG,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEC,MAA9C,CAAL,EAA2D;QACvD,aAAO,CAACN,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CK,aAA3C,GAA2C,MAA3C,GAA2CA,GAAED,MAAF,CAAUE,iBAAV,EAA3C;QACA,aAAO,CAACR,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CO,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEH,MAAF,CAAUI,kBAAV,EAA3C;;QACA,IAAI,aAAO,CAACV,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CS,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEL,MAAF,CAAUM,aAAzD,EAAwE;UACpE,aAAO,CAACZ,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CW,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEP,MAAF,CAAUM,aAAV,CAAwBE,eAAxB,EAA3C;QACH;;QACD,IAAMC,QAAQ,GAAG,mBAAO,CAACf,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2Cc,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEV,MAA7C,MAAmD,IAAnD,IAAmDW,aAAnD,GAAmD,MAAnD,GAAmDA,GAAEF,QAAtE;;QACA,IAAI,CAAC,CAACA,QAAN,EAAgB;UACZhB,OAAO,CAACmB,oBAAR,CAA6BC,MAA7B,CAAoCJ,QAApC;QACH;;QACD,aAAO,CAACf,iBAAR,CAA0BI,GAA1B,CAA8BF,YAA9B,OAA2C,IAA3C,IAA2CkB,aAA3C,GAA2C,MAA3C,GAA2CA,GAAEC,OAAF,EAA3C;MACH;;MACDtB,OAAO,CAACC,iBAAR,CAA0BmB,MAA1B,CAAiCjB,YAAjC;IACH,CAfD;EAgBH,CAvBD;;EAyBJ;AAAC,CApDD,CAA8CoB,aAA9C;;AAAaC","names":["logger","OpenViduLogger_1","getInstance","__extends","target","reason","_super","_this","SessionDisconnectedEvent","info","type","session","remoteConnections","forEach","connectionId","remoteConnection","get","_a","stream","_b","disposeWebRtcPeer","_c","disposeMediaStream","_d","streamManager","_e","removeAllVideos","streamId","_f","_g","remoteStreamsCreated","delete","_h","dispose","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\SessionDisconnectedEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Session } from '../../OpenVidu/Session';\nimport { OpenViduLogger } from '../Logger/OpenViduLogger';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n\n/**\n * Triggered by [[sessionDisconnected]]\n */\nexport class SessionDisconnectedEvent extends Event {\n\n    /**\n     * - \"disconnect\": you have called `Session.disconnect()`\n     * - \"forceDisconnectByUser\": you have been evicted from the Session by other user calling `Session.forceDisconnect()`\n     * - \"forceDisconnectByServer\": you have been evicted from the Session by the application\n     * - \"sessionClosedByServer\": the Session has been closed by the application\n     * - \"networkDisconnect\": your network connection has dropped. Before a SessionDisconnectedEvent with this reason is triggered,\n     *      Session object will always have previously dispatched a `reconnecting` event. If the reconnection process succeeds,\n     *      Session object will dispatch a `reconnected` event. If it fails, Session object will dispatch a SessionDisconnectedEvent\n     *      with reason \"networkDisconnect\"\n     * - \"nodeCrashed\": a node has crashed in the server side. You can use this reason to ask your application's backend to reconnect \n     * to a new session to replace the crashed one\n     */\n    reason: string;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session, reason: string) {\n        super(true, target, 'sessionDisconnected');\n        this.reason = reason;\n    }\n\n    /**\n     * @hidden\n     */\n    callDefaultBehavior() {\n\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n\n        const session = <Session>this.target;\n\n        // Dispose and delete all remote Connections\n        session.remoteConnections.forEach(remoteConnection => {\n            const connectionId = remoteConnection.connectionId;\n            if (!!session.remoteConnections.get(connectionId)?.stream) {\n                session.remoteConnections.get(connectionId)?.stream!.disposeWebRtcPeer();\n                session.remoteConnections.get(connectionId)?.stream!.disposeMediaStream();\n                if (session.remoteConnections.get(connectionId)?.stream!.streamManager) {\n                    session.remoteConnections.get(connectionId)?.stream!.streamManager.removeAllVideos();\n                }\n                const streamId = session.remoteConnections.get(connectionId)?.stream?.streamId;\n                if (!!streamId) {\n                    session.remoteStreamsCreated.delete(streamId);\n                }\n                session.remoteConnections.get(connectionId)?.dispose();\n            }\n            session.remoteConnections.delete(connectionId);\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"script"}