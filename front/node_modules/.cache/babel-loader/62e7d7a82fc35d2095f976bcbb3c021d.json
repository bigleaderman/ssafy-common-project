{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n\nvar Publisher_1 = require(\"../../OpenVidu/Publisher\");\n\nvar Session_1 = require(\"../../OpenVidu/Session\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by:\n * - `streamCreated` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamCreated) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamCreated) objects)\n * - `streamDestroyed]` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamDestroyed) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamDestroyed) objects)\n */\n\nvar StreamEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamEvent(cancelable, target, type, stream, reason) {\n    var _this = _super.call(this, cancelable, target, type) || this;\n\n    _this.stream = stream;\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  StreamEvent.prototype.callDefaultBehavior = function () {\n    if (this.type === 'streamDestroyed') {\n      if (this.target instanceof Session_1.Session) {\n        // Remote Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n        this.stream.disposeWebRtcPeer();\n      } else if (this.target instanceof Publisher_1.Publisher) {\n        // Local Stream\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n        clearInterval(this.target.screenShareResizeInterval);\n        this.stream.isLocalStreamReadyToPublish = false; // Delete Publisher object from OpenVidu publishers array\n\n        var openviduPublishers = this.target.openvidu.publishers;\n\n        for (var i = 0; i < openviduPublishers.length; i++) {\n          if (openviduPublishers[i] === this.target) {\n            openviduPublishers.splice(i, 1);\n            break;\n          }\n        }\n      } // Dispose the MediaStream local object\n\n\n      this.stream.disposeMediaStream(); // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n      // (method Session.subscribe must have been called)\n\n      if (this.stream.streamManager) this.stream.streamManager.removeAllVideos(); // Delete stream from Session.remoteStreamsCreated map\n\n      this.stream.session.remoteStreamsCreated.delete(this.stream.streamId); // Delete StreamOptionsServer from remote Connection\n\n      var remoteConnection = this.stream.session.remoteConnections.get(this.stream.connection.connectionId);\n\n      if (!!remoteConnection && !!remoteConnection.remoteOptions) {\n        var streamOptionsServer = remoteConnection.remoteOptions.streams;\n\n        for (var i = streamOptionsServer.length - 1; i >= 0; --i) {\n          if (streamOptionsServer[i].id === this.stream.streamId) {\n            streamOptionsServer.splice(i, 1);\n          }\n        }\n      }\n    }\n  };\n\n  return StreamEvent;\n}(Event_1.Event);\n\nexports.StreamEvent = StreamEvent;","map":null,"metadata":{},"sourceType":"script"}