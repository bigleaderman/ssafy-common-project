{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n\n      if (typeof returnValue === 'string') {\n        return event.returnValue = returnValue;\n      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n\n\n      if (event.defaultPrevented) {\n        return event.returnValue = '';\n      }\n    };\n  }, [handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      return eventListenerRef.current(event);\n    };\n\n    window.addEventListener('beforeunload', eventListener);\n    return function () {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes\n/* remove-proptypes */\n= process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n} : {};\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"mappings":";;;;AAGA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;EACnC,EACEA,OAAO,IAAI,IAAXA,IAAmB,OAAOA,OAAP,KAAmB,UADxC,qDAAS,CAEP,KAFO,EAEP,qCAFO,CAAT,YAAS,CAAT,KAAS,CAAT;EAKMC,oBAAgB,GAAGC,MAAM,EAAzBD;EAENE,SAAS,CAAC,YAAM;IACdF,gBAAgB,CAACG,OAAjBH,GAA2B,UAACI,KAAD,EAAW;MAC9BC,eAAW,GAAGN,OAAH,KAAGA,eAAH,KAAGA,yBAAO,CAAGK,KAAH,CAArBC,CAD8B;MAGpC;;MACA,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;QACnC,OAAQD,KAAK,CAACC,WAAND,GAAoBC,WAA5B;MALkC;MAQpC;MACA;;;MACID,SAAK,CAACE,gBAANF,EAAwB;QAC1B,OAAQA,KAAK,CAACC,WAAND,GAAoB,EAA5B;MACD;IAZH;EADO,GAeN,CAACL,OAAD,CAfM,CAATG;EAiBAA,SAAS,CAAC,YAAM;IACd,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACH,KAAD;MAAA,OAAWJ,gBAAgB,CAACG,OAAjBH,CAAyBI,KAAzBJ,CAAX;IAAtB;;IACAQ,MAAM,CAACC,gBAAPD,CAAwB,cAAxBA,EAAwCD,aAAxCC;IACA,OAAO,YAAM;MACXA,MAAM,CAACE,mBAAPF,CAA2B,cAA3BA,EAA2CD,aAA3CC;IADF;EAHO,GAMN,EANM,CAATN;AAOD,CAhCD;;ACAA,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAAyCC,IAAzC,EAAyC;EAAA,yBAAtCC,QAAsC;EAAA,IAAtCA,QAAsC,8BAA3B,IAA2B;EAAA,IAArBC,cAAqB,QAArBA,cAAqB;EAC5DhB,eAAe,CAACgB,cAAD,CAAfhB;EACA,OAAOe,QAAP;AACD,CAHD;;AAKAF,YAAY,CAACI;AAAU;AAAvBJ,EAAgDK;EAC9CH,QAAQ,EAAEI,SAAS,CAACC,GAD0B;EAE9CJ,cAAc,EAAEG,SAAS,CAACE,IAAVF,CAAeG;AAFe,IAAhD","names":["useBeforeunload","handler","eventListenerRef","useRef","useEffect","current","event","returnValue","defaultPrevented","eventListener","window","addEventListener","removeEventListener","Beforeunload","_ref","children","onBeforeunload","propTypes","process","PropTypes","any","func","isRequired"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\react-beforeunload\\src\\useBeforeunload.js","C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\react-beforeunload\\src\\Beforeunload.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\n\nconst useBeforeunload = (handler) => {\n  invariant(\n    handler == null || typeof handler === 'function',\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      const returnValue = handler?.(event);\n      // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n      if (typeof returnValue === 'string') {\n        return (event.returnValue = returnValue);\n      }\n      // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n      if (event.defaultPrevented) {\n        return (event.returnValue = '');\n      }\n    };\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => eventListenerRef.current(event);\n    window.addEventListener('beforeunload', eventListener);\n    return () => {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes /* remove-proptypes */ = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired,\n};\n\nexport default Beforeunload;\n"]},"metadata":{},"sourceType":"module"}