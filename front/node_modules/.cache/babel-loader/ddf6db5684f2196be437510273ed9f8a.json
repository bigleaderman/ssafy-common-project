{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subscriber = void 0;\n\nvar StreamManager_1 = require(\"./StreamManager\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Packs remote media streams. Participants automatically receive them when others publish their streams. Initialized with [[Session.subscribe]] method\n *\n * See available event listeners at [[StreamManagerEventMap]].\n */\n\nvar Subscriber =\n/** @class */\nfunction (_super) {\n  __extends(Subscriber, _super);\n  /**\n   * @hidden\n   */\n\n\n  function Subscriber(stream, targEl, properties) {\n    var _this = _super.call(this, stream, targEl) || this;\n\n    _this.element = _this.targetElement;\n    _this.stream = stream;\n    _this.properties = properties;\n    return _this;\n  }\n  /**\n   * Subscribe or unsubscribe from the audio stream (if available). Calling this method twice in a row passing same value will have no effect\n   * @param value `true` to subscribe to the audio stream, `false` to unsubscribe from it\n   */\n\n\n  Subscriber.prototype.subscribeToAudio = function (value) {\n    this.stream.getMediaStream().getAudioTracks().forEach(function (track) {\n      track.enabled = value;\n    });\n    this.stream.audioActive = value;\n    logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its audio stream');\n    return this;\n  };\n  /**\n   * Subscribe or unsubscribe from the video stream (if available). Calling this method twice in a row passing same value will have no effect\n   * @param value `true` to subscribe to the video stream, `false` to unsubscribe from it\n   */\n\n\n  Subscriber.prototype.subscribeToVideo = function (value) {\n    this.stream.getMediaStream().getVideoTracks().forEach(function (track) {\n      track.enabled = value;\n    });\n    this.stream.videoActive = value;\n    logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its video stream');\n    return this;\n  };\n  /* Hidden methods */\n\n  /**\n   * @hidden\n   */\n\n\n  Subscriber.prototype.replaceTrackInMediaStream = function (track, updateLastConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mediaStream, removedTrack;\n      return __generator(this, function (_a) {\n        mediaStream = this.stream.getMediaStream();\n\n        if (track.kind === 'video') {\n          removedTrack = mediaStream.getVideoTracks()[0];\n\n          if (updateLastConstraints) {\n            this.stream.lastVideoTrackConstraints = track.getConstraints();\n          }\n        } else {\n          removedTrack = mediaStream.getAudioTracks()[0];\n        }\n\n        mediaStream.removeTrack(removedTrack);\n        removedTrack.stop();\n        mediaStream.addTrack(track);\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return Subscriber;\n}(StreamManager_1.StreamManager);\n\nexports.Subscriber = Subscriber;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;AAEA;;;;;AAGA,IAAMA,MAAM,GAAmBC,gCAAeC,WAAf,EAA/B;AAEA;;;;;;AAKA;AAAA;AAAA;EAAgCC;EAO5B;;;;;EAGA,oBAAYC,MAAZ,EAA4BC,MAA5B,EAA0DC,UAA1D,EAA0F;IAA1F,YACIC,kBAAMH,MAAN,EAAcC,MAAd,KAAqB,IADzB;;IAEIG,KAAI,CAACC,OAAL,GAAeD,KAAI,CAACE,aAApB;IACAF,KAAI,CAACJ,MAAL,GAAcA,MAAd;IACAI,KAAI,CAACF,UAAL,GAAkBA,UAAlB;;EACH;EAED;;;;;;EAIAK,kDAAiBC,KAAjB,EAA+B;IAC3B,KAAKR,MAAL,CAAYS,cAAZ,GAA6BC,cAA7B,GAA8CC,OAA9C,CAAsD,UAACC,KAAD,EAAM;MACxDA,KAAK,CAACC,OAAN,GAAgBL,KAAhB;IACH,CAFD;IAGA,KAAKR,MAAL,CAAYc,WAAZ,GAA0BN,KAA1B;IACAZ,MAAM,CAACmB,IAAP,CAAY,uBAAuBP,KAAK,GAAG,eAAH,GAAqB,mBAAjD,IAAwE,mBAApF;IACA,OAAO,IAAP;EACH,CAPD;EASA;;;;;;EAIAD,kDAAiBC,KAAjB,EAA+B;IAC3B,KAAKR,MAAL,CAAYS,cAAZ,GAA6BO,cAA7B,GAA8CL,OAA9C,CAAsD,UAACC,KAAD,EAAM;MACxDA,KAAK,CAACC,OAAN,GAAgBL,KAAhB;IACH,CAFD;IAGA,KAAKR,MAAL,CAAYiB,WAAZ,GAA0BT,KAA1B;IACAZ,MAAM,CAACmB,IAAP,CAAY,uBAAuBP,KAAK,GAAG,eAAH,GAAqB,mBAAjD,IAAwE,mBAApF;IACA,OAAO,IAAP;EACH,CAPD;EASA;;EAEA;;;;;EAGMD,iDAAN,UAAgCK,KAAhC,EAAyDM,qBAAzD,EAAuF;;;;QAC7EC,WAAW,GAAgB,KAAKnB,MAAL,CAAYS,cAAZ,EAA3B;;QAEN,IAAIG,KAAK,CAACQ,IAAN,KAAe,OAAnB,EAA4B;UACxBC,YAAY,GAAGF,WAAW,CAACH,cAAZ,GAA6B,CAA7B,CAAf;;UACA,IAAIE,qBAAJ,EAA2B;YACvB,KAAKlB,MAAL,CAAYsB,yBAAZ,GAAwCV,KAAK,CAACW,cAAN,EAAxC;UACH;QACJ,CALD,MAKO;UACHF,YAAY,GAAGF,WAAW,CAACT,cAAZ,GAA6B,CAA7B,CAAf;QACH;;QACDS,WAAW,CAACK,WAAZ,CAAwBH,YAAxB;QACAA,YAAY,CAACI,IAAb;QACAN,WAAW,CAACO,QAAZ,CAAqBd,KAArB;;;;;;EACH,CAdK;;EAgBV;AAAC,CAhED,CAAgCe,6BAAhC;;AAAaC","names":["logger","OpenViduLogger_1","getInstance","__extends","stream","targEl","properties","_super","_this","element","targetElement","Subscriber","value","getMediaStream","getAudioTracks","forEach","track","enabled","audioActive","info","getVideoTracks","videoActive","updateLastConstraints","mediaStream","kind","removedTrack","lastVideoTrackConstraints","getConstraints","removeTrack","stop","addTrack","StreamManager_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenVidu\\Subscriber.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Stream } from './Stream';\nimport { StreamManager } from './StreamManager';\nimport { SubscriberProperties } from '../OpenViduInternal/Interfaces/Public/SubscriberProperties';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * Packs remote media streams. Participants automatically receive them when others publish their streams. Initialized with [[Session.subscribe]] method\n * \n * See available event listeners at [[StreamManagerEventMap]].\n */\nexport class Subscriber extends StreamManager {\n\n    /**\n     * @hidden\n     */\n    properties: SubscriberProperties;\n\n    /**\n     * @hidden\n     */\n    constructor(stream: Stream, targEl: string | HTMLElement, properties: SubscriberProperties) {\n        super(stream, targEl);\n        this.element = this.targetElement;\n        this.stream = stream;\n        this.properties = properties;\n    }\n\n    /**\n     * Subscribe or unsubscribe from the audio stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the audio stream, `false` to unsubscribe from it\n     */\n    subscribeToAudio(value: boolean): Subscriber {\n        this.stream.getMediaStream().getAudioTracks().forEach((track) => {\n            track.enabled = value;\n        });\n        this.stream.audioActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its audio stream');\n        return this;\n    }\n\n    /**\n     * Subscribe or unsubscribe from the video stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the video stream, `false` to unsubscribe from it\n     */\n    subscribeToVideo(value: boolean): Subscriber {\n        this.stream.getMediaStream().getVideoTracks().forEach((track) => {\n            track.enabled = value;\n        });\n        this.stream.videoActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its video stream');\n        return this;\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    async replaceTrackInMediaStream(track: MediaStreamTrack, updateLastConstraints: boolean): Promise<void> {\n        const mediaStream: MediaStream = this.stream.getMediaStream();\n        let removedTrack: MediaStreamTrack;\n        if (track.kind === 'video') {\n            removedTrack = mediaStream.getVideoTracks()[0];\n            if (updateLastConstraints) {\n                this.stream.lastVideoTrackConstraints = track.getConstraints();\n            }\n        } else {\n            removedTrack = mediaStream.getAudioTracks()[0];\n        }\n        mediaStream.removeTrack(removedTrack);\n        removedTrack.stop();\n        mediaStream.addTrack(track);\n    }\n\n}"]},"metadata":{},"sourceType":"script"}