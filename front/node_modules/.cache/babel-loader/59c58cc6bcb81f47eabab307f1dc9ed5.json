{"ast":null,"code":"function pack(message, id) {\n  var result = {\n    jsonrpc: \"2.0\"\n  };\n\n  if (message.method) {\n    result.method = message.method;\n    if (message.params) result.params = message.params;\n    if (id != undefined) result.id = id;\n  } else if (id != undefined) {\n    if (message.error) {\n      if (message.result !== undefined) throw new TypeError(\"Both result and error are defined\");\n      result.error = message.error;\n    } else if (message.result !== undefined) result.result = message.result;else throw new TypeError(\"No result or error is defined\");\n\n    result.id = id;\n  }\n\n  ;\n  return JSON.stringify(result);\n}\n\n;\n\nfunction unpack(message) {\n  var result = message;\n\n  if (typeof message === 'string' || message instanceof String) {\n    result = JSON.parse(message);\n  }\n\n  var version = result.jsonrpc;\n  if (version !== '2.0') throw new TypeError(\"Invalid JsonRPC version '\" + version + \"': \" + message);\n\n  if (result.method == undefined) {\n    if (result.id == undefined) throw new TypeError(\"Invalid message: \" + message);\n    var result_defined = result.result !== undefined;\n    var error_defined = result.error !== undefined;\n    if (result_defined && error_defined) throw new TypeError(\"Both result and error are defined: \" + message);\n    if (!result_defined && !error_defined) throw new TypeError(\"No result or error is defined: \" + message);\n    result.ack = result.id;\n    delete result.id;\n  }\n\n  return result;\n}\n\n;\nexports.pack = pack;\nexports.unpack = unpack;","map":{"version":3,"mappings":"AAYA,SAASA,IAAT,CAAcC,OAAd,EAAuBC,EAAvB,EAAyB;EACvB,IAAIC,MAAM,GAAG;IACXC,OAAO,EAAE;EADE,CAAb;;EAKA,IAAIH,OAAO,CAACI,MAAZ,EAAoB;IAClBF,MAAM,CAACE,MAAP,GAAgBJ,OAAO,CAACI,MAAxB;IAEA,IAAIJ,OAAO,CAACK,MAAZ,EACEH,MAAM,CAACG,MAAP,GAAgBL,OAAO,CAACK,MAAxB;IAGF,IAAIJ,EAAE,IAAIK,SAAV,EACEJ,MAAM,CAACD,EAAP,GAAYA,EAAZ;EACH,CATD,MAYK,IAAIA,EAAE,IAAIK,SAAV,EAAqB;IACxB,IAAIN,OAAO,CAACO,KAAZ,EAAmB;MACjB,IAAIP,OAAO,CAACE,MAAR,KAAmBI,SAAvB,EACE,MAAM,IAAIE,SAAJ,CAAc,mCAAd,CAAN;MAEFN,MAAM,CAACK,KAAP,GAAeP,OAAO,CAACO,KAAvB;IACD,CALD,MAKO,IAAIP,OAAO,CAACE,MAAR,KAAmBI,SAAvB,EACLJ,MAAM,CAACA,MAAP,GAAgBF,OAAO,CAACE,MAAxB,CADK,KAGL,MAAM,IAAIM,SAAJ,CAAc,+BAAd,CAAN;;IAEFN,MAAM,CAACD,EAAP,GAAYA,EAAZ;EACD;;EAAA;EAED,OAAOQ,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAP;AACD;;AAAA;;AAWD,SAASS,MAAT,CAAgBX,OAAhB,EAAuB;EACrB,IAAIE,MAAM,GAAGF,OAAb;;EAEA,IAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYY,MAAtD,EAA8D;IAC5DV,MAAM,GAAGO,IAAI,CAACI,KAAL,CAAWb,OAAX,CAAT;EACD;;EAID,IAAIc,OAAO,GAAGZ,MAAM,CAACC,OAArB;EACA,IAAIW,OAAO,KAAK,KAAhB,EACE,MAAM,IAAIN,SAAJ,CAAc,8BAA8BM,OAA9B,GAAwC,KAAxC,GAAgDd,OAA9D,CAAN;;EAGF,IAAIE,MAAM,CAACE,MAAP,IAAiBE,SAArB,EAAgC;IAC9B,IAAIJ,MAAM,CAACD,EAAP,IAAaK,SAAjB,EACE,MAAM,IAAIE,SAAJ,CAAc,sBAAsBR,OAApC,CAAN;IAEF,IAAIe,cAAc,GAAGb,MAAM,CAACA,MAAP,KAAkBI,SAAvC;IACA,IAAIU,aAAa,GAAGd,MAAM,CAACK,KAAP,KAAiBD,SAArC;IAGA,IAAIS,cAAc,IAAIC,aAAtB,EACE,MAAM,IAAIR,SAAJ,CAAc,wCAAwCR,OAAtD,CAAN;IAEF,IAAI,CAACe,cAAD,IAAmB,CAACC,aAAxB,EACE,MAAM,IAAIR,SAAJ,CAAc,oCAAoCR,OAAlD,CAAN;IAEFE,MAAM,CAACe,GAAP,GAAaf,MAAM,CAACD,EAApB;IACA,OAAOC,MAAM,CAACD,EAAd;EACD;;EAGD,OAAOC,MAAP;AACD;;AAAA;AAGDgB,OAAO,CAACnB,IAAR,GAAeA,IAAf;AACAmB,OAAO,CAACP,MAAR,GAAiBA,MAAjB","names":["pack","message","id","result","jsonrpc","method","params","undefined","error","TypeError","JSON","stringify","unpack","String","parse","version","result_defined","error_defined","ack","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\KurentoUtils\\kurento-jsonrpc\\packers\\JsonRPC.js"],"sourcesContent":["/**\n * JsonRPC 2.0 packer\n */\n\n/**\n * Pack a JsonRPC 2.0 message\n *\n * @param {Object} message - object to be packaged. It requires to have all the\n *   fields needed by the JsonRPC 2.0 message that it's going to be generated\n *\n * @return {String} - the stringified JsonRPC 2.0 message\n */\nfunction pack(message, id) {\n  var result = {\n    jsonrpc: \"2.0\"\n  };\n\n  // Request\n  if (message.method) {\n    result.method = message.method;\n\n    if (message.params)\n      result.params = message.params;\n\n    // Request is a notification\n    if (id != undefined)\n      result.id = id;\n  }\n\n  // Response\n  else if (id != undefined) {\n    if (message.error) {\n      if (message.result !== undefined)\n        throw new TypeError(\"Both result and error are defined\");\n\n      result.error = message.error;\n    } else if (message.result !== undefined)\n      result.result = message.result;\n    else\n      throw new TypeError(\"No result or error is defined\");\n\n    result.id = id;\n  };\n\n  return JSON.stringify(result);\n};\n\n/**\n * Unpack a JsonRPC 2.0 message\n *\n * @param {String} message - string with the content of the JsonRPC 2.0 message\n *\n * @throws {TypeError} - Invalid JsonRPC version\n *\n * @return {Object} - object filled with the JsonRPC 2.0 message content\n */\nfunction unpack(message) {\n  var result = message;\n\n  if (typeof message === 'string' || message instanceof String) {\n    result = JSON.parse(message);\n  }\n\n  // Check if it's a valid message\n\n  var version = result.jsonrpc;\n  if (version !== '2.0')\n    throw new TypeError(\"Invalid JsonRPC version '\" + version + \"': \" + message);\n\n  // Response\n  if (result.method == undefined) {\n    if (result.id == undefined)\n      throw new TypeError(\"Invalid message: \" + message);\n\n    var result_defined = result.result !== undefined;\n    var error_defined = result.error !== undefined;\n\n    // Check only result or error is defined, not both or none\n    if (result_defined && error_defined)\n      throw new TypeError(\"Both result and error are defined: \" + message);\n\n    if (!result_defined && !error_defined)\n      throw new TypeError(\"No result or error is defined: \" + message);\n\n    result.ack = result.id;\n    delete result.id;\n  }\n\n  // Return unpacked message\n  return result;\n};\n\n\nexports.pack = pack;\nexports.unpack = unpack;"]},"metadata":{},"sourceType":"script"}