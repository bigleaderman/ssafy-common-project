{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RecordingEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Triggered by:\n * - [[recordingStarted]]\n * - [[recordingStopped]]\n */\n\n\nvar RecordingEvent =\n/** @class */\nfunction (_super) {\n  __extends(RecordingEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function RecordingEvent(target, type, id, name, reason) {\n    var _this = _super.call(this, false, target, type) || this;\n\n    _this.id = id;\n\n    if (name !== id) {\n      _this.name = name;\n    }\n\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  RecordingEvent.prototype.callDefaultBehavior = function () {};\n\n  return RecordingEvent;\n}(Event_1.Event);\n\nexports.RecordingEvent = RecordingEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAIA;;;;;;;AAKA;AAAA;AAAA;EAAoCA;EA4BhC;;;;;EAGA,wBAAYC,MAAZ,EAA6BC,IAA7B,EAA2CC,EAA3C,EAAuDC,IAAvD,EAAqEC,MAArE,EAAoF;IAApF,YACIC,kBAAM,KAAN,EAAaL,MAAb,EAAqBC,IAArB,KAA0B,IAD9B;;IAEIK,KAAI,CAACJ,EAAL,GAAUA,EAAV;;IACA,IAAIC,IAAI,KAAKD,EAAb,EAAiB;MACbI,KAAI,CAACH,IAAL,GAAYA,IAAZ;IACH;;IACDG,KAAI,CAACF,MAAL,GAAcA,MAAd;;EACH;EAED;;;EAGA;;;EACAG,4DAAyB,CAAzB;;EAEJ;AAAC,CA9CD,CAAoCC,aAApC;;AAAaC","names":["__extends","target","type","id","name","reason","_super","_this","RecordingEvent","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\RecordingEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Session } from '../../OpenVidu/Session';\n\n\n/**\n * Triggered by:\n * - [[recordingStarted]]\n * - [[recordingStopped]]\n */\nexport class RecordingEvent extends Event {\n\n    /**\n     * The recording ID generated in openvidu-server\n     */\n    id: string;\n\n    /**\n     * The recording name you supplied to openvidu-server. For example, to name your recording file MY_RECORDING:\n     * - With **API REST**: POST to `/api/recordings/start` passing JSON body `{\"session\":\"sessionId\",\"name\":\"MY_RECORDING\"}`\n     * - With **openvidu-java-client**: `OpenVidu.startRecording(sessionId, \"MY_RECORDING\")` or `OpenVidu.startRecording(sessionId, new RecordingProperties.Builder().name(\"MY_RECORDING\").build())`\n     * - With **openvidu-node-client**: `OpenVidu.startRecording(sessionId, \"MY_RECORDING\")` or `OpenVidu.startRecording(sessionId, {name: \"MY_RECORDING\"})`\n     *\n     * If no name is supplied, this property will be undefined and the recorded file will be named after property [[id]]\n     */\n    name?: string;\n\n    /**\n     * For 'recordingStopped' event:\n     * - \"recordingStoppedByServer\": the recording has been gracefully stopped by the application\n     * - \"sessionClosedByServer\": the Session has been closed by the application\n     * - \"automaticStop\": see [Automatic stop of recordings](/en/stable/advanced-features/recording/#automatic-stop-of-recordings)\n     * - \"nodeCrashed\": a node has crashed in the server side\n     *\n     * For 'recordingStarted' empty string\n     */\n    reason?: string;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session, type: string, id: string, name: string, reason?: string) {\n        super(false, target, type);\n        this.id = id;\n        if (name !== id) {\n            this.name = name;\n        }\n        this.reason = reason;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n\n}"]},"metadata":{},"sourceType":"script"}