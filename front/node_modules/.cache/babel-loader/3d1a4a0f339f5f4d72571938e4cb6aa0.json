{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Filter = void 0;\n\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\n\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See [[Stream.applyFilter]]\n */\n\nvar Filter =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function Filter(type, options) {\n    /**\n     * @hidden\n     */\n    this.handlers = new Map();\n    this.type = type;\n    this.options = options;\n  }\n  /**\n   * Executes a filter method. Available methods are specific for each filter\n   *\n   * @param method Name of the method\n   * @param params Parameters of the method\n   */\n\n\n  Filter.prototype.execMethod = function (method, params) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var _a;\n\n      logger.info('Executing filter method to stream ' + _this.stream.streamId);\n      var finalParams;\n\n      var successExecMethod = function successExecMethod(triggerEvent) {\n        logger.info('Filter method successfully executed on Stream ' + _this.stream.streamId);\n        var oldValue = Object.assign({}, _this.stream.filter);\n        _this.stream.filter.lastExecMethod = {\n          method: method,\n          params: finalParams\n        };\n\n        if (triggerEvent) {\n          _this.stream.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.session, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n\n          _this.stream.streamManager.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.streamManager, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n        }\n\n        return resolve();\n      };\n\n      if (_this.type.startsWith('VB:')) {\n        if (typeof params === 'string') {\n          try {\n            params = JSON.parse(params);\n          } catch (error) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Wrong params syntax: ' + error));\n          }\n        }\n\n        finalParams = params;\n\n        if (method === 'update') {\n          if (!((_a = _this.stream.virtualBackgroundSinkElements) === null || _a === void 0 ? void 0 : _a.VB)) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'There is no Virtual Background filter applied'));\n          } else {\n            _this.stream.virtualBackgroundSinkElements.VB.updateValues(params).then(function () {\n              return successExecMethod(false);\n            }).catch(function (error) {\n              if (error.name === OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR) {\n                return reject(new OpenViduError_1.OpenViduError(error.name, error.message));\n              } else {\n                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Error updating values on Virtual Background filter: ' + error));\n              }\n            });\n          }\n        } else {\n          return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, \"Unknown Virtual Background method \\\"\".concat(method, \"\\\"\")));\n        }\n      } else {\n        var stringParams = void 0;\n\n        if (typeof params !== 'string') {\n          try {\n            stringParams = JSON.stringify(params);\n          } catch (error) {\n            var errorMsg = \"'params' property must be a JSON formatted object\";\n            logger.error(errorMsg);\n            return reject(errorMsg);\n          }\n        } else {\n          stringParams = params;\n        }\n\n        finalParams = stringParams;\n\n        _this.stream.session.openvidu.sendRequest('execFilterMethod', {\n          streamId: _this.stream.streamId,\n          method: method,\n          params: stringParams\n        }, function (error, response) {\n          if (error) {\n            logger.error('Error executing filter method for Stream ' + _this.stream.streamId, error);\n\n            if (error.code === 401) {\n              return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n            } else {\n              return reject(error);\n            }\n          } else {\n            return successExecMethod(true);\n          }\n        });\n      }\n    });\n  };\n  /**\n   * Subscribe to certain filter event. Available events are specific for each filter\n   *\n   * @param eventType Event to which subscribe to.\n   * @param handler Function to execute upon event dispatched. It receives as parameter a [[FilterEvent]] object\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n   */\n\n\n  Filter.prototype.addEventListener = function (eventType, handler) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('addFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            return reject(error);\n          }\n        } else {\n          _this.handlers.set(eventType, handler);\n\n          logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + _this.stream.streamId);\n          return resolve();\n        }\n      });\n    });\n  };\n  /**\n   * Removes certain filter event listener previously set.\n   *\n   * @param eventType Event to unsubscribe from.\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n   */\n\n\n  Filter.prototype.removeEventListener = function (eventType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('removeFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            return reject(error);\n          }\n        } else {\n          _this.handlers.delete(eventType);\n\n          logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + _this.stream.streamId);\n          return resolve();\n        }\n      });\n    });\n  };\n\n  return Filter;\n}();\n\nexports.Filter = Filter;","map":null,"metadata":{},"sourceType":"script"}