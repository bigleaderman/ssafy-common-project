{"ast":null,"code":"/**\n  # normalice\n\n  Normalize an ice server configuration object (or plain old string) into a format\n  that is usable in all browsers supporting WebRTC.  Primarily this module is designed\n  to help with the transition of the `url` attribute of the configuration object to\n  the `urls` attribute.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\nvar protocols = ['stun:', 'turn:'];\n\nmodule.exports = function (input) {\n  var url = (input || {}).url || input;\n  var protocol;\n  var parts;\n  var output = {}; // if we don't have a string url, then allow the input to passthrough\n\n  if (typeof url != 'string' && !(url instanceof String)) {\n    return input;\n  } // trim the url string, and convert to an array\n\n\n  url = url.trim(); // if the protocol is not known, then passthrough\n\n  protocol = protocols[protocols.indexOf(url.slice(0, 5))];\n\n  if (!protocol) {\n    return input;\n  } // now let's attack the remaining url parts\n\n\n  url = url.slice(5);\n  parts = url.split('@');\n  output.username = input.username;\n  output.credential = input.credential; // if we have an authentication part, then set the credentials\n\n  if (parts.length > 1) {\n    url = parts[1];\n    parts = parts[0].split(':'); // add the output credential and username\n\n    output.username = parts[0];\n    output.credential = (input || {}).credential || parts[1] || '';\n  }\n\n  output.url = protocol + url;\n  output.urls = [output.url];\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}