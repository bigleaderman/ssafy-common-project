{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamManager = void 0;\n\nvar EventDispatcher_1 = require(\"./EventDispatcher\");\n\nvar StreamManagerEvent_1 = require(\"../OpenViduInternal/Events/StreamManagerEvent\");\n\nvar VideoElementEvent_1 = require(\"../OpenViduInternal/Events/VideoElementEvent\");\n\nvar ExceptionEvent_1 = require(\"../OpenViduInternal/Events/ExceptionEvent\");\n\nvar VideoInsertMode_1 = require(\"../OpenViduInternal/Enums/VideoInsertMode\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n\nvar Platform_1 = require(\"../OpenViduInternal/Utils/Platform\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\n\nvar platform;\n/**\n * Interface in charge of displaying the media streams in the HTML DOM. This wraps any [[Publisher]] and [[Subscriber]] object.\n * You can insert as many video players fo the same Stream as you want by calling [[StreamManager.addVideoElement]] or\n * [[StreamManager.createVideoElement]].\n * The use of StreamManager wrapper is particularly useful when you don't need to differentiate between Publisher or Subscriber streams or just\n * want to directly manage your own video elements (even more than one video element per Stream). This scenario is pretty common in\n * declarative, MVC frontend frameworks such as Angular, React or Vue.js\n *\n * See available event listeners at [[StreamManagerEventMap]].\n */\n\nvar StreamManager =\n/** @class */\nfunction (_super) {\n  __extends(StreamManager, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamManager(stream, targetElement) {\n    var _this = _super.call(this) || this;\n    /**\n     * All the videos displaying the Stream of this Publisher/Subscriber\n     */\n\n\n    _this.videos = [];\n    /**\n     * @hidden\n     */\n\n    _this.lazyLaunchVideoElementCreatedEvent = false;\n    platform = Platform_1.PlatformUtils.getInstance();\n    _this.stream = stream;\n    _this.stream.streamManager = _this;\n    _this.remote = !_this.stream.isLocal();\n\n    if (!!targetElement) {\n      var targEl = void 0;\n\n      if (typeof targetElement === 'string') {\n        targEl = document.getElementById(targetElement);\n      } else if (targetElement instanceof HTMLElement) {\n        targEl = targetElement;\n      }\n\n      if (!!targEl) {\n        _this.firstVideoElement = {\n          targetElement: targEl,\n          video: document.createElement('video'),\n          id: '',\n          canplayListenerAdded: false\n        };\n\n        if (platform.isSafariBrowser() || platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser())) {\n          _this.firstVideoElement.video.setAttribute('playsinline', 'true');\n        }\n\n        _this.targetElement = targEl;\n        _this.element = targEl;\n      }\n    }\n\n    _this.canPlayListener = function () {\n      _this.deactivateStreamPlayingEventExceptionTimeout();\n\n      _this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(_this, 'streamPlaying', undefined)]);\n    };\n\n    return _this;\n  }\n  /**\n   * See [[EventDispatcher.on]]\n   */\n\n\n  StreamManager.prototype.on = function (type, handler) {\n    _super.prototype.onAux.call(this, type, \"Event '\" + type + \"' triggered by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n    if (type === 'videoElementCreated') {\n      if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n        this.lazyLaunchVideoElementCreatedEvent = false;\n      }\n    }\n\n    if (type === 'streamPlaying') {\n      if (this.videos[0] && this.videos[0].video && this.videos[0].video.currentTime > 0 && this.videos[0].video.paused === false && this.videos[0].video.ended === false && this.videos[0].video.readyState === 4) {\n        this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n      }\n    }\n\n    if (this.stream.hasAudio) {\n      if (type === 'publisherStartSpeaking') {\n        this.stream.enableHarkSpeakingEvent();\n      }\n\n      if (type === 'publisherStopSpeaking') {\n        this.stream.enableHarkStoppedSpeakingEvent();\n      }\n\n      if (type === 'streamAudioVolumeChange') {\n        this.stream.enableHarkVolumeChangeEvent(false);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * See [[EventDispatcher.once]]\n   */\n\n\n  StreamManager.prototype.once = function (type, handler) {\n    _super.prototype.onceAux.call(this, type, \"Event '\" + type + \"' triggered once by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n    if (type === 'videoElementCreated') {\n      if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n      }\n    }\n\n    if (type === 'streamPlaying') {\n      if (this.videos[0] && this.videos[0].video && this.videos[0].video.currentTime > 0 && this.videos[0].video.paused === false && this.videos[0].video.ended === false && this.videos[0].video.readyState === 4) {\n        this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n      }\n    }\n\n    if (this.stream.hasAudio) {\n      if (type === 'publisherStartSpeaking') {\n        this.stream.enableOnceHarkSpeakingEvent();\n      }\n\n      if (type === 'publisherStopSpeaking') {\n        this.stream.enableOnceHarkStoppedSpeakingEvent();\n      }\n\n      if (type === 'streamAudioVolumeChange') {\n        this.stream.enableOnceHarkVolumeChangeEvent(false);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * See [[EventDispatcher.off]]\n   */\n\n\n  StreamManager.prototype.off = function (type, handler) {\n    _super.prototype.offAux.call(this, type, handler);\n\n    if (type === 'publisherStartSpeaking') {\n      // Both StreamManager and Session can have \"publisherStartSpeaking\" event listeners\n      var remainingStartSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n\n      if (remainingStartSpeakingEventListeners === 0) {\n        this.stream.disableHarkSpeakingEvent(false);\n      }\n    }\n\n    if (type === 'publisherStopSpeaking') {\n      // Both StreamManager and Session can have \"publisherStopSpeaking\" event listeners\n      var remainingStopSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n\n      if (remainingStopSpeakingEventListeners === 0) {\n        this.stream.disableHarkStoppedSpeakingEvent(false);\n      }\n    }\n\n    if (type === 'streamAudioVolumeChange') {\n      // Only StreamManager can have \"streamAudioVolumeChange\" event listeners\n      var remainingVolumeEventListeners = this.ee.getListeners(type).length;\n\n      if (remainingVolumeEventListeners === 0) {\n        this.stream.disableHarkVolumeChangeEvent(false);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Makes `video` element parameter display this [[stream]]. This is useful when you are\n   * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)\n   *\n   * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be\n   * disassociated from that previous Publisher/Subscriber and to be associated to this one.\n   *\n   * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.\n   * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other\n   * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.\n   */\n\n\n  StreamManager.prototype.addVideoElement = function (video) {\n    this.initializeVideoProperties(video);\n\n    if (!this.remote && this.stream.displayMyRemote()) {\n      if (video.srcObject !== this.stream.getMediaStream()) {\n        video.srcObject = this.stream.getMediaStream();\n      }\n    } // If the video element is already part of this StreamManager do nothing\n\n\n    for (var _i = 0, _a = this.videos; _i < _a.length; _i++) {\n      var v = _a[_i];\n\n      if (v.video === video) {\n        return 0;\n      }\n    }\n\n    var returnNumber = 1;\n\n    for (var _b = 0, _c = this.stream.session.streamManagers; _b < _c.length; _b++) {\n      var streamManager = _c[_b];\n\n      if (streamManager.disassociateVideo(video)) {\n        returnNumber = -1;\n        break;\n      }\n    }\n\n    this.stream.session.streamManagers.forEach(function (streamManager) {\n      streamManager.disassociateVideo(video);\n    });\n    this.pushNewStreamManagerVideo({\n      video: video,\n      id: video.id,\n      canplayListenerAdded: false\n    });\n    logger.info('New video element associated to ', this);\n    return returnNumber;\n  };\n  /**\n   * Creates a new video element displaying this [[stream]]. This allows you to have multiple video elements displaying the same media stream.\n   *\n   * #### Events dispatched\n   *\n   * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See [[VideoElementEvent]]\n   *\n   * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted\n   * @param insertMode How the video element will be inserted accordingly to `targetElemet`\n   *\n   * @returns The created HTMLVideoElement\n   */\n\n\n  StreamManager.prototype.createVideoElement = function (targetElement, insertMode) {\n    var targEl;\n\n    if (typeof targetElement === 'string') {\n      targEl = document.getElementById(targetElement);\n\n      if (!targEl) {\n        throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n      }\n    } else if (targetElement instanceof HTMLElement) {\n      targEl = targetElement;\n    } else {\n      throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n    }\n\n    var video = this.createVideo();\n    this.initializeVideoProperties(video);\n    var insMode = !!insertMode ? insertMode : VideoInsertMode_1.VideoInsertMode.APPEND;\n\n    switch (insMode) {\n      case VideoInsertMode_1.VideoInsertMode.AFTER:\n        targEl.parentNode.insertBefore(video, targEl.nextSibling);\n        break;\n\n      case VideoInsertMode_1.VideoInsertMode.APPEND:\n        targEl.appendChild(video);\n        break;\n\n      case VideoInsertMode_1.VideoInsertMode.BEFORE:\n        targEl.parentNode.insertBefore(video, targEl);\n        break;\n\n      case VideoInsertMode_1.VideoInsertMode.PREPEND:\n        targEl.insertBefore(video, targEl.childNodes[0]);\n        break;\n\n      case VideoInsertMode_1.VideoInsertMode.REPLACE:\n        targEl.parentNode.replaceChild(video, targEl);\n        break;\n\n      default:\n        insMode = VideoInsertMode_1.VideoInsertMode.APPEND;\n        targEl.appendChild(video);\n        break;\n    }\n\n    var v = {\n      targetElement: targEl,\n      video: video,\n      insertMode: insMode,\n      id: video.id,\n      canplayListenerAdded: false\n    };\n    this.pushNewStreamManagerVideo(v);\n    this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(v.video, this, 'videoElementCreated')]);\n    this.lazyLaunchVideoElementCreatedEvent = !!this.firstVideoElement;\n    return video;\n  };\n  /**\n   * Updates the current configuration for the [[PublisherSpeakingEvent]] feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser/classes/StreamManagerEvent.html) feature for this specific\n   * StreamManager audio stream, overriding the global options set with [[OpenVidu.setAdvancedConfiguration]]. This way you can customize the audio events options\n   * for each specific StreamManager and change them dynamically.\n   *\n   * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:\n   * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)\n   * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)\n   */\n\n\n  StreamManager.prototype.updatePublisherSpeakingEventsOptions = function (publisherSpeakingEventsOptions) {\n    var currentHarkOptions = !!this.stream.harkOptions ? this.stream.harkOptions : this.stream.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {};\n    var newInterval = typeof publisherSpeakingEventsOptions.interval === 'number' ? publisherSpeakingEventsOptions.interval : typeof currentHarkOptions.interval === 'number' ? currentHarkOptions.interval : 100;\n    var newThreshold = typeof publisherSpeakingEventsOptions.threshold === 'number' ? publisherSpeakingEventsOptions.threshold : typeof currentHarkOptions.threshold === 'number' ? currentHarkOptions.threshold : -50;\n    this.stream.harkOptions = {\n      interval: newInterval,\n      threshold: newThreshold\n    };\n\n    if (!!this.stream.speechEvent) {\n      this.stream.speechEvent.setInterval(newInterval);\n      this.stream.speechEvent.setThreshold(newThreshold);\n    }\n  };\n  /* Hidden methods */\n\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.initializeVideoProperties = function (video) {\n    if (!(!this.remote && this.stream.displayMyRemote())) {\n      // Avoid setting the MediaStream into the srcObject if remote subscription before publishing\n      if (video.srcObject !== this.stream.getMediaStream()) {\n        // If srcObject already set don't do it again\n        video.srcObject = this.stream.getMediaStream();\n      }\n    }\n\n    video.autoplay = true;\n    video.controls = false;\n\n    if (platform.isSafariBrowser() || platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser())) {\n      video.setAttribute('playsinline', 'true');\n    }\n\n    if (!video.id) {\n      video.id = (this.remote ? 'remote-' : 'local-') + 'video-' + this.stream.streamId; // DEPRECATED property: assign once the property id if the user provided a valid targetElement\n\n      if (!this.id && !!this.targetElement) {\n        this.id = video.id;\n      }\n    }\n\n    if (this.remote && this.isMirroredVideo(video)) {\n      // Subscriber video associated to a previously mirrored video element\n      this.removeMirrorVideo(video);\n    } else if (!this.remote && !this.stream.displayMyRemote()) {\n      // Publisher video\n      video.muted = true;\n\n      if (this.isMirroredVideo(video) && !this.stream.outboundStreamOpts.publisherProperties.mirror) {\n        // If the video was already rotated and now is set to not mirror\n        this.removeMirrorVideo(video);\n      } else if (this.stream.outboundStreamOpts.publisherProperties.mirror && !this.stream.isSendScreen()) {\n        // If the video is now set to mirror and is not screen share\n        this.mirrorVideo(video);\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.removeAllVideos = function () {\n    var _this = this;\n\n    for (var i = this.stream.session.streamManagers.length - 1; i >= 0; --i) {\n      if (this.stream.session.streamManagers[i] === this) {\n        this.stream.session.streamManagers.splice(i, 1);\n      }\n    }\n\n    this.videos.forEach(function (streamManagerVideo) {\n      // Remove oncanplay event listener (only OpenVidu browser listener, not the user ones)\n      if (!!streamManagerVideo.video && !!streamManagerVideo.video.removeEventListener) {\n        streamManagerVideo.video.removeEventListener('canplay', _this.canPlayListener);\n      }\n\n      streamManagerVideo.canplayListenerAdded = false;\n\n      if (!!streamManagerVideo.targetElement) {\n        // Only remove from DOM videos created by OpenVidu Browser (those generated by passing a valid targetElement in OpenVidu.initPublisher\n        // and Session.subscribe or those created by StreamManager.createVideoElement). All this videos triggered a videoElementCreated event\n        streamManagerVideo.video.parentNode.removeChild(streamManagerVideo.video);\n\n        _this.ee.emitEvent('videoElementDestroyed', [new VideoElementEvent_1.VideoElementEvent(streamManagerVideo.video, _this, 'videoElementDestroyed')]);\n      } // Remove srcObject from the video\n\n\n      _this.removeSrcObject(streamManagerVideo); // Remove from collection of videos every video managed by OpenVidu Browser\n\n\n      _this.videos.filter(function (v) {\n        return !v.targetElement;\n      });\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.disassociateVideo = function (video) {\n    var disassociated = false;\n\n    for (var i = 0; i < this.videos.length; i++) {\n      if (this.videos[i].video === video) {\n        this.videos[i].video.removeEventListener('canplay', this.canPlayListener);\n        this.videos.splice(i, 1);\n        disassociated = true;\n        logger.info('Video element disassociated from ', this);\n        break;\n      }\n    }\n\n    return disassociated;\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.addPlayEventToFirstVideo = function () {\n    if (!!this.videos[0] && !!this.videos[0].video && !this.videos[0].canplayListenerAdded) {\n      this.activateStreamPlayingEventExceptionTimeout();\n      this.videos[0].video.addEventListener('canplay', this.canPlayListener);\n      this.videos[0].canplayListenerAdded = true;\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.updateMediaStream = function (mediaStream) {\n    this.videos.forEach(function (streamManagerVideo) {\n      streamManagerVideo.video.srcObject = mediaStream;\n\n      if (platform.isIonicIos()) {\n        // iOS Ionic. LIMITATION: must reinsert the video in the DOM for\n        // the media stream to be updated\n        var vParent = streamManagerVideo.video.parentElement;\n        var newVideo = streamManagerVideo.video;\n        vParent.replaceChild(newVideo, streamManagerVideo.video);\n        streamManagerVideo.video = newVideo;\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.emitEvent = function (type, eventArray) {\n    this.ee.emitEvent(type, eventArray);\n  };\n  /**\n  * @hidden\n  */\n\n\n  StreamManager.prototype.createVideo = function () {\n    return document.createElement('video');\n  };\n  /**\n   * @hidden\n   */\n\n\n  StreamManager.prototype.removeSrcObject = function (streamManagerVideo) {\n    streamManagerVideo.video.srcObject = null;\n    this.deactivateStreamPlayingEventExceptionTimeout();\n  };\n  /* Private methods */\n\n\n  StreamManager.prototype.pushNewStreamManagerVideo = function (streamManagerVideo) {\n    this.videos.push(streamManagerVideo);\n    this.addPlayEventToFirstVideo();\n\n    if (this.stream.session.streamManagers.indexOf(this) === -1) {\n      this.stream.session.streamManagers.push(this);\n    }\n  };\n\n  StreamManager.prototype.mirrorVideo = function (video) {\n    if (!platform.isIonicIos()) {\n      video.style.transform = 'rotateY(180deg)';\n      video.style.webkitTransform = 'rotateY(180deg)';\n    }\n  };\n\n  StreamManager.prototype.removeMirrorVideo = function (video) {\n    video.style.transform = 'unset';\n    video.style.webkitTransform = 'unset';\n  };\n\n  StreamManager.prototype.isMirroredVideo = function (video) {\n    return video.style.transform === 'rotateY(180deg)' || video.style.webkitTransform === 'rotateY(180deg)';\n  };\n\n  StreamManager.prototype.activateStreamPlayingEventExceptionTimeout = function () {\n    var _this = this;\n\n    if (!this.remote) {\n      // ExceptionEvent NO_STREAM_PLAYING_EVENT is only for subscribers\n      return;\n    }\n\n    if (this.streamPlayingEventExceptionTimeout != null) {\n      // The timeout is already activated\n      return;\n    } // Trigger ExceptionEvent NO_STREAM_PLAYING_EVENT if after timeout there is no 'canplay' event\n\n\n    var msTimeout = this.stream.session.openvidu.advancedConfiguration.noStreamPlayingEventExceptionTimeout || 4000;\n    this.streamPlayingEventExceptionTimeout = setTimeout(function () {\n      var msg = 'StreamManager of Stream ' + _this.stream.streamId + ' (' + (_this.remote ? 'Subscriber' : 'Publisher') + ') did not trigger \"streamPlaying\" event in ' + msTimeout + ' ms';\n      logger.warn(msg);\n\n      _this.stream.session.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(_this.stream.session, ExceptionEvent_1.ExceptionEventName.NO_STREAM_PLAYING_EVENT, _this, msg)]);\n\n      delete _this.streamPlayingEventExceptionTimeout;\n    }, msTimeout);\n  };\n\n  StreamManager.prototype.deactivateStreamPlayingEventExceptionTimeout = function () {\n    clearTimeout(this.streamPlayingEventExceptionTimeout);\n    delete this.streamPlayingEventExceptionTimeout;\n  };\n\n  return StreamManager;\n}(EventDispatcher_1.EventDispatcher);\n\nexports.StreamManager = StreamManager;","map":{"version":3,"mappings":"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","names":["logger","OpenViduLogger_1","getInstance","platform","__extends","stream","targetElement","_super","_this","Platform_1","streamManager","remote","isLocal","targEl","document","getElementById","HTMLElement","firstVideoElement","video","createElement","id","canplayListenerAdded","isSafariBrowser","isIPhoneOrIPad","isChromeMobileBrowser","isEdgeMobileBrowser","isOperaMobileBrowser","isFirefoxMobileBrowser","setAttribute","element","canPlayListener","deactivateStreamPlayingEventExceptionTimeout","ee","emitEvent","StreamManagerEvent_1","undefined","StreamManager","type","handler","onAux","call","lazyLaunchVideoElementCreatedEvent","VideoElementEvent_1","videos","currentTime","paused","ended","readyState","hasAudio","enableHarkSpeakingEvent","enableHarkStoppedSpeakingEvent","enableHarkVolumeChangeEvent","onceAux","enableOnceHarkSpeakingEvent","enableOnceHarkStoppedSpeakingEvent","enableOnceHarkVolumeChangeEvent","offAux","remainingStartSpeakingEventListeners","getListeners","length","session","disableHarkSpeakingEvent","remainingStopSpeakingEventListeners","disableHarkStoppedSpeakingEvent","remainingVolumeEventListeners","disableHarkVolumeChangeEvent","initializeVideoProperties","displayMyRemote","srcObject","getMediaStream","_i","v","returnNumber","streamManagers","_b","disassociateVideo","forEach","pushNewStreamManagerVideo","info","insertMode","Error","createVideo","insMode","VideoInsertMode_1","APPEND","AFTER","parentNode","insertBefore","nextSibling","appendChild","BEFORE","PREPEND","childNodes","REPLACE","replaceChild","publisherSpeakingEventsOptions","currentHarkOptions","harkOptions","openvidu","advancedConfiguration","newInterval","interval","newThreshold","threshold","speechEvent","setInterval","setThreshold","autoplay","controls","streamId","isMirroredVideo","removeMirrorVideo","muted","outboundStreamOpts","publisherProperties","mirror","isSendScreen","mirrorVideo","i","splice","streamManagerVideo","removeEventListener","removeChild","removeSrcObject","filter","disassociated","activateStreamPlayingEventExceptionTimeout","addEventListener","mediaStream","isIonicIos","vParent","parentElement","newVideo","eventArray","push","addPlayEventToFirstVideo","indexOf","style","transform","webkitTransform","streamPlayingEventExceptionTimeout","msTimeout","noStreamPlayingEventExceptionTimeout","setTimeout","msg","warn","ExceptionEvent_1","NO_STREAM_PLAYING_EVENT","clearTimeout","EventDispatcher_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenVidu\\StreamManager.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Stream } from './Stream';\nimport { Subscriber } from './Subscriber';\nimport { EventDispatcher } from './EventDispatcher';\nimport { StreamManagerVideo } from '../OpenViduInternal/Interfaces/Public/StreamManagerVideo';\nimport { StreamManagerEventMap } from '../OpenViduInternal/Events/EventMap/StreamManagerEventMap';\nimport { StreamManagerEvent } from '../OpenViduInternal/Events/StreamManagerEvent';\nimport { VideoElementEvent } from '../OpenViduInternal/Events/VideoElementEvent';\nimport { ExceptionEvent, ExceptionEventName } from '../OpenViduInternal/Events/ExceptionEvent';\nimport { VideoInsertMode } from '../OpenViduInternal/Enums/VideoInsertMode';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\nimport { PlatformUtils } from '../OpenViduInternal/Utils/Platform';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * @hidden\n */\nlet platform: PlatformUtils;\n\n/**\n * Interface in charge of displaying the media streams in the HTML DOM. This wraps any [[Publisher]] and [[Subscriber]] object.\n * You can insert as many video players fo the same Stream as you want by calling [[StreamManager.addVideoElement]] or\n * [[StreamManager.createVideoElement]].\n * The use of StreamManager wrapper is particularly useful when you don't need to differentiate between Publisher or Subscriber streams or just\n * want to directly manage your own video elements (even more than one video element per Stream). This scenario is pretty common in\n * declarative, MVC frontend frameworks such as Angular, React or Vue.js\n *\n * See available event listeners at [[StreamManagerEventMap]].\n */\nexport abstract class StreamManager extends EventDispatcher {\n\n    /**\n     * The Stream represented in the DOM by the Publisher/Subscriber\n     */\n    stream: Stream;\n\n    /**\n     * All the videos displaying the Stream of this Publisher/Subscriber\n     */\n    videos: StreamManagerVideo[] = [];\n\n    /**\n     * Whether the Stream represented in the DOM is local or remote\n     * - `false` for [[Publisher]]\n     * - `true` for [[Subscriber]]\n     */\n    remote: boolean;\n\n    /**\n     * The DOM HTMLElement assigned as target element when creating the video for the Publisher/Subscriber. This property is only defined if:\n     * - [[Publisher]] has been initialized by calling method [[OpenVidu.initPublisher]] with a valid `targetElement` parameter\n     * - [[Subscriber]] has been initialized by calling method [[Session.subscribe]] with a valid `targetElement` parameter\n     */\n    targetElement: HTMLElement;\n\n    /**\n     * `id` attribute of the DOM video element displaying the Publisher/Subscriber's stream. This property is only defined if:\n     * - [[Publisher]] has been initialized by calling method [[OpenVidu.initPublisher]] with a valid `targetElement` parameter\n     * - [[Subscriber]] has been initialized by calling method [[Session.subscribe]] with a valid `targetElement` parameter\n     */\n    id: string;\n\n    /**\n     * @hidden\n     */\n    protected firstVideoElement?: StreamManagerVideo;\n    /**\n     * @hidden\n     */\n    protected element: HTMLElement;\n    /**\n     * @hidden\n     */\n    protected canPlayListener: EventListener;\n    /**\n     * @hidden\n     */\n    private streamPlayingEventExceptionTimeout?: NodeJS.Timeout;\n    /**\n     * @hidden\n     */\n    private lazyLaunchVideoElementCreatedEvent = false;\n\n    /**\n     * @hidden\n     */\n    constructor(stream: Stream, targetElement?: HTMLElement | string) {\n        super();\n        platform = PlatformUtils.getInstance();\n        this.stream = stream;\n        this.stream.streamManager = this;\n        this.remote = !this.stream.isLocal();\n\n        if (!!targetElement) {\n            let targEl;\n            if (typeof targetElement === 'string') {\n                targEl = document.getElementById(targetElement);\n            } else if (targetElement instanceof HTMLElement) {\n                targEl = targetElement;\n            }\n\n            if (!!targEl) {\n                this.firstVideoElement = {\n                    targetElement: targEl,\n                    video: document.createElement('video'),\n                    id: '',\n                    canplayListenerAdded: false\n                };\n                if (platform.isSafariBrowser() || (platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser()))) {\n                    this.firstVideoElement.video.setAttribute('playsinline', 'true');\n                }\n                this.targetElement = targEl;\n                this.element = targEl;\n            }\n        }\n\n        this.canPlayListener = () => {\n            this.deactivateStreamPlayingEventExceptionTimeout();\n            this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n        };\n    }\n\n    /**\n     * See [[EventDispatcher.on]]\n     */\n    on<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this {\n\n        super.onAux(type, \"Event '\" + type + \"' triggered by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n                this.lazyLaunchVideoElementCreatedEvent = false;\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (this.videos[0] && this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * See [[EventDispatcher.once]]\n     */\n    once<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this {\n\n        super.onceAux(type, \"Event '\" + type + \"' triggered once by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (this.videos[0] && this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableOnceHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableOnceHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableOnceHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * See [[EventDispatcher.off]]\n     */\n    off<K extends keyof StreamManagerEventMap>(type: K, handler?: (event: StreamManagerEventMap[K]) => void): this {\n\n        super.offAux(type, handler);\n\n        if (type === 'publisherStartSpeaking') {\n            // Both StreamManager and Session can have \"publisherStartSpeaking\" event listeners\n            const remainingStartSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStartSpeakingEventListeners === 0) {\n                this.stream.disableHarkSpeakingEvent(false);\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // Both StreamManager and Session can have \"publisherStopSpeaking\" event listeners\n            const remainingStopSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStopSpeakingEventListeners === 0) {\n                this.stream.disableHarkStoppedSpeakingEvent(false);\n            }\n        }\n        if (type === 'streamAudioVolumeChange') {\n            // Only StreamManager can have \"streamAudioVolumeChange\" event listeners\n            const remainingVolumeEventListeners = this.ee.getListeners(type).length;\n            if (remainingVolumeEventListeners === 0) {\n                this.stream.disableHarkVolumeChangeEvent(false);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Makes `video` element parameter display this [[stream]]. This is useful when you are\n     * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)\n     *\n     * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be\n     * disassociated from that previous Publisher/Subscriber and to be associated to this one.\n     *\n     * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.\n     * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other\n     * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.\n     */\n    addVideoElement(video: HTMLVideoElement): number {\n\n        this.initializeVideoProperties(video);\n\n        if (!this.remote && this.stream.displayMyRemote()) {\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n\n        // If the video element is already part of this StreamManager do nothing\n        for (const v of this.videos) {\n            if (v.video === video) {\n                return 0;\n            }\n        }\n\n        let returnNumber = 1;\n\n        for (const streamManager of this.stream.session.streamManagers) {\n            if (streamManager.disassociateVideo(video)) {\n                returnNumber = -1;\n                break;\n            }\n        }\n\n        this.stream.session.streamManagers.forEach(streamManager => {\n            streamManager.disassociateVideo(video);\n        });\n\n        this.pushNewStreamManagerVideo({\n            video,\n            id: video.id,\n            canplayListenerAdded: false\n        });\n\n        logger.info('New video element associated to ', this);\n\n        return returnNumber;\n    }\n\n    /**\n     * Creates a new video element displaying this [[stream]]. This allows you to have multiple video elements displaying the same media stream.\n     *\n     * #### Events dispatched\n     *\n     * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See [[VideoElementEvent]]\n     *\n     * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted\n     * @param insertMode How the video element will be inserted accordingly to `targetElemet`\n     *\n     * @returns The created HTMLVideoElement\n     */\n    createVideoElement(targetElement?: string | HTMLElement, insertMode?: VideoInsertMode): HTMLVideoElement {\n        let targEl;\n        if (typeof targetElement === 'string') {\n            targEl = document.getElementById(targetElement);\n            if (!targEl) {\n                throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n            }\n        } else if (targetElement instanceof HTMLElement) {\n            targEl = targetElement;\n        } else {\n            throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n        }\n\n        const video = this.createVideo();\n        this.initializeVideoProperties(video);\n\n        let insMode = !!insertMode ? insertMode : VideoInsertMode.APPEND;\n        switch (insMode) {\n            case VideoInsertMode.AFTER:\n                targEl.parentNode!!.insertBefore(video, targEl.nextSibling);\n                break;\n            case VideoInsertMode.APPEND:\n                targEl.appendChild(video);\n                break;\n            case VideoInsertMode.BEFORE:\n                targEl.parentNode!!.insertBefore(video, targEl);\n                break;\n            case VideoInsertMode.PREPEND:\n                targEl.insertBefore(video, targEl.childNodes[0]);\n                break;\n            case VideoInsertMode.REPLACE:\n                targEl.parentNode!!.replaceChild(video, targEl);\n                break;\n            default:\n                insMode = VideoInsertMode.APPEND;\n                targEl.appendChild(video);\n                break;\n        }\n\n        const v: StreamManagerVideo = {\n            targetElement: targEl,\n            video,\n            insertMode: insMode,\n            id: video.id,\n            canplayListenerAdded: false\n        };\n        this.pushNewStreamManagerVideo(v);\n\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(v.video, this, 'videoElementCreated')]);\n        this.lazyLaunchVideoElementCreatedEvent = !!this.firstVideoElement;\n\n        return video;\n    }\n\n    /**\n     * Updates the current configuration for the [[PublisherSpeakingEvent]] feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser/classes/StreamManagerEvent.html) feature for this specific\n     * StreamManager audio stream, overriding the global options set with [[OpenVidu.setAdvancedConfiguration]]. This way you can customize the audio events options\n     * for each specific StreamManager and change them dynamically.\n     *\n     * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:\n     * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)\n     * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)\n     */\n    updatePublisherSpeakingEventsOptions(publisherSpeakingEventsOptions: { interval?: number, threshold?: number }): void {\n        const currentHarkOptions = !!this.stream.harkOptions ? this.stream.harkOptions : (this.stream.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {});\n        const newInterval = (typeof publisherSpeakingEventsOptions.interval === 'number') ?\n            publisherSpeakingEventsOptions.interval : ((typeof currentHarkOptions.interval === 'number') ? currentHarkOptions.interval : 100);\n        const newThreshold = (typeof publisherSpeakingEventsOptions.threshold === 'number') ?\n            publisherSpeakingEventsOptions.threshold : ((typeof currentHarkOptions.threshold === 'number') ? currentHarkOptions.threshold : -50);\n        this.stream.harkOptions = {\n            interval: newInterval,\n            threshold: newThreshold\n        };\n        if (!!this.stream.speechEvent) {\n            this.stream.speechEvent.setInterval(newInterval);\n            this.stream.speechEvent.setThreshold(newThreshold);\n        }\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    initializeVideoProperties(video: HTMLVideoElement): void {\n        if (!(!this.remote && this.stream.displayMyRemote())) {\n            // Avoid setting the MediaStream into the srcObject if remote subscription before publishing\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                // If srcObject already set don't do it again\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n        video.autoplay = true;\n        video.controls = false;\n\n        if (platform.isSafariBrowser() || (platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser()))) {\n            video.setAttribute('playsinline', 'true');\n        }\n\n        if (!video.id) {\n            video.id = (this.remote ? 'remote-' : 'local-') + 'video-' + this.stream.streamId;\n            // DEPRECATED property: assign once the property id if the user provided a valid targetElement\n            if (!this.id && !!this.targetElement) {\n                this.id = video.id;\n            }\n        }\n\n        if (this.remote && this.isMirroredVideo(video)) {\n            // Subscriber video associated to a previously mirrored video element\n            this.removeMirrorVideo(video);\n        } else if (!this.remote && !this.stream.displayMyRemote()) {\n            // Publisher video\n            video.muted = true;\n            if (this.isMirroredVideo(video) && !this.stream.outboundStreamOpts.publisherProperties.mirror) {\n                // If the video was already rotated and now is set to not mirror\n                this.removeMirrorVideo(video);\n            } else if (this.stream.outboundStreamOpts.publisherProperties.mirror && !this.stream.isSendScreen()) {\n                // If the video is now set to mirror and is not screen share\n                this.mirrorVideo(video);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    removeAllVideos(): void {\n        for (let i = this.stream.session.streamManagers.length - 1; i >= 0; --i) {\n            if (this.stream.session.streamManagers[i] === this) {\n                this.stream.session.streamManagers.splice(i, 1);\n            }\n        }\n\n        this.videos.forEach(streamManagerVideo => {\n            // Remove oncanplay event listener (only OpenVidu browser listener, not the user ones)\n            if (!!streamManagerVideo.video && !!streamManagerVideo.video.removeEventListener) {\n                streamManagerVideo.video.removeEventListener('canplay', this.canPlayListener);\n            }\n            streamManagerVideo.canplayListenerAdded = false;\n            if (!!streamManagerVideo.targetElement) {\n                // Only remove from DOM videos created by OpenVidu Browser (those generated by passing a valid targetElement in OpenVidu.initPublisher\n                // and Session.subscribe or those created by StreamManager.createVideoElement). All this videos triggered a videoElementCreated event\n                streamManagerVideo.video.parentNode!.removeChild(streamManagerVideo.video);\n                this.ee.emitEvent('videoElementDestroyed', [new VideoElementEvent(streamManagerVideo.video, this, 'videoElementDestroyed')]);\n            }\n            // Remove srcObject from the video\n            this.removeSrcObject(streamManagerVideo);\n            // Remove from collection of videos every video managed by OpenVidu Browser\n            this.videos.filter(v => !v.targetElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    disassociateVideo(video: HTMLVideoElement): boolean {\n        let disassociated = false;\n        for (let i = 0; i < this.videos.length; i++) {\n            if (this.videos[i].video === video) {\n                this.videos[i].video.removeEventListener('canplay', this.canPlayListener);\n                this.videos.splice(i, 1);\n                disassociated = true;\n                logger.info('Video element disassociated from ', this);\n                break;\n            }\n        }\n        return disassociated;\n    }\n\n    /**\n     * @hidden\n     */\n    addPlayEventToFirstVideo() {\n        if ((!!this.videos[0]) && (!!this.videos[0].video) && (!this.videos[0].canplayListenerAdded)) {\n            this.activateStreamPlayingEventExceptionTimeout();\n            this.videos[0].video.addEventListener('canplay', this.canPlayListener);\n            this.videos[0].canplayListenerAdded = true;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    updateMediaStream(mediaStream: MediaStream) {\n        this.videos.forEach(streamManagerVideo => {\n            streamManagerVideo.video.srcObject = mediaStream;\n            if (platform.isIonicIos()) {\n                // iOS Ionic. LIMITATION: must reinsert the video in the DOM for\n                // the media stream to be updated\n                const vParent = streamManagerVideo.video.parentElement;\n                const newVideo = streamManagerVideo.video;\n                vParent!!.replaceChild(newVideo, streamManagerVideo.video);\n                streamManagerVideo.video = newVideo;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    emitEvent(type: string, eventArray: any[]): void {\n        this.ee.emitEvent(type, eventArray);\n    }\n\n    /**\n    * @hidden\n    */\n    createVideo(): HTMLVideoElement {\n        return document.createElement('video');\n    }\n\n    /**\n     * @hidden\n     */\n    removeSrcObject(streamManagerVideo: StreamManagerVideo) {\n        streamManagerVideo.video.srcObject = null;\n        this.deactivateStreamPlayingEventExceptionTimeout();\n    }\n\n    /**\n     * @hidden\n     */\n    abstract replaceTrackInMediaStream(track: MediaStreamTrack, updateLastConstraints: boolean): Promise<void>;\n\n    /* Private methods */\n\n    protected pushNewStreamManagerVideo(streamManagerVideo: StreamManagerVideo) {\n        this.videos.push(streamManagerVideo);\n        this.addPlayEventToFirstVideo();\n        if (this.stream.session.streamManagers.indexOf(this) === -1) {\n            this.stream.session.streamManagers.push(this);\n        }\n    }\n\n    private mirrorVideo(video: HTMLVideoElement): void {\n        if (!platform.isIonicIos()) {\n            video.style.transform = 'rotateY(180deg)';\n            video.style.webkitTransform = 'rotateY(180deg)';\n        }\n    }\n\n    private removeMirrorVideo(video: HTMLVideoElement): void {\n        video.style.transform = 'unset';\n        video.style.webkitTransform = 'unset';\n    }\n\n    private isMirroredVideo(video: HTMLVideoElement): boolean {\n        return video.style.transform === 'rotateY(180deg)' || video.style.webkitTransform === 'rotateY(180deg)';\n    }\n\n    private activateStreamPlayingEventExceptionTimeout() {\n        if (!this.remote) {\n            // ExceptionEvent NO_STREAM_PLAYING_EVENT is only for subscribers\n            return;\n        }\n        if (this.streamPlayingEventExceptionTimeout != null) {\n            // The timeout is already activated\n            return;\n        }\n        // Trigger ExceptionEvent NO_STREAM_PLAYING_EVENT if after timeout there is no 'canplay' event\n        const msTimeout = this.stream.session.openvidu.advancedConfiguration.noStreamPlayingEventExceptionTimeout || 4000;\n        this.streamPlayingEventExceptionTimeout = setTimeout(() => {\n            const msg = 'StreamManager of Stream ' + this.stream.streamId + ' (' + (this.remote ? 'Subscriber' : 'Publisher') + ') did not trigger \"streamPlaying\" event in ' + msTimeout + ' ms';\n            logger.warn(msg);\n            this.stream.session.emitEvent('exception', [new ExceptionEvent(this.stream.session, ExceptionEventName.NO_STREAM_PLAYING_EVENT, (<any>this) as Subscriber, msg)]);\n            delete this.streamPlayingEventExceptionTimeout;\n        }, msTimeout);\n    }\n\n    private deactivateStreamPlayingEventExceptionTimeout() {\n        clearTimeout(this.streamPlayingEventExceptionTimeout as any);\n        delete this.streamPlayingEventExceptionTimeout;\n    }\n\n}\n"]},"metadata":{},"sourceType":"script"}