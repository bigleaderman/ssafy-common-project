{"ast":null,"code":"\"use strict\";\n\nvar OpenViduLogger = require('../../../../Logger/OpenViduLogger').OpenViduLogger;\n\nvar Logger = OpenViduLogger.getInstance();\nvar MAX_RETRIES = 2000;\nvar RETRY_TIME_MS = 3000;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSING = 2;\nvar CLOSED = 3;\n\nfunction WebSocketWithReconnection(config) {\n  var closing = false;\n  var registerMessageHandler;\n  var wsUri = config.uri;\n  var reconnecting = false;\n  var ws = new WebSocket(wsUri);\n\n  ws.onopen = function () {\n    Logger.debug(\"WebSocket connected to \" + wsUri);\n\n    if (config.onconnected) {\n      config.onconnected();\n    }\n  };\n\n  ws.onerror = function (error) {\n    Logger.error(\"Could not connect to \" + wsUri + \" (invoking onerror if defined)\", error);\n\n    if (config.onerror) {\n      config.onerror(error);\n    }\n  };\n\n  var reconnectionOnClose = function reconnectionOnClose() {\n    if (ws.readyState === CLOSED) {\n      if (closing) {\n        Logger.debug(\"Connection closed by user\");\n      } else {\n        if (config.ismasternodecrashed()) {\n          Logger.error(\"Master Node has crashed. Stopping reconnection process\");\n        } else {\n          Logger.debug(\"Connection closed unexpectedly. Reconnecting...\");\n          reconnect(MAX_RETRIES, 1);\n        }\n      }\n    } else {\n      Logger.debug(\"Close callback from previous websocket. Ignoring it\");\n    }\n  };\n\n  ws.onclose = reconnectionOnClose;\n\n  function reconnect(maxRetries, numRetries) {\n    Logger.debug(\"reconnect (attempt #\" + numRetries + \", max=\" + maxRetries + \")\");\n\n    if (numRetries === 1) {\n      if (reconnecting) {\n        Logger.warn(\"Trying to reconnect when already reconnecting... Ignoring this reconnection.\");\n        return;\n      } else {\n        reconnecting = true;\n      }\n\n      if (config.onreconnecting) {\n        config.onreconnecting();\n      }\n    }\n\n    reconnectAux(maxRetries, numRetries);\n  }\n\n  function addReconnectionQueryParamsIfMissing(uriString) {\n    var searchParams = new URLSearchParams(new URL(uriString).search);\n\n    if (!searchParams.has(\"reconnect\")) {\n      uriString = Array.from(searchParams).length > 0 ? uriString + '&reconnect=true' : uriString + '?reconnect=true';\n    }\n\n    return uriString;\n  }\n\n  function reconnectAux(maxRetries, numRetries) {\n    Logger.debug(\"Reconnection attempt #\" + numRetries);\n    ws.close(4104, 'Connection closed for reconnection');\n    wsUri = addReconnectionQueryParamsIfMissing(wsUri);\n    ws = new WebSocket(wsUri);\n\n    ws.onopen = function () {\n      Logger.debug(\"Reconnected to \" + wsUri + \" after \" + numRetries + \" attempts...\");\n      reconnecting = false;\n      registerMessageHandler();\n\n      if (config.onreconnected()) {\n        config.onreconnected();\n      }\n\n      ws.onclose = reconnectionOnClose;\n    };\n\n    ws.onerror = function (error) {\n      Logger.warn(\"Reconnection error: \", error);\n\n      if (numRetries === maxRetries) {\n        if (config.ondisconnect) {\n          config.ondisconnect();\n        }\n      } else {\n        setTimeout(function () {\n          reconnect(maxRetries, numRetries + 1);\n        }, RETRY_TIME_MS);\n      }\n    };\n  }\n\n  this.close = function (code, reason) {\n    closing = true;\n    ws.close(code, reason);\n  };\n\n  this.reconnectWs = function () {\n    Logger.debug(\"reconnectWs\");\n    reconnect(MAX_RETRIES, 1);\n  };\n\n  this.send = function (message) {\n    ws.send(message);\n  };\n\n  this.addEventListener = function (type, callback) {\n    registerMessageHandler = function registerMessageHandler() {\n      ws.addEventListener(type, callback);\n    };\n\n    registerMessageHandler();\n  };\n\n  this.getReadyState = function () {\n    return ws.readyState;\n  };\n}\n\nmodule.exports = WebSocketWithReconnection;","map":null,"metadata":{},"sourceType":"script"}