{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenViduLogger = void 0;\n\nvar jsnlog_1 = require(\"jsnlog\");\n\nvar ConsoleLogger_1 = require(\"./ConsoleLogger\");\n\nvar OpenViduLoggerConfiguration_1 = require(\"./OpenViduLoggerConfiguration\");\n\nvar OpenViduLogger =\n/** @class */\nfunction () {\n  function OpenViduLogger() {\n    this.JSNLOG_URL = \"/openvidu/elk/openvidu-browser-logs\";\n    this.MAX_JSNLOG_BATCH_LOG_MESSAGES = 100;\n    this.MAX_MSECONDS_BATCH_MESSAGES = 5000;\n    this.MAX_LENGTH_STRING_JSON = 1000;\n    this.defaultConsoleLogger = new ConsoleLogger_1.ConsoleLogger(window.console);\n    this.isProdMode = false;\n    this.isJSNLogSetup = false;\n  }\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.configureJSNLog = function (openVidu, token) {\n    var _this = this;\n\n    try {\n      // If dev mode or...\n      if (window['LOG_JSNLOG_RESULTS'] || // If instance is created and it is OpenVidu Pro\n      this.instance && openVidu.isAtLeastPro // If logs are enabled\n      && this.instance.isOpenViduBrowserLogsDebugActive(openVidu) // Only reconfigure it if session or finalUserId has changed\n      && this.instance.canConfigureJSNLog(openVidu, this.instance)) {\n        // Check if app logs can be sent\n        // and replace console.log function to send\n        // logs of the application\n        if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app) {\n          this.instance.replaceWindowConsole();\n        } // isJSNLogSetup will not be true until completed setup\n\n\n        this.instance.isJSNLogSetup = false;\n        this.instance.info(\"Configuring JSNLogs.\");\n        var finalUserId_1 = openVidu.finalUserId;\n        var sessionId_1 = openVidu.session.sessionId;\n\n        var beforeSendCallback = function (xhr) {\n          // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n          // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n          var parentReadyStateFunction = xhr.onreadystatechange;\n\n          xhr.onreadystatechange = function () {\n            if (_this.isInvalidResponse(xhr)) {\n              Object.defineProperty(xhr, \"readyState\", {\n                value: 4\n              });\n              Object.defineProperty(xhr, \"status\", {\n                value: 200\n              }); // Disable JSNLog too to not send periodically errors\n\n              _this.instance.disableLogger();\n            }\n\n            parentReadyStateFunction();\n          }; // Headers to identify and authenticate logs\n\n\n          xhr.setRequestHeader('Authorization', \"Basic \" + btoa(\"\".concat(finalUserId_1, \"%/%\").concat(sessionId_1) + \":\" + token));\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Additional headers for OpenVidu\n\n          xhr.setRequestHeader('OV-Final-User-Id', finalUserId_1);\n          xhr.setRequestHeader('OV-Session-Id', sessionId_1);\n          xhr.setRequestHeader('OV-Token', token);\n        }; // Creation of the appender.\n\n\n        this.instance.currentAppender = jsnlog_1.JL.createAjaxAppender(\"appender-\".concat(finalUserId_1, \"-\").concat(sessionId_1));\n        this.instance.currentAppender.setOptions({\n          beforeSend: beforeSendCallback,\n          maxBatchSize: 1000,\n          batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n          batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n        }); // Avoid circular dependencies\n\n        var logSerializer = function (obj) {\n          var getCircularReplacer = function () {\n            var seen = new WeakSet();\n            return function (key, value) {\n              if (typeof value === \"object\" && value != null) {\n                if (seen.has(value) || HTMLElement && value instanceof HTMLElement) {\n                  return;\n                }\n\n                seen.add(value);\n              }\n\n              return value;\n            };\n          }; // Cut long messages\n\n\n          var stringifyJson = JSON.stringify(obj, getCircularReplacer());\n\n          if (stringifyJson.length > _this.instance.MAX_LENGTH_STRING_JSON) {\n            stringifyJson = \"\".concat(stringifyJson.substring(0, _this.instance.MAX_LENGTH_STRING_JSON), \"...\");\n          }\n\n          if (window['LOG_JSNLOG_RESULTS']) {\n            console.log(stringifyJson);\n          }\n\n          return stringifyJson;\n        }; // Initialize JL to send logs\n\n\n        jsnlog_1.JL.setOptions({\n          defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n          serialize: logSerializer,\n          enabled: true\n        });\n        (0, jsnlog_1.JL)().setOptions({\n          appenders: [this.instance.currentAppender]\n        });\n        this.instance.isJSNLogSetup = true;\n        this.instance.loggingSessionId = sessionId_1;\n        this.instance.info(\"JSNLog configured.\");\n      }\n    } catch (e) {\n      // Print error\n      console.error(\"Error configuring JSNLog: \");\n      console.error(e); // Restore defaults values just in case any exception happen-\n\n      this.instance.disableLogger();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.getInstance = function () {\n    if (!OpenViduLogger.instance) {\n      OpenViduLogger.instance = new OpenViduLogger();\n    }\n\n    return OpenViduLogger.instance;\n  };\n\n  OpenViduLogger.isInvalidResponse = function (xhr) {\n    return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n  };\n\n  OpenViduLogger.prototype.canConfigureJSNLog = function (openVidu, logger) {\n    return openVidu.session.sessionId != logger.loggingSessionId;\n  };\n\n  OpenViduLogger.prototype.isOpenViduBrowserLogsDebugActive = function (openVidu) {\n    return openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug || openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app;\n  }; // Return console functions with jsnlog integration\n\n\n  OpenViduLogger.prototype.getConsoleWithJSNLog = function () {\n    return function (openViduLogger) {\n      return {\n        log: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        info: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        debug: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n        },\n        warn: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().warn(arguments);\n          }\n        },\n        error: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().error(arguments);\n          }\n        }\n      };\n    }(this);\n  };\n\n  OpenViduLogger.prototype.replaceWindowConsole = function () {\n    window.console = this.defaultConsoleLogger.logger;\n    window.console.log = this.getConsoleWithJSNLog().log;\n    window.console.info = this.getConsoleWithJSNLog().info;\n    window.console.debug = this.getConsoleWithJSNLog().debug;\n    window.console.warn = this.getConsoleWithJSNLog().warn;\n    window.console.error = this.getConsoleWithJSNLog().error;\n  };\n\n  OpenViduLogger.prototype.disableLogger = function () {\n    jsnlog_1.JL.setOptions({\n      enabled: false\n    });\n    this.isJSNLogSetup = false;\n    this.loggingSessionId = undefined;\n    this.currentAppender = undefined;\n    window.console = this.defaultConsoleLogger.logger;\n    window.console.log = this.defaultConsoleLogger.log;\n    window.console.info = this.defaultConsoleLogger.info;\n    window.console.debug = this.defaultConsoleLogger.debug;\n    window.console.warn = this.defaultConsoleLogger.warn;\n    window.console.error = this.defaultConsoleLogger.error;\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().warn(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().error(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.flush = function () {\n    if (this.isJSNLogSetup && this.currentAppender != null) {\n      this.currentAppender.sendBatch();\n    }\n  };\n\n  OpenViduLogger.prototype.enableProdMode = function () {\n    this.isProdMode = true;\n  };\n\n  return OpenViduLogger;\n}();\n\nexports.OpenViduLogger = OpenViduLogger;","map":{"version":3,"mappings":"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","names":["ConsoleLogger_1","window","console","OpenViduLogger","openVidu","token","instance","isAtLeastPro","isOpenViduBrowserLogsDebugActive","canConfigureJSNLog","sendBrowserLogs","OpenViduLoggerConfiguration_1","debug_app","replaceWindowConsole","isJSNLogSetup","info","finalUserId_1","finalUserId","sessionId_1","session","sessionId","beforeSendCallback","xhr","parentReadyStateFunction","onreadystatechange","_this","isInvalidResponse","Object","defineProperty","value","disableLogger","setRequestHeader","btoa","concat","currentAppender","jsnlog_1","createAjaxAppender","setOptions","beforeSend","maxBatchSize","batchSize","MAX_JSNLOG_BATCH_LOG_MESSAGES","batchTimeout","MAX_MSECONDS_BATCH_MESSAGES","logSerializer","obj","getCircularReplacer","seen","WeakSet","key","has","HTMLElement","add","stringifyJson","JSON","stringify","length","MAX_LENGTH_STRING_JSON","substring","log","defaultAjaxUrl","httpUri","JSNLOG_URL","serialize","enabled","appenders","loggingSessionId","e","error","status","logger","debug","openViduLogger","args","defaultConsoleLogger","apply","arguments","warn","getConsoleWithJSNLog","undefined","isProdMode","sendBatch","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Logger\\OpenViduLogger.ts"],"sourcesContent":["import { JL } from 'jsnlog'\nimport { OpenVidu } from \"../../OpenVidu/OpenVidu\";\nimport { ConsoleLogger } from './ConsoleLogger';\nimport { OpenViduLoggerConfiguration } from \"./OpenViduLoggerConfiguration\";\n\nexport class OpenViduLogger {\n\n\tprivate static instance: OpenViduLogger;\n\n\tprivate JSNLOG_URL: string = \"/openvidu/elk/openvidu-browser-logs\";\n\tprivate MAX_JSNLOG_BATCH_LOG_MESSAGES: number = 100;\n\tprivate MAX_MSECONDS_BATCH_MESSAGES: number = 5000;\n\tprivate MAX_LENGTH_STRING_JSON: number = 1000;\n\n\tprivate defaultConsoleLogger: ConsoleLogger = new ConsoleLogger(window.console);\n\n\tprivate currentAppender: any;\n\n\tprivate isProdMode = false;\n\tprivate isJSNLogSetup = false;\n\n\t// This two variables are used to restart JSNLog\n\t// on different sessions and different userIds\n\tprivate loggingSessionId: string | undefined;\n\n\t/**\n\t * @hidden\n\t */\n\tstatic configureJSNLog(openVidu: OpenVidu, token: string) {\n\t\ttry {\n\t\t\t// If dev mode or...\n\t\t\tif ((window['LOG_JSNLOG_RESULTS']) ||\n\t\t\t\t// If instance is created and it is OpenVidu Pro\n\t\t\t\t(this.instance && openVidu.isAtLeastPro\n\t\t\t\t\t// If logs are enabled\n\t\t\t\t\t&& this.instance.isOpenViduBrowserLogsDebugActive(openVidu)\n\t\t\t\t\t// Only reconfigure it if session or finalUserId has changed\n\t\t\t\t\t&& this.instance.canConfigureJSNLog(openVidu, this.instance))) {\n\n\t\t\t\t// Check if app logs can be sent\n\t\t\t\t// and replace console.log function to send\n\t\t\t\t// logs of the application\n\t\t\t\tif (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app) {\n\t\t\t\t\tthis.instance.replaceWindowConsole();\n\t\t\t\t}\n\n\t\t\t\t// isJSNLogSetup will not be true until completed setup\n\t\t\t\tthis.instance.isJSNLogSetup = false;\n\t\t\t\tthis.instance.info(\"Configuring JSNLogs.\");\n\n\t\t\t\tconst finalUserId = openVidu.finalUserId;\n\t\t\t\tconst sessionId = openVidu.session.sessionId;\n\n\t\t\t\tconst beforeSendCallback = (xhr) => {\n\t\t\t\t\t// If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n\t\t\t\t\t// https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n\t\t\t\t\tconst parentReadyStateFunction = xhr.onreadystatechange;\n\t\t\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t\t\tif (this.isInvalidResponse(xhr)) {\n\t\t\t\t\t\t\tObject.defineProperty(xhr, \"readyState\", { value: 4 });\n\t\t\t\t\t\t\tObject.defineProperty(xhr, \"status\", { value: 200 });\n\t\t\t\t\t\t\t// Disable JSNLog too to not send periodically errors\n\t\t\t\t\t\t\tthis.instance.disableLogger();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparentReadyStateFunction();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Headers to identify and authenticate logs\n\t\t\t\t\txhr.setRequestHeader('Authorization', \"Basic \" + btoa(`${finalUserId}%/%${sessionId}` + \":\" + token));\n\t\t\t\t\txhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n\t\t\t\t\t// Additional headers for OpenVidu\n\t\t\t\t\txhr.setRequestHeader('OV-Final-User-Id', finalUserId);\n\t\t\t\t\txhr.setRequestHeader('OV-Session-Id', sessionId);\n\t\t\t\t\txhr.setRequestHeader('OV-Token', token);\n\t\t\t\t}\n\n\t\t\t\t// Creation of the appender.\n\t\t\t\tthis.instance.currentAppender = JL.createAjaxAppender(`appender-${finalUserId}-${sessionId}`);\n\t\t\t\tthis.instance.currentAppender.setOptions({\n\t\t\t\t\tbeforeSend: beforeSendCallback,\n\t\t\t\t\tmaxBatchSize: 1000,\n\t\t\t\t\tbatchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n\t\t\t\t\tbatchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n\t\t\t\t});\n\n\t\t\t\t// Avoid circular dependencies\n\t\t\t\tconst logSerializer = (obj): string => {\n\t\t\t\t\tconst getCircularReplacer = () => {\n\t\t\t\t\t\tconst seen = new WeakSet();\n\t\t\t\t\t\treturn (key, value) => {\n\t\t\t\t\t\t\tif (typeof value === \"object\" && value != null) {\n\t\t\t\t\t\t\t\tif (seen.has(value) || (HTMLElement && value instanceof HTMLElement)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tseen.add(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// Cut long messages\n\t\t\t\t\tlet stringifyJson = JSON.stringify(obj, getCircularReplacer());\n\t\t\t\t\tif (stringifyJson.length > this.instance.MAX_LENGTH_STRING_JSON) {\n\t\t\t\t\t\tstringifyJson = `${stringifyJson.substring(0, this.instance.MAX_LENGTH_STRING_JSON)}...`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (window['LOG_JSNLOG_RESULTS']) {\n\t\t\t\t\t\tconsole.log(stringifyJson);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn stringifyJson;\n\t\t\t\t};\n\n\t\t\t\t// Initialize JL to send logs\n\t\t\t\tJL.setOptions({\n\t\t\t\t\tdefaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n\t\t\t\t\tserialize: logSerializer,\n\t\t\t\t\tenabled: true\n\t\t\t\t});\n\t\t\t\tJL().setOptions({\n\t\t\t\t\tappenders: [this.instance.currentAppender]\n\t\t\t\t});\n\n\t\t\t\tthis.instance.isJSNLogSetup = true;\n\t\t\t\tthis.instance.loggingSessionId = sessionId;\n\t\t\t\tthis.instance.info(\"JSNLog configured.\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Print error\n\t\t\tconsole.error(\"Error configuring JSNLog: \");\n\t\t\tconsole.error(e);\n\t\t\t// Restore defaults values just in case any exception happen-\n\t\t\tthis.instance.disableLogger();\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tstatic getInstance(): OpenViduLogger {\n\t\tif (!OpenViduLogger.instance) {\n\t\t\tOpenViduLogger.instance = new OpenViduLogger();\n\t\t}\n\t\treturn OpenViduLogger.instance;\n\t}\n\n\tprivate static isInvalidResponse(xhr: XMLHttpRequest) {\n\t\treturn xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n\t}\n\n\tprivate canConfigureJSNLog(openVidu: OpenVidu, logger: OpenViduLogger): boolean {\n\t\treturn openVidu.session.sessionId != logger.loggingSessionId\n\t}\n\n\tprivate isOpenViduBrowserLogsDebugActive(openVidu: OpenVidu) {\n\t\treturn openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug ||\n\t\t\topenVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app;\n\t}\n\n\t// Return console functions with jsnlog integration\n\tprivate getConsoleWithJSNLog() {\n\t\treturn function (openViduLogger: OpenViduLogger) {\n\t\t\treturn {\n\t\t\t\tlog: function (...args) {\n\t\t\t\t\topenViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\t\t\t\t\tif (openViduLogger.isJSNLogSetup) {\n\t\t\t\t\t\tJL().info(arguments);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinfo: function (...args) {\n\t\t\t\t\topenViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\t\t\t\t\tif (openViduLogger.isJSNLogSetup) {\n\t\t\t\t\t\tJL().info(arguments);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdebug: function (...args) {\n\t\t\t\t\topenViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\t\t\t\t},\n\t\t\t\twarn: function (...args) {\n\t\t\t\t\topenViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\t\t\t\t\tif (openViduLogger.isJSNLogSetup) {\n\t\t\t\t\t\tJL().warn(arguments);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function (...args) {\n\t\t\t\t\topenViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\t\t\t\t\tif (openViduLogger.isJSNLogSetup) {\n\t\t\t\t\t\tJL().error(arguments);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}(this);\n\t}\n\n\tprivate replaceWindowConsole() {\n\t\twindow.console = this.defaultConsoleLogger.logger;\n\t\twindow.console.log = this.getConsoleWithJSNLog().log;\n\t\twindow.console.info = this.getConsoleWithJSNLog().info;\n\t\twindow.console.debug = this.getConsoleWithJSNLog().debug;\n\t\twindow.console.warn = this.getConsoleWithJSNLog().warn;\n\t\twindow.console.error = this.getConsoleWithJSNLog().error;\n\t}\n\n\tprivate disableLogger() {\n\t\tJL.setOptions({ enabled: false });\n\t\tthis.isJSNLogSetup = false;\n\t\tthis.loggingSessionId = undefined;\n\t\tthis.currentAppender = undefined;\n\t\twindow.console = this.defaultConsoleLogger.logger;\n\t\twindow.console.log = this.defaultConsoleLogger.log;\n\t\twindow.console.info = this.defaultConsoleLogger.info;\n\t\twindow.console.debug = this.defaultConsoleLogger.debug;\n\t\twindow.console.warn = this.defaultConsoleLogger.warn;\n\t\twindow.console.error = this.defaultConsoleLogger.error;\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tlog(...args: any[]) {\n\t\tif (!this.isProdMode) {\n\t\t\tthis.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n\t\t}\n\t\tif (this.isJSNLogSetup) {\n\t\t\tJL().info(arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tdebug(...args: any[]) {\n\t\tif (!this.isProdMode) {\n\t\t\tthis.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tinfo(...args: any[]) {\n\t\tif (!this.isProdMode) {\n\t\t\tthis.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n\t\t}\n\t\tif (this.isJSNLogSetup) {\n\t\t\tJL().info(arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\twarn(...args: any[]) {\n\t\tthis.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n\t\tif (this.isJSNLogSetup) {\n\t\t\tJL().warn(arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\terror(...args: any[]) {\n\t\tthis.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n\t\tif (this.isJSNLogSetup) {\n\t\t\tJL().error(arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tflush() {\n\t\tif (this.isJSNLogSetup && this.currentAppender != null) {\n\t\t\tthis.currentAppender.sendBatch();\n\t\t}\n\t}\n\n\tenableProdMode() {\n\t\tthis.isProdMode = true;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"script"}