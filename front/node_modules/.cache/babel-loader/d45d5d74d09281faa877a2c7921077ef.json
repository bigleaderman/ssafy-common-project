{"ast":null,"code":"var WildEmitter = require('wildemitter');\n\nfunction getMaxVolume(analyser, fftBins) {\n  var maxVolume = -Infinity;\n  analyser.getFloatFrequencyData(fftBins);\n\n  for (var i = 4, ii = fftBins.length; i < ii; i++) {\n    if (fftBins[i] > maxVolume && fftBins[i] < 0) {\n      maxVolume = fftBins[i];\n    }\n  }\n\n  ;\n  return maxVolume;\n}\n\nvar audioContextType;\n\nif (typeof window !== 'undefined') {\n  audioContextType = window.AudioContext || window.webkitAudioContext;\n} // use a single audio context due to hardware limits\n\n\nvar audioContext = null;\n\nmodule.exports = function (stream, options) {\n  var harker = new WildEmitter(); // make it not break in non-supported browsers\n\n  if (!audioContextType) return harker; //Config\n\n  var options = options || {},\n      smoothing = options.smoothing || 0.1,\n      interval = options.interval || 50,\n      threshold = options.threshold,\n      play = options.play,\n      history = options.history || 10,\n      running = true; // Ensure that just a single AudioContext is internally created\n\n  audioContext = options.audioContext || audioContext || new audioContextType();\n  var sourceNode, fftBins, analyser;\n  analyser = audioContext.createAnalyser();\n  analyser.fftSize = 512;\n  analyser.smoothingTimeConstant = smoothing;\n  fftBins = new Float32Array(analyser.frequencyBinCount);\n  if (stream.jquery) stream = stream[0];\n\n  if (stream instanceof HTMLAudioElement || stream instanceof HTMLVideoElement) {\n    //Audio Tag\n    sourceNode = audioContext.createMediaElementSource(stream);\n    if (typeof play === 'undefined') play = true;\n    threshold = threshold || -50;\n  } else {\n    //WebRTC Stream\n    sourceNode = audioContext.createMediaStreamSource(stream);\n    threshold = threshold || -50;\n  }\n\n  sourceNode.connect(analyser);\n  if (play) analyser.connect(audioContext.destination);\n  harker.speaking = false;\n\n  harker.suspend = function () {\n    return audioContext.suspend();\n  };\n\n  harker.resume = function () {\n    return audioContext.resume();\n  };\n\n  Object.defineProperty(harker, 'state', {\n    get: function get() {\n      return audioContext.state;\n    }\n  });\n\n  audioContext.onstatechange = function () {\n    harker.emit('state_change', audioContext.state);\n  };\n\n  harker.setThreshold = function (t) {\n    threshold = t;\n  };\n\n  harker.setInterval = function (i) {\n    interval = i;\n  };\n\n  harker.stop = function () {\n    running = false;\n    harker.emit('volume_change', -100, threshold);\n\n    if (harker.speaking) {\n      harker.speaking = false;\n      harker.emit('stopped_speaking');\n    }\n\n    analyser.disconnect();\n    sourceNode.disconnect();\n  };\n\n  harker.speakingHistory = [];\n\n  for (var i = 0; i < history; i++) {\n    harker.speakingHistory.push(0);\n  } // Poll the analyser node to determine if speaking\n  // and emit events if changed\n\n\n  var looper = function looper() {\n    setTimeout(function () {\n      //check if stop has been called\n      if (!running) {\n        return;\n      }\n\n      var currentVolume = getMaxVolume(analyser, fftBins);\n      harker.emit('volume_change', currentVolume, threshold);\n      var history = 0;\n\n      if (currentVolume > threshold && !harker.speaking) {\n        // trigger quickly, short history\n        for (var i = harker.speakingHistory.length - 3; i < harker.speakingHistory.length; i++) {\n          history += harker.speakingHistory[i];\n        }\n\n        if (history >= 2) {\n          harker.speaking = true;\n          harker.emit('speaking');\n        }\n      } else if (currentVolume < threshold && harker.speaking) {\n        for (var i = 0; i < harker.speakingHistory.length; i++) {\n          history += harker.speakingHistory[i];\n        }\n\n        if (history == 0) {\n          harker.speaking = false;\n          harker.emit('stopped_speaking');\n        }\n      }\n\n      harker.speakingHistory.shift();\n      harker.speakingHistory.push(0 + (currentVolume > threshold));\n      looper();\n    }, interval);\n  };\n\n  looper();\n  return harker;\n};","map":null,"metadata":{},"sourceType":"script"}