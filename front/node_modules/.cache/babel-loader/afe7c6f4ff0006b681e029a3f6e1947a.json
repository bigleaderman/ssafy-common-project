{"ast":null,"code":"var RpcBuilder = require('../');\n\nvar WebSocketWithReconnection = require('./transports/webSocketWithReconnection');\n\nvar OpenViduLogger = require('../../../Logger/OpenViduLogger').OpenViduLogger;\n\nDate.now = Date.now || function () {\n  return +new Date();\n};\n\nvar PING_INTERVAL = 5000;\nvar RECONNECTING = 'RECONNECTING';\nvar CONNECTED = 'CONNECTED';\nvar DISCONNECTED = 'DISCONNECTED';\nvar Logger = OpenViduLogger.getInstance();\n\nfunction JsonRpcClient(configuration) {\n  var self = this;\n  var wsConfig = configuration.ws;\n  var notReconnectIfNumLessThan = -1;\n  var pingNextNum = 0;\n  var enabledPings = true;\n  var pingPongStarted = false;\n  var pingInterval;\n  var status = DISCONNECTED;\n  var onreconnecting = wsConfig.onreconnecting;\n  var onreconnected = wsConfig.onreconnected;\n  var onconnected = wsConfig.onconnected;\n  var onerror = wsConfig.onerror;\n\n  configuration.rpc.pull = function (params, request) {\n    request.reply(null, \"push\");\n  };\n\n  wsConfig.onreconnecting = function () {\n    Logger.debug(\"--------- ONRECONNECTING -----------\");\n\n    if (status === RECONNECTING) {\n      Logger.error(\"Websocket already in RECONNECTING state when receiving a new ONRECONNECTING message. Ignoring it\");\n      return;\n    }\n\n    stopPing();\n    status = RECONNECTING;\n\n    if (onreconnecting) {\n      onreconnecting();\n    }\n  };\n\n  wsConfig.onreconnected = function () {\n    Logger.debug(\"--------- ONRECONNECTED -----------\");\n\n    if (status === CONNECTED) {\n      Logger.error(\"Websocket already in CONNECTED state when receiving a new ONRECONNECTED message. Ignoring it\");\n      return;\n    }\n\n    status = CONNECTED;\n    updateNotReconnectIfLessThan();\n\n    if (onreconnected) {\n      onreconnected();\n    }\n  };\n\n  wsConfig.onconnected = function () {\n    Logger.debug(\"--------- ONCONNECTED -----------\");\n\n    if (status === CONNECTED) {\n      Logger.error(\"Websocket already in CONNECTED state when receiving a new ONCONNECTED message. Ignoring it\");\n      return;\n    }\n\n    status = CONNECTED;\n    enabledPings = true;\n    usePing();\n\n    if (onconnected) {\n      onconnected();\n    }\n  };\n\n  wsConfig.onerror = function (error) {\n    Logger.debug(\"--------- ONERROR -----------\");\n    status = DISCONNECTED;\n    stopPing();\n\n    if (onerror) {\n      onerror(error);\n    }\n  };\n\n  var ws = new WebSocketWithReconnection(wsConfig);\n  Logger.debug('Connecting websocket to URI: ' + wsConfig.uri);\n  var rpcBuilderOptions = {\n    request_timeout: configuration.rpc.requestTimeout,\n    ping_request_timeout: configuration.rpc.heartbeatRequestTimeout\n  };\n  var rpc = new RpcBuilder(RpcBuilder.packers.JsonRPC, rpcBuilderOptions, ws, function (request) {\n    Logger.debug('Received request: ' + JSON.stringify(request));\n\n    try {\n      var func = configuration.rpc[request.method];\n\n      if (func === undefined) {\n        Logger.error(\"Method \" + request.method + \" not registered in client\");\n      } else {\n        func(request.params, request);\n      }\n    } catch (err) {\n      Logger.error('Exception processing request: ' + JSON.stringify(request));\n      Logger.error(err);\n    }\n  });\n\n  this.send = function (method, params, callback) {\n    var requestTime = Date.now();\n    rpc.encode(method, params, function (error, result) {\n      if (error) {\n        try {\n          Logger.error(\"ERROR:\" + error.message + \" in Request: method:\" + method + \" params:\" + JSON.stringify(params) + \" request:\" + error.request);\n\n          if (error.data) {\n            Logger.error(\"ERROR DATA:\" + JSON.stringify(error.data));\n          }\n        } catch (e) {}\n\n        error.requestTime = requestTime;\n      }\n\n      if (callback) {\n        if (result != undefined && result.value !== 'pong') {\n          Logger.debug('Response: ' + JSON.stringify(result));\n        }\n\n        callback(error, result);\n      }\n    });\n  };\n\n  function updateNotReconnectIfLessThan() {\n    Logger.debug(\"notReconnectIfNumLessThan = \" + pingNextNum + ' (old=' + notReconnectIfNumLessThan + ')');\n    notReconnectIfNumLessThan = pingNextNum;\n  }\n\n  function sendPing() {\n    if (enabledPings) {\n      var params = null;\n\n      if (pingNextNum == 0 || pingNextNum == notReconnectIfNumLessThan) {\n        params = {\n          interval: configuration.heartbeat || PING_INTERVAL\n        };\n      }\n\n      pingNextNum++;\n      self.send('ping', params, function (pingNum) {\n        return function (error, result) {\n          if (error) {\n            Logger.debug(\"Error in ping request #\" + pingNum + \" (\" + error.message + \")\");\n\n            if (pingNum > notReconnectIfNumLessThan) {\n              enabledPings = false;\n              updateNotReconnectIfLessThan();\n              Logger.debug(\"Server did not respond to ping message #\" + pingNum + \". Reconnecting... \");\n              ws.reconnectWs();\n            }\n          }\n        };\n      }(pingNextNum));\n    } else {\n      Logger.debug(\"Trying to send ping, but ping is not enabled\");\n    }\n  }\n\n  function usePing() {\n    if (!pingPongStarted) {\n      Logger.debug(\"Starting ping (if configured)\");\n      pingPongStarted = true;\n\n      if (configuration.heartbeat != undefined) {\n        pingInterval = setInterval(sendPing, configuration.heartbeat);\n        sendPing();\n      }\n    }\n  }\n\n  function stopPing() {\n    clearInterval(pingInterval);\n    pingPongStarted = false;\n    enabledPings = false;\n    pingNextNum = -1;\n    rpc.cancel();\n  }\n\n  this.close = function (code, reason) {\n    Logger.debug(\"Closing  with code: \" + code + \" because: \" + reason);\n\n    if (pingInterval != undefined) {\n      Logger.debug(\"Clearing ping interval\");\n      clearInterval(pingInterval);\n    }\n\n    pingPongStarted = false;\n    enabledPings = false;\n    ws.close(code, reason);\n  };\n\n  this.reconnect = function () {\n    ws.reconnectWs();\n  };\n\n  this.resetPing = function () {\n    enabledPings = true;\n    pingNextNum = 0;\n    usePing();\n  };\n\n  this.getReadyState = function () {\n    return ws.getReadyState();\n  };\n}\n\nmodule.exports = JsonRpcClient;","map":null,"metadata":{},"sourceType":"script"}