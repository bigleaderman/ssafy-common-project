{"ast":null,"code":"/*\nWildEmitter.js is a slim little event emitter by @henrikjoreteg largely based\non @visionmedia's Emitter from UI Kit.\n\nWhy? I wanted it standalone.\n\nI also wanted support for wildcard emitters like this:\n\nemitter.on('*', function (eventName, other, event, payloads) {\n\n});\n\nemitter.on('somenamespace*', function (eventName, payloads) {\n\n});\n\nPlease note that callbacks triggered by wildcard registered events also get\nthe event name as the first argument.\n*/\nmodule.exports = WildEmitter;\n\nfunction WildEmitter() {}\n\nWildEmitter.mixin = function (constructor) {\n  var prototype = constructor.prototype || constructor;\n  prototype.isWildEmitter = true; // Listen on the given `event` with `fn`. Store a group name if present.\n\n  prototype.on = function (event, groupName, fn) {\n    this.callbacks = this.callbacks || {};\n    var hasGroup = arguments.length === 3,\n        group = hasGroup ? arguments[1] : undefined,\n        func = hasGroup ? arguments[2] : arguments[1];\n    func._groupName = group;\n    (this.callbacks[event] = this.callbacks[event] || []).push(func);\n    return this;\n  }; // Adds an `event` listener that will be invoked a single\n  // time then automatically removed.\n\n\n  prototype.once = function (event, groupName, fn) {\n    var self = this,\n        hasGroup = arguments.length === 3,\n        group = hasGroup ? arguments[1] : undefined,\n        func = hasGroup ? arguments[2] : arguments[1];\n\n    function on() {\n      self.off(event, on);\n      func.apply(this, arguments);\n    }\n\n    this.on(event, group, on);\n    return this;\n  }; // Unbinds an entire group\n\n\n  prototype.releaseGroup = function (groupName) {\n    this.callbacks = this.callbacks || {};\n    var item, i, len, handlers;\n\n    for (item in this.callbacks) {\n      handlers = this.callbacks[item];\n\n      for (i = 0, len = handlers.length; i < len; i++) {\n        if (handlers[i]._groupName === groupName) {\n          //console.log('removing');\n          // remove it and shorten the array we're looping through\n          handlers.splice(i, 1);\n          i--;\n          len--;\n        }\n      }\n    }\n\n    return this;\n  }; // Remove the given callback for `event` or all\n  // registered callbacks.\n\n\n  prototype.off = function (event, fn) {\n    this.callbacks = this.callbacks || {};\n    var callbacks = this.callbacks[event],\n        i;\n    if (!callbacks) return this; // remove all handlers\n\n    if (arguments.length === 1) {\n      delete this.callbacks[event];\n      return this;\n    } // remove specific handler\n\n\n    i = callbacks.indexOf(fn);\n\n    if (i !== -1) {\n      callbacks.splice(i, 1);\n\n      if (callbacks.length === 0) {\n        delete this.callbacks[event];\n      }\n    }\n\n    return this;\n  }; /// Emit `event` with the given args.\n  // also calls any `*` handlers\n\n\n  prototype.emit = function (event) {\n    this.callbacks = this.callbacks || {};\n    var args = [].slice.call(arguments, 1),\n        callbacks = this.callbacks[event],\n        specialCallbacks = this.getWildcardCallbacks(event),\n        i,\n        len,\n        item,\n        listeners;\n\n    if (callbacks) {\n      listeners = callbacks.slice();\n\n      for (i = 0, len = listeners.length; i < len; ++i) {\n        if (!listeners[i]) {\n          break;\n        }\n\n        listeners[i].apply(this, args);\n      }\n    }\n\n    if (specialCallbacks) {\n      len = specialCallbacks.length;\n      listeners = specialCallbacks.slice();\n\n      for (i = 0, len = listeners.length; i < len; ++i) {\n        if (!listeners[i]) {\n          break;\n        }\n\n        listeners[i].apply(this, [event].concat(args));\n      }\n    }\n\n    return this;\n  }; // Helper for for finding special wildcard event handlers that match the event\n\n\n  prototype.getWildcardCallbacks = function (eventName) {\n    this.callbacks = this.callbacks || {};\n    var item,\n        split,\n        result = [];\n\n    for (item in this.callbacks) {\n      split = item.split('*');\n\n      if (item === '*' || split.length === 2 && eventName.slice(0, split[0].length) === split[0]) {\n        result = result.concat(this.callbacks[item]);\n      }\n    }\n\n    return result;\n  };\n};\n\nWildEmitter.mixin(WildEmitter);","map":null,"metadata":{},"sourceType":"script"}