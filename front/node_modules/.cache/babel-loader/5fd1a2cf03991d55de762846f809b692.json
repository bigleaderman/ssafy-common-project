{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExceptionEvent = exports.ExceptionEventName = void 0;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Defines property [[ExceptionEvent.name]]\n */\n\n\nvar ExceptionEventName;\n\n(function (ExceptionEventName) {\n  /**\n   * There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side.\n   *\n   * [[ExceptionEvent]] objects with this [[ExceptionEvent.name]] will have as [[ExceptionEvent.origin]] property a [[Session]] object.\n   */\n  ExceptionEventName[\"ICE_CANDIDATE_ERROR\"] = \"ICE_CANDIDATE_ERROR\";\n  /**\n   * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n   * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `failed` status.\n   *\n   * This is a terminal error that won't have any kind of possible recovery. If the client is still connected to OpenVidu Server,\n   * then an automatic reconnection process of the media stream is immediately performed. If the ICE connection has broken due to\n   * a total network drop, then no automatic reconnection process will be possible.\n   *\n   * [[ExceptionEvent]] objects with this [[ExceptionEvent.name]] will have as [[ExceptionEvent.origin]] property a [[Stream]] object.\n   */\n\n  ExceptionEventName[\"ICE_CONNECTION_FAILED\"] = \"ICE_CONNECTION_FAILED\";\n  /**\n   * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n   * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `disconnected` status.\n   *\n   * This is not a terminal error, and it is possible for the ICE connection to be reconnected. If the client is still connected to\n   * OpenVidu Server and after certain timeout the ICE connection has not reached a success or terminal status, then an automatic\n   * reconnection process of the media stream is performed. If the ICE connection has broken due to a total network drop, then no\n   * automatic reconnection process will be possible.\n   *\n   * You can customize the timeout for the reconnection attempt with property [[OpenViduAdvancedConfiguration.iceConnectionDisconnectedExceptionTimeout]],\n   * which by default is 4000 milliseconds.\n   *\n   * [[ExceptionEvent]] objects with this [[ExceptionEvent.name]] will have as [[ExceptionEvent.origin]] property a [[Stream]] object.\n   */\n\n  ExceptionEventName[\"ICE_CONNECTION_DISCONNECTED\"] = \"ICE_CONNECTION_DISCONNECTED\";\n  /**\n   * A [[Subscriber]] object has not fired event `streamPlaying` after certain timeout. `streamPlaying` event belongs to [[StreamManagerEvent]]\n   * category. It wraps Web API native event [canplay](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n   *\n   * OpenVidu Browser can take care of the video players (see [here](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)),\n   * or you can take care of video players on your own (see [here](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)).\n   * Either way, whenever a [[Subscriber]] object is commanded to attach its [[Stream]] to a video element, it is supposed to fire `streamPlaying`\n   * event shortly after. If it does not, then we can safely assume that something wrong has happened while playing the remote video and the\n   * application may be notified through this specific ExceptionEvent.\n   *\n   * The timeout can be configured with property [[OpenViduAdvancedConfiguration.noStreamPlayingEventExceptionTimeout]]. By default it is 4000 milliseconds.\n   *\n   * This is just an informative exception. It only means that a remote Stream that is supposed to be playing by a video player has not done so\n   * in a reasonable time. But the lack of the event can be caused by multiple reasons. If a Subscriber is not playing its Stream, the origin\n   * of the problem could be located at the Publisher side. Or may be caused by a transient network problem. But it also could be a problem with\n   * autoplay permissions. Bottom line, the cause can be very varied, and depending on the application the lack of the event could even be expected.\n   *\n   * [[ExceptionEvent]] objects with this [[ExceptionEvent.name]] will have as [[ExceptionEvent.origin]] property a [[Subscriber]] object.\n   */\n\n  ExceptionEventName[\"NO_STREAM_PLAYING_EVENT\"] = \"NO_STREAM_PLAYING_EVENT\";\n})(ExceptionEventName = exports.ExceptionEventName || (exports.ExceptionEventName = {}));\n/**\n * Triggered by [[SessionEventMap.exception]]\n */\n\n\nvar ExceptionEvent =\n/** @class */\nfunction (_super) {\n  __extends(ExceptionEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function ExceptionEvent(session, name, origin, message, data) {\n    var _this = _super.call(this, false, session, 'exception') || this;\n\n    _this.name = name;\n    _this.origin = origin;\n    _this.message = message;\n    _this.data = data;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  ExceptionEvent.prototype.callDefaultBehavior = function () {};\n\n  return ExceptionEvent;\n}(Event_1.Event);\n\nexports.ExceptionEvent = ExceptionEvent;","map":null,"metadata":{},"sourceType":"script"}