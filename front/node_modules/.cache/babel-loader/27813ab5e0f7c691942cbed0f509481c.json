{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Filter = void 0;\n\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\n\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See [[Stream.applyFilter]]\n */\n\nvar Filter =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function Filter(type, options) {\n    /**\n     * @hidden\n     */\n    this.handlers = new Map();\n    this.type = type;\n    this.options = options;\n  }\n  /**\n   * Executes a filter method. Available methods are specific for each filter\n   *\n   * @param method Name of the method\n   * @param params Parameters of the method\n   */\n\n\n  Filter.prototype.execMethod = function (method, params) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var _a;\n\n      logger.info('Executing filter method to stream ' + _this.stream.streamId);\n      var finalParams;\n\n      var successExecMethod = function (triggerEvent) {\n        logger.info('Filter method successfully executed on Stream ' + _this.stream.streamId);\n        var oldValue = Object.assign({}, _this.stream.filter);\n        _this.stream.filter.lastExecMethod = {\n          method: method,\n          params: finalParams\n        };\n\n        if (triggerEvent) {\n          _this.stream.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.session, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n\n          _this.stream.streamManager.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.streamManager, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')]);\n        }\n\n        return resolve();\n      };\n\n      if (_this.type.startsWith('VB:')) {\n        if (typeof params === 'string') {\n          try {\n            params = JSON.parse(params);\n          } catch (error) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Wrong params syntax: ' + error));\n          }\n        }\n\n        finalParams = params;\n\n        if (method === 'update') {\n          if (!((_a = _this.stream.virtualBackgroundSinkElements) === null || _a === void 0 ? void 0 : _a.VB)) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'There is no Virtual Background filter applied'));\n          } else {\n            _this.stream.virtualBackgroundSinkElements.VB.updateValues(params).then(function () {\n              return successExecMethod(false);\n            }).catch(function (error) {\n              if (error.name === OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR) {\n                return reject(new OpenViduError_1.OpenViduError(error.name, error.message));\n              } else {\n                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Error updating values on Virtual Background filter: ' + error));\n              }\n            });\n          }\n        } else {\n          return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, \"Unknown Virtual Background method \\\"\".concat(method, \"\\\"\")));\n        }\n      } else {\n        var stringParams = void 0;\n\n        if (typeof params !== 'string') {\n          try {\n            stringParams = JSON.stringify(params);\n          } catch (error) {\n            var errorMsg = \"'params' property must be a JSON formatted object\";\n            logger.error(errorMsg);\n            return reject(errorMsg);\n          }\n        } else {\n          stringParams = params;\n        }\n\n        finalParams = stringParams;\n\n        _this.stream.session.openvidu.sendRequest('execFilterMethod', {\n          streamId: _this.stream.streamId,\n          method: method,\n          params: stringParams\n        }, function (error, response) {\n          if (error) {\n            logger.error('Error executing filter method for Stream ' + _this.stream.streamId, error);\n\n            if (error.code === 401) {\n              return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n            } else {\n              return reject(error);\n            }\n          } else {\n            return successExecMethod(true);\n          }\n        });\n      }\n    });\n  };\n  /**\n   * Subscribe to certain filter event. Available events are specific for each filter\n   *\n   * @param eventType Event to which subscribe to.\n   * @param handler Function to execute upon event dispatched. It receives as parameter a [[FilterEvent]] object\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n   */\n\n\n  Filter.prototype.addEventListener = function (eventType, handler) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('addFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            return reject(error);\n          }\n        } else {\n          _this.handlers.set(eventType, handler);\n\n          logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + _this.stream.streamId);\n          return resolve();\n        }\n      });\n    });\n  };\n  /**\n   * Removes certain filter event listener previously set.\n   *\n   * @param eventType Event to unsubscribe from.\n   *\n   * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n   */\n\n\n  Filter.prototype.removeEventListener = function (eventType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n\n      _this.stream.session.openvidu.sendRequest('removeFilterEventListener', {\n        streamId: _this.stream.streamId,\n        eventType: eventType\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n\n          if (error.code === 401) {\n            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n          } else {\n            return reject(error);\n          }\n        } else {\n          _this.handlers.delete(eventType);\n\n          logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + _this.stream.streamId);\n          return resolve();\n        }\n      });\n    });\n  };\n\n  return Filter;\n}();\n\nexports.Filter = Filter;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;AACA;AAEA;;;;;AAGA,IAAMA,MAAM,GAAmBC,gCAAeC,WAAf,EAA/B;AAEA;;;;;;AAKA;AAAA;AAAA;EA2CI;;;EAGA,gBAAYC,IAAZ,EAA0BC,OAA1B,EAAyC;IAfzC;;;IAGA,gBAAsD,IAAIC,GAAJ,EAAtD;IAaI,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,OAAL,GAAeA,OAAf;EACH;EAGD;;;;;;;;EAMAE,wCAAWC,MAAX,EAA2BC,MAA3B,EAAyC;IAAzC;;IACI,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;;;MAE/BX,MAAM,CAACY,IAAP,CAAY,uCAAuCC,KAAI,CAACC,MAAL,CAAYC,QAA/D;MAEA,IAAIC,WAAJ;;MAEA,IAAMC,iBAAiB,GAAG,wBAAY;QAClCjB,MAAM,CAACY,IAAP,CAAY,mDAAmDC,KAAI,CAACC,MAAL,CAAYC,QAA3E;QACA,IAAMG,QAAQ,GAASC,MAAO,CAACC,MAAR,CAAe,EAAf,EAAmBP,KAAI,CAACC,MAAL,CAAYO,MAA/B,CAAvB;QACAR,KAAI,CAACC,MAAL,CAAYO,MAAZ,CAAoBC,cAApB,GAAqC;UAAEf,MAAM,QAAR;UAAUC,MAAM,EAAEQ;QAAlB,CAArC;;QACA,IAAIO,YAAJ,EAAkB;UACdV,KAAI,CAACC,MAAL,CAAYU,OAAZ,CAAoBC,SAApB,CAA8B,uBAA9B,EAAuD,CAAC,IAAIC,uDAAJ,CAA+Bb,KAAI,CAACC,MAAL,CAAYU,OAA3C,EAAoDX,KAAI,CAACC,MAAzD,EAAiE,QAAjE,EAA2ED,KAAI,CAACC,MAAL,CAAYO,MAAvF,EAAgGH,QAAhG,EAA0G,kBAA1G,CAAD,CAAvD;;UACAL,KAAI,CAACC,MAAL,CAAYa,aAAZ,CAA0BF,SAA1B,CAAoC,uBAApC,EAA6D,CAAC,IAAIC,uDAAJ,CAA+Bb,KAAI,CAACC,MAAL,CAAYa,aAA3C,EAA0Dd,KAAI,CAACC,MAA/D,EAAuE,QAAvE,EAAiFD,KAAI,CAACC,MAAL,CAAYO,MAA7F,EAAsGH,QAAtG,EAAgH,kBAAhH,CAAD,CAA7D;QACH;;QACD,OAAOR,OAAO,EAAd;MACH,CATD;;MAWA,IAAIG,KAAI,CAACV,IAAL,CAAUyB,UAAV,CAAqB,KAArB,CAAJ,EAAiC;QAE7B,IAAI,OAAOpB,MAAP,KAAkB,QAAtB,EAAgC;UAC5B,IAAI;YACAA,MAAM,GAAGqB,IAAI,CAACC,KAAL,CAAWtB,MAAX,CAAT;UACH,CAFD,CAEE,OAAOuB,KAAP,EAAc;YACZ,OAAOpB,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBC,wBAApC,EAA8D,0BAA0BF,KAAxF,CAAD,CAAb;UACH;QACJ;;QAEDf,WAAW,GAAGR,MAAd;;QAEA,IAAID,MAAM,KAAK,QAAf,EAAyB;UACrB,IAAI,EAAC,WAAI,CAACO,MAAL,CAAYoB,6BAAZ,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyC,MAAzC,GAAyCA,GAAEC,EAA5C,CAAJ,EAAoD;YAChD,OAAOzB,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBC,wBAApC,EAA8D,+CAA9D,CAAD,CAAb;UACH,CAFD,MAEO;YACHpB,KAAI,CAACC,MAAL,CAAYoB,6BAAZ,CAA0CE,EAA1C,CAA6CC,YAA7C,CAA0D7B,MAA1D,EACK8B,IADL,CACU;cAAM,wBAAiB,CAAC,KAAD,CAAjB;YAAwB,CADxC,EAEKC,KAFL,CAEW,iBAAK;cACR,IAAIR,KAAK,CAACS,IAAN,KAAeR,kCAAkBC,wBAArC,EAA+D;gBAC3D,OAAOtB,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBD,KAAK,CAACS,IAAxB,EAA8BT,KAAK,CAACU,OAApC,CAAD,CAAb;cACH,CAFD,MAEO;gBACH,OAAO9B,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBC,wBAApC,EAA8D,yDAAyDF,KAAvH,CAAD,CAAb;cACH;YACJ,CARL;UASH;QACJ,CAdD,MAcO;UACH,OAAOpB,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBC,wBAApC,EAA8D,8CAAsC1B,MAAtC,EAA4C,IAA5C,CAA9D,CAAD,CAAb;QACH;MACJ,CA7BD,MA6BO;QAEH,IAAImC,YAAY,SAAhB;;QACA,IAAI,OAAOlC,MAAP,KAAkB,QAAtB,EAAgC;UAC5B,IAAI;YACAkC,YAAY,GAAGb,IAAI,CAACc,SAAL,CAAenC,MAAf,CAAf;UACH,CAFD,CAEE,OAAOuB,KAAP,EAAc;YACZ,IAAMa,QAAQ,GAAG,mDAAjB;YACA5C,MAAM,CAAC+B,KAAP,CAAaa,QAAb;YACA,OAAOjC,MAAM,CAACiC,QAAD,CAAb;UACH;QACJ,CARD,MAQO;UACHF,YAAY,GAAWlC,MAAvB;QACH;;QAEDQ,WAAW,GAAG0B,YAAd;;QAEA7B,KAAI,CAACC,MAAL,CAAYU,OAAZ,CAAoBqB,QAApB,CAA6BC,WAA7B,CACI,kBADJ,EAEI;UAAE/B,QAAQ,EAAEF,KAAI,CAACC,MAAL,CAAYC,QAAxB;UAAkCR,MAAM,QAAxC;UAA0CC,MAAM,EAAEkC;QAAlD,CAFJ,EAGI,UAACX,KAAD,EAAQgB,QAAR,EAAgB;UACZ,IAAIhB,KAAJ,EAAW;YACP/B,MAAM,CAAC+B,KAAP,CAAa,8CAA8ClB,KAAI,CAACC,MAAL,CAAYC,QAAvE,EAAiFgB,KAAjF;;YACA,IAAIA,KAAK,CAACiB,IAAN,KAAe,GAAnB,EAAwB;cACpB,OAAOrC,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBiB,0BAApC,EAAgE,uDAAhE,CAAD,CAAb;YACH,CAFD,MAEO;cACH,OAAOtC,MAAM,CAACoB,KAAD,CAAb;YACH;UACJ,CAPD,MAOO;YACH,OAAOd,iBAAiB,CAAC,IAAD,CAAxB;UACH;QACJ,CAdL;MAgBH;IACJ,CAhFM,CAAP;EAiFH,CAlFD;EAqFA;;;;;;;;;;EAQAX,8CAAiB4C,SAAjB,EAAoCC,OAApC,EAAyE;IAAzE;;IACI,OAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;MAC/BX,MAAM,CAACY,IAAP,CAAY,2CAA2CsC,SAA3C,GAAuD,aAAvD,GAAuErC,KAAI,CAACC,MAAL,CAAYC,QAA/F;;MACAF,KAAI,CAACC,MAAL,CAAYU,OAAZ,CAAoBqB,QAApB,CAA6BC,WAA7B,CACI,wBADJ,EAEI;QAAE/B,QAAQ,EAAEF,KAAI,CAACC,MAAL,CAAYC,QAAxB;QAAkCmC,SAAS;MAA3C,CAFJ,EAGI,UAACnB,KAAD,EAAQgB,QAAR,EAAgB;QACZ,IAAIhB,KAAJ,EAAW;UACP/B,MAAM,CAAC+B,KAAP,CAAa,iDAAiDmB,SAAjD,GAA6D,aAA7D,GAA6ErC,KAAI,CAACC,MAAL,CAAYC,QAAtG,EAAgHgB,KAAhH;;UACA,IAAIA,KAAK,CAACiB,IAAN,KAAe,GAAnB,EAAwB;YACpB,OAAOrC,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBiB,0BAApC,EAAgE,2DAAhE,CAAD,CAAb;UACH,CAFD,MAEO;YACH,OAAOtC,MAAM,CAACoB,KAAD,CAAb;UACH;QACJ,CAPD,MAOO;UACHlB,KAAI,CAACuC,QAAL,CAAcC,GAAd,CAAkBH,SAAlB,EAA6BC,OAA7B;;UACAnD,MAAM,CAACY,IAAP,CAAY,oCAAoCsC,SAApC,GAAgD,kCAAhD,GAAqFrC,KAAI,CAACC,MAAL,CAAYC,QAA7G;UACA,OAAOL,OAAO,EAAd;QACH;MACJ,CAhBL;IAkBH,CApBM,CAAP;EAqBH,CAtBD;EAyBA;;;;;;;;;EAOAJ,iDAAoB4C,SAApB,EAAqC;IAArC;;IACI,OAAO,IAAIzC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;MAC/BX,MAAM,CAACY,IAAP,CAAY,6CAA6CsC,SAA7C,GAAyD,aAAzD,GAAyErC,KAAI,CAACC,MAAL,CAAYC,QAAjG;;MACAF,KAAI,CAACC,MAAL,CAAYU,OAAZ,CAAoBqB,QAApB,CAA6BC,WAA7B,CACI,2BADJ,EAEI;QAAE/B,QAAQ,EAAEF,KAAI,CAACC,MAAL,CAAYC,QAAxB;QAAkCmC,SAAS;MAA3C,CAFJ,EAGI,UAACnB,KAAD,EAAQgB,QAAR,EAAgB;QACZ,IAAIhB,KAAJ,EAAW;UACP/B,MAAM,CAAC+B,KAAP,CAAa,mDAAmDmB,SAAnD,GAA+D,aAA/D,GAA+ErC,KAAI,CAACC,MAAL,CAAYC,QAAxG,EAAkHgB,KAAlH;;UACA,IAAIA,KAAK,CAACiB,IAAN,KAAe,GAAnB,EAAwB;YACpB,OAAOrC,MAAM,CAAC,IAAIqB,6BAAJ,CAAkBA,kCAAkBiB,0BAApC,EAAgE,2DAAhE,CAAD,CAAb;UACH,CAFD,MAEO;YACH,OAAOtC,MAAM,CAACoB,KAAD,CAAb;UACH;QACJ,CAPD,MAOO;UACHlB,KAAI,CAACuC,QAAL,CAAcE,MAAd,CAAqBJ,SAArB;;UACAlD,MAAM,CAACY,IAAP,CAAY,oCAAoCsC,SAApC,GAAgD,kCAAhD,GAAqFrC,KAAI,CAACC,MAAL,CAAYC,QAA7G;UACA,OAAOL,OAAO,EAAd;QACH;MACJ,CAhBL;IAkBH,CApBM,CAAP;EAqBH,CAtBD;;EAwBJ;AAAC,CA/MD;;AAAa6C","names":["logger","OpenViduLogger_1","getInstance","type","options","Map","Filter","method","params","Promise","resolve","reject","info","_this","stream","streamId","finalParams","successExecMethod","oldValue","Object","assign","filter","lastExecMethod","triggerEvent","session","emitEvent","StreamPropertyChangedEvent_1","streamManager","startsWith","JSON","parse","error","OpenViduError_1","VIRTUAL_BACKGROUND_ERROR","virtualBackgroundSinkElements","_a","VB","updateValues","then","catch","name","message","stringParams","stringify","errorMsg","openvidu","sendRequest","response","code","OPENVIDU_PERMISSION_DENIED","eventType","handler","handlers","set","delete","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenVidu\\Filter.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Stream } from './Stream';\nimport { FilterEvent } from '../OpenViduInternal/Events/FilterEvent';\nimport { StreamPropertyChangedEvent } from '../OpenViduInternal/Events/StreamPropertyChangedEvent';\nimport { OpenViduError, OpenViduErrorName } from '../OpenViduInternal/Enums/OpenViduError';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See [[Stream.applyFilter]]\n */\nexport class Filter {\n\n    /**\n     * Type of filter applied. This is the name of the remote class identifying the filter to apply in Kurento Media Server.\n     * For example: `\"FaceOverlayFilter\"`, `\"GStreamerFilter\"`.\n     *\n     * You can get this property in `*.kmd.json` files defining the Kurento filters. For example, for GStreamerFilter that's\n     * [here](https://github.com/Kurento/kms-filters/blob/53a452fac71d61795952e3d2202156c6b00f6d65/src/server/interface/filters.GStreamerFilter.kmd.json#L4)\n     */\n    type: string;\n\n    /**\n     * Parameters used to initialize the filter.\n     * These correspond to the constructor parameters used in the filter in Kurento Media Server (except for `mediaPipeline` parameter, which is never needed).\n     *\n     * For example: for `filter.type = \"GStreamerFilter\"` could be `filter.options = {\"command\": \"videobalance saturation=0.0\"}`\n     *\n     * You can get this property in `*.kmd.json` files defining the Kurento filters. For example, for GStreamerFilter that's\n     * [here](https://github.com/Kurento/kms-filters/blob/53a452fac71d61795952e3d2202156c6b00f6d65/src/server/interface/filters.GStreamerFilter.kmd.json#L13-L31)\n     */\n    options: Object;\n\n    /**\n     * Value passed the last time [[Filter.execMethod]] was called. If `undefined` this method has not been called yet.\n     *\n     * You can use this value to know the current status of any applied filter\n     */\n    lastExecMethod?: {\n        method: string, params: Object\n    };\n\n    /**\n     * @hidden\n     */\n    handlers: Map<string, (event: FilterEvent) => void> = new Map();\n\n    /**\n     * @hidden\n     */\n    stream: Stream;\n    private logger: OpenViduLogger;\n\n\n    /**\n     * @hidden\n     */\n    constructor(type: string, options: Object) {\n        this.type = type;\n        this.options = options;\n    }\n\n\n    /**\n     * Executes a filter method. Available methods are specific for each filter\n     *\n     * @param method Name of the method\n     * @param params Parameters of the method\n     */\n    execMethod(method: string, params: Object): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            logger.info('Executing filter method to stream ' + this.stream.streamId);\n\n            let finalParams;\n\n            const successExecMethod = triggerEvent => {\n                logger.info('Filter method successfully executed on Stream ' + this.stream.streamId);\n                const oldValue = (<any>Object).assign({}, this.stream.filter);\n                this.stream.filter!.lastExecMethod = { method, params: finalParams };\n                if (triggerEvent) {\n                    this.stream.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent(this.stream.session, this.stream, 'filter', this.stream.filter!, oldValue, 'execFilterMethod')]);\n                    this.stream.streamManager.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent(this.stream.streamManager, this.stream, 'filter', this.stream.filter!, oldValue, 'execFilterMethod')]);\n                }\n                return resolve();\n            }\n\n            if (this.type.startsWith('VB:')) {\n\n                if (typeof params === 'string') {\n                    try {\n                        params = JSON.parse(params);\n                    } catch (error) {\n                        return reject(new OpenViduError(OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Wrong params syntax: ' + error));\n                    }\n                }\n\n                finalParams = params;\n\n                if (method === 'update') {\n                    if (!this.stream.virtualBackgroundSinkElements?.VB) {\n                        return reject(new OpenViduError(OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'There is no Virtual Background filter applied'));\n                    } else {\n                        this.stream.virtualBackgroundSinkElements.VB.updateValues(params)\n                            .then(() => successExecMethod(false))\n                            .catch(error => {\n                                if (error.name === OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR) {\n                                    return reject(new OpenViduError(error.name, error.message));\n                                } else {\n                                    return reject(new OpenViduError(OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Error updating values on Virtual Background filter: ' + error));\n                                }\n                            });\n                    }\n                } else {\n                    return reject(new OpenViduError(OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, `Unknown Virtual Background method \"${method}\"`));\n                }\n            } else {\n\n                let stringParams;\n                if (typeof params !== 'string') {\n                    try {\n                        stringParams = JSON.stringify(params);\n                    } catch (error) {\n                        const errorMsg = \"'params' property must be a JSON formatted object\";\n                        logger.error(errorMsg);\n                        return reject(errorMsg);\n                    }\n                } else {\n                    stringParams = <string>params;\n                }\n\n                finalParams = stringParams;\n\n                this.stream.session.openvidu.sendRequest(\n                    'execFilterMethod',\n                    { streamId: this.stream.streamId, method, params: stringParams },\n                    (error, response) => {\n                        if (error) {\n                            logger.error('Error executing filter method for Stream ' + this.stream.streamId, error);\n                            if (error.code === 401) {\n                                return reject(new OpenViduError(OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n                            } else {\n                                return reject(error);\n                            }\n                        } else {\n                            return successExecMethod(true);\n                        }\n                    }\n                );\n            }\n        });\n    }\n\n\n    /**\n     * Subscribe to certain filter event. Available events are specific for each filter\n     *\n     * @param eventType Event to which subscribe to.\n     * @param handler Function to execute upon event dispatched. It receives as parameter a [[FilterEvent]] object\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n     */\n    addEventListener(eventType: string, handler: (event: FilterEvent) => void): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + this.stream.streamId);\n            this.stream.session.openvidu.sendRequest(\n                'addFilterEventListener',\n                { streamId: this.stream.streamId, eventType },\n                (error, response) => {\n                    if (error) {\n                        logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + this.stream.streamId, error);\n                        if (error.code === 401) {\n                            return reject(new OpenViduError(OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                        } else {\n                            return reject(error);\n                        }\n                    } else {\n                        this.handlers.set(eventType, handler);\n                        logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + this.stream.streamId);\n                        return resolve();\n                    }\n                }\n            );\n        });\n    }\n\n\n    /**\n     * Removes certain filter event listener previously set.\n     *\n     * @param eventType Event to unsubscribe from.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n     */\n    removeEventListener(eventType: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + this.stream.streamId);\n            this.stream.session.openvidu.sendRequest(\n                'removeFilterEventListener',\n                { streamId: this.stream.streamId, eventType },\n                (error, response) => {\n                    if (error) {\n                        logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + this.stream.streamId, error);\n                        if (error.code === 401) {\n                            return reject(new OpenViduError(OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                        } else {\n                            return reject(error);\n                        }\n                    } else {\n                        this.handlers.delete(eventType);\n                        logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + this.stream.streamId);\n                        return resolve();\n                    }\n                }\n            );\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"script"}