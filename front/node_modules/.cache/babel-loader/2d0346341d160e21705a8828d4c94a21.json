{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebRtcPeerSendrecv = exports.WebRtcPeerSendonly = exports.WebRtcPeerRecvonly = exports.WebRtcPeer = void 0;\n\nvar freeice = require(\"freeice\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar ExceptionEvent_1 = require(\"../Events/ExceptionEvent\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n\nvar Platform_1 = require(\"../Utils/Platform\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\n\nvar platform;\n\nvar WebRtcPeer =\n/** @class */\nfunction () {\n  function WebRtcPeer(configuration) {\n    var _this = this;\n\n    this.remoteCandidatesQueue = [];\n    this.localCandidatesQueue = [];\n    this.iceCandidateList = [];\n    this.candidategatheringdone = false;\n    platform = Platform_1.PlatformUtils.getInstance();\n    this.configuration = __assign(__assign({}, configuration), {\n      iceServers: !!configuration.iceServers && configuration.iceServers.length > 0 ? configuration.iceServers : freeice(),\n      mediaStream: configuration.mediaStream !== undefined ? configuration.mediaStream : null,\n      mode: !!configuration.mode ? configuration.mode : \"sendrecv\",\n      id: !!configuration.id ? configuration.id : this.generateUniqueId()\n    }); // prettier-ignore\n\n    logger.debug(\"[WebRtcPeer] configuration:\\n\".concat(JSON.stringify(this.configuration, null, 2)));\n    this.pc = new RTCPeerConnection({\n      iceServers: this.configuration.iceServers\n    });\n    this.pc.addEventListener(\"icecandidate\", function (event) {\n      if (event.candidate !== null) {\n        // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n        //\n        // But in practice, it is actually an RTCIceCandidateInit that can be used to\n        // obtain a proper candidate, using the RTCIceCandidate constructor:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n        var candidateInit = event.candidate;\n        var iceCandidate = new RTCIceCandidate(candidateInit);\n\n        _this.configuration.onIceCandidate(iceCandidate);\n\n        if (iceCandidate.candidate !== '') {\n          _this.localCandidatesQueue.push(iceCandidate);\n        }\n      }\n    });\n    this.pc.addEventListener('signalingstatechange', function () {\n      if (_this.pc.signalingState === 'stable') {\n        // SDP Offer/Answer finished. Add stored remote candidates.\n        while (_this.iceCandidateList.length > 0) {\n          var candidate = _this.iceCandidateList.shift();\n\n          _this.pc.addIceCandidate(candidate);\n        }\n      }\n    });\n  }\n\n  WebRtcPeer.prototype.getId = function () {\n    return this.configuration.id;\n  };\n  /**\n   * This method frees the resources used by WebRtcPeer\n   */\n\n\n  WebRtcPeer.prototype.dispose = function () {\n    logger.debug('Disposing WebRtcPeer');\n\n    if (this.pc) {\n      if (this.pc.signalingState === 'closed') {\n        return;\n      }\n\n      this.pc.close();\n      this.remoteCandidatesQueue = [];\n      this.localCandidatesQueue = [];\n    }\n  }; // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n  // Transceivers, and instead depend on the deprecated\n  // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n\n\n  WebRtcPeer.prototype.createOfferLegacy = function () {\n    if (!!this.configuration.mediaStream) {\n      this.deprecatedPeerConnectionTrackApi();\n    }\n\n    var hasAudio = this.configuration.mediaConstraints.audio;\n    var hasVideo = this.configuration.mediaConstraints.video;\n    var options = {\n      offerToReceiveAudio: this.configuration.mode !== \"sendonly\" && hasAudio,\n      offerToReceiveVideo: this.configuration.mode !== \"sendonly\" && hasVideo\n    };\n    logger.debug(\"[createOfferLegacy] RTCPeerConnection.createOffer() options:\", JSON.stringify(options));\n    return this.pc.createOffer(options);\n  };\n  /**\n   * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n   * Only if the negotiation was initiated by this peer.\n   */\n\n\n  WebRtcPeer.prototype.createOffer = function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, _j, track, tcInit, trackSettings, trackConsts, trackWidth, trackHeight, trackPixels, maxLayers, l, layerDiv, encoding, tc, sendParams, needSetParams, error_1, message, _k, _l, kind, sdpOffer, error_2, message;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if (!(\"addTransceiver\" in this.pc)) {\n              logger.warn(\"[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}\");\n              return [2\n              /*return*/\n              , this.createOfferLegacy()];\n            } else {\n              logger.debug(\"[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it\");\n            }\n\n            if (!(this.configuration.mode !== \"recvonly\")) return [3\n            /*break*/\n            , 7]; // To send media, assume that all desired media tracks have been\n            // already added by higher level code to our MediaStream.\n\n            if (!this.configuration.mediaStream) {\n              throw new Error(\"[WebRtcPeer.createOffer] Direction is '\".concat(this.configuration.mode, \"', but no stream was configured to be sent\"));\n            }\n\n            _i = 0, _j = this.configuration.mediaStream.getTracks();\n            _m.label = 1;\n\n          case 1:\n            if (!(_i < _j.length)) return [3\n            /*break*/\n            , 6];\n            track = _j[_i];\n            tcInit = {\n              direction: this.configuration.mode,\n              streams: [this.configuration.mediaStream]\n            };\n\n            if (track.kind === \"video\" && this.configuration.simulcast) {\n              trackSettings = track.getSettings();\n              trackConsts = track.getConstraints();\n              trackWidth = (_c = (_b = (_a = trackSettings.width) !== null && _a !== void 0 ? _a : trackConsts.width.ideal) !== null && _b !== void 0 ? _b : trackConsts.width) !== null && _c !== void 0 ? _c : 0;\n              trackHeight = (_f = (_e = (_d = trackSettings.height) !== null && _d !== void 0 ? _d : trackConsts.height.ideal) !== null && _e !== void 0 ? _e : trackConsts.height) !== null && _f !== void 0 ? _f : 0;\n              logger.info(\"[createOffer] Video track dimensions: \".concat(trackWidth, \"x\").concat(trackHeight));\n              trackPixels = trackWidth * trackHeight;\n              maxLayers = 0;\n\n              if (trackPixels >= 960 * 540) {\n                maxLayers = 3;\n              } else if (trackPixels >= 480 * 270) {\n                maxLayers = 2;\n              } else {\n                maxLayers = 1;\n              }\n\n              tcInit.sendEncodings = [];\n\n              for (l = 0; l < maxLayers; l++) {\n                layerDiv = Math.pow(2, maxLayers - l - 1);\n                encoding = {\n                  rid: \"rdiv\" + layerDiv.toString(),\n                  // @ts-ignore -- Property missing from DOM types.\n                  scalabilityMode: \"L1T1\"\n                };\n\n                if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                  // Prioritize best resolution, for maximum picture detail.\n                  encoding.scaleResolutionDownBy = 1.0; // @ts-ignore -- Property missing from DOM types.\n\n                  encoding.maxFramerate = Math.floor(30 / layerDiv);\n                } else {\n                  encoding.scaleResolutionDownBy = layerDiv;\n                }\n\n                tcInit.sendEncodings.push(encoding);\n              }\n            }\n\n            tc = this.pc.addTransceiver(track, tcInit);\n            if (!(track.kind === \"video\")) return [3\n            /*break*/\n            , 5];\n            sendParams = tc.sender.getParameters();\n            needSetParams = false;\n\n            if (!((_g = sendParams.degradationPreference) === null || _g === void 0 ? void 0 : _g.length)) {\n              // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n              // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n              if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                sendParams.degradationPreference = \"maintain-resolution\";\n              } else {\n                sendParams.degradationPreference = \"balanced\";\n              }\n\n              logger.info(\"[createOffer] Video sender Degradation Preference set: \".concat(sendParams.degradationPreference)); // FIXME: Firefox implements degradationPreference on each individual encoding!\n              // (set it on every element of the sendParams.encodings array)\n\n              needSetParams = true;\n            } // FIXME: Check that the simulcast encodings were applied.\n            // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n            // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n            //\n            // This next block can be deleted when Firefox fixes bug #1396918:\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n            //\n            // NOTE: This is done in a way that is compatible with all browsers, to save on\n            // browser-conditional code. The idea comes from WebRTC Adapter.js:\n            // * https://github.com/webrtcHacks/adapter/issues/998\n            // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n\n\n            if (this.configuration.simulcast) {\n              if (((_h = sendParams.encodings) === null || _h === void 0 ? void 0 : _h.length) !== tcInit.sendEncodings.length) {\n                sendParams.encodings = tcInit.sendEncodings;\n                needSetParams = true;\n              }\n            }\n\n            if (!needSetParams) return [3\n            /*break*/\n            , 5];\n            logger.debug(\"[createOffer] Setting new RTCRtpSendParameters to video sender\");\n            _m.label = 2;\n\n          case 2:\n            _m.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , tc.sender.setParameters(sendParams)];\n\n          case 3:\n            _m.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender\";\n\n            if (error_1 instanceof Error) {\n              message += \": \".concat(error_1.message);\n            }\n\n            throw new Error(message);\n\n          case 5:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // To just receive media, create new recvonly transceivers.\n            for (_k = 0, _l = [\"audio\", \"video\"]; _k < _l.length; _k++) {\n              kind = _l[_k]; // Check if the media kind should be used.\n\n              if (!this.configuration.mediaConstraints[kind]) {\n                continue;\n              }\n\n              this.configuration.mediaStream = new MediaStream();\n              this.pc.addTransceiver(kind, {\n                direction: this.configuration.mode,\n                streams: [this.configuration.mediaStream]\n              });\n            }\n\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , this.pc.createOffer()];\n\n          case 9:\n            sdpOffer = _m.sent();\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            error_2 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Browser failed creating an SDP Offer\";\n\n            if (error_2 instanceof Error) {\n              message += \": \".concat(error_2.message);\n            }\n\n            throw new Error(message);\n\n          case 11:\n            return [2\n            /*return*/\n            , sdpOffer];\n        }\n      });\n    });\n  };\n\n  WebRtcPeer.prototype.deprecatedPeerConnectionTrackApi = function () {\n    for (var _i = 0, _a = this.configuration.mediaStream.getTracks(); _i < _a.length; _i++) {\n      var track = _a[_i];\n      this.pc.addTrack(track, this.configuration.mediaStream);\n    }\n  };\n  /**\n   * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n   * Only if the negotiation was initiated by the other peer\n   */\n\n\n  WebRtcPeer.prototype.createAnswer = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      // TODO: Delete this conditional when all supported browsers are\n      // modern enough to implement the Transceiver methods.\n      if (\"getTransceivers\" in _this.pc) {\n        logger.debug(\"[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it\");\n\n        var _loop_1 = function _loop_1(kind) {\n          // Check if the media kind should be used.\n          if (!_this.configuration.mediaConstraints[kind]) {\n            return \"continue\";\n          }\n\n          var tc = _this.pc.getTransceivers().find(function (tc) {\n            return tc.receiver.track.kind === kind;\n          });\n\n          if (tc) {\n            // Enforce our desired direction.\n            tc.direction = _this.configuration.mode;\n          } else {\n            return {\n              value: reject(new Error(\"\".concat(kind, \" requested, but no transceiver was created from remote description\")))\n            };\n          }\n        }; // Ensure that the PeerConnection already contains one Transceiver\n        // for each kind of media.\n        // The Transceivers should have been already created internally by\n        // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n\n\n        for (var _i = 0, _a = [\"audio\", \"video\"]; _i < _a.length; _i++) {\n          var kind = _a[_i];\n\n          var state_1 = _loop_1(kind);\n\n          if (typeof state_1 === \"object\") return state_1.value;\n        }\n\n        _this.pc.createAnswer().then(function (sdpAnswer) {\n          return resolve(sdpAnswer);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      } else {\n        // TODO: Delete else branch when all supported browsers are\n        // modern enough to implement the Transceiver methods\n        var offerAudio = void 0,\n            offerVideo = true;\n\n        if (!!_this.configuration.mediaConstraints) {\n          offerAudio = typeof _this.configuration.mediaConstraints.audio === 'boolean' ? _this.configuration.mediaConstraints.audio : true;\n          offerVideo = typeof _this.configuration.mediaConstraints.video === 'boolean' ? _this.configuration.mediaConstraints.video : true;\n          var constraints = {\n            offerToReceiveAudio: offerAudio,\n            offerToReceiveVideo: offerVideo\n          };\n\n          _this.pc.createAnswer(constraints).then(function (sdpAnswer) {\n            return resolve(sdpAnswer);\n          }).catch(function (error) {\n            return reject(error);\n          });\n        }\n      } // else, there is nothing to do; the legacy createAnswer() options do\n      // not offer any control over which tracks are included in the answer.\n\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processLocalOffer = function (offer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.pc.setLocalDescription(offer).then(function () {\n        var localDescription = _this.pc.localDescription;\n\n        if (!!localDescription) {\n          logger.debug('Local description set', localDescription.sdp);\n          return resolve();\n        } else {\n          return reject('Local description is not defined');\n        }\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processRemoteOffer = function (sdpOffer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var offer = {\n        type: 'offer',\n        sdp: sdpOffer\n      };\n      logger.debug('SDP offer received, setting remote description', offer);\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n\n      _this.setRemoteDescription(offer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processLocalAnswer = function (answer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('SDP answer created, setting local description');\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set local description');\n      }\n\n      _this.pc.setLocalDescription(answer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processRemoteAnswer = function (sdpAnswer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var answer = {\n        type: 'answer',\n        sdp: sdpAnswer\n      };\n      logger.debug('SDP answer received, setting remote description');\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n\n      _this.setRemoteDescription(answer).then(function () {\n        // DEBUG: Uncomment for details.\n        // {\n        //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n        //     // prettier-ignore\n        //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n        // }\n        resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  WebRtcPeer.prototype.setRemoteDescription = function (sdp) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pc.setRemoteDescription(sdp)];\n      });\n    });\n  };\n  /**\n   * Callback function invoked when an ICE candidate is received\n   */\n\n\n  WebRtcPeer.prototype.addIceCandidate = function (iceCandidate) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('Remote ICE candidate received', iceCandidate);\n\n      _this.remoteCandidatesQueue.push(iceCandidate);\n\n      switch (_this.pc.signalingState) {\n        case 'closed':\n          reject(new Error('PeerConnection object is closed'));\n          break;\n\n        case 'stable':\n          if (!!_this.pc.remoteDescription) {\n            _this.pc.addIceCandidate(iceCandidate).then(function () {\n              return resolve();\n            }).catch(function (error) {\n              return reject(error);\n            });\n          } else {\n            _this.iceCandidateList.push(iceCandidate);\n\n            resolve();\n          }\n\n          break;\n\n        default:\n          _this.iceCandidateList.push(iceCandidate);\n\n          resolve();\n      }\n    });\n  };\n\n  WebRtcPeer.prototype.addIceConnectionStateChangeListener = function (otherId) {\n    var _this = this;\n\n    this.pc.addEventListener('iceconnectionstatechange', function () {\n      var iceConnectionState = _this.pc.iceConnectionState;\n\n      switch (iceConnectionState) {\n        case 'disconnected':\n          // Possible network disconnection\n          var msg1 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"disconnected\". Possible network disconnection';\n          logger.warn(msg1);\n\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n\n          break;\n\n        case 'failed':\n          var msg2 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') to \"failed\"';\n          logger.error(msg2);\n\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n\n          break;\n\n        case 'closed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"closed\"');\n          break;\n\n        case 'new':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"new\"');\n          break;\n\n        case 'checking':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"checking\"');\n          break;\n\n        case 'connected':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"connected\"');\n          break;\n\n        case 'completed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"completed\"');\n          break;\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  WebRtcPeer.prototype.generateUniqueId = function () {\n    return (0, uuid_1.v4)();\n  };\n\n  return WebRtcPeer;\n}();\n\nexports.WebRtcPeer = WebRtcPeer;\n\nvar WebRtcPeerRecvonly =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerRecvonly, _super);\n\n  function WebRtcPeerRecvonly(configuration) {\n    var _this = this;\n\n    configuration.mode = 'recvonly';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerRecvonly;\n}(WebRtcPeer);\n\nexports.WebRtcPeerRecvonly = WebRtcPeerRecvonly;\n\nvar WebRtcPeerSendonly =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerSendonly, _super);\n\n  function WebRtcPeerSendonly(configuration) {\n    var _this = this;\n\n    configuration.mode = 'sendonly';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerSendonly;\n}(WebRtcPeer);\n\nexports.WebRtcPeerSendonly = WebRtcPeerSendonly;\n\nvar WebRtcPeerSendrecv =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerSendrecv, _super);\n\n  function WebRtcPeerSendrecv(configuration) {\n    var _this = this;\n\n    configuration.mode = 'sendrecv';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerSendrecv;\n}(WebRtcPeer);\n\nexports.WebRtcPeerSendrecv = WebRtcPeerSendrecv;","map":null,"metadata":{},"sourceType":"script"}