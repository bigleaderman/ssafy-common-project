{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connection = void 0;\n\nvar Stream_1 = require(\"./Stream\");\n\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n\nvar ExceptionEvent_1 = require(\"../OpenViduInternal/Events/ExceptionEvent\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each [[Session]] and [[Stream]] object has an attribute of type Connection\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function Connection(session, connectionOptions) {\n    this.session = session;\n    /**\n     * @hidden\n     */\n\n    this.disposed = false;\n    var msg = \"'Connection' created \";\n\n    if (!!connectionOptions.role) {\n      // Connection is local\n      this.localOptions = connectionOptions;\n      this.connectionId = this.localOptions.id;\n      this.creationTime = this.localOptions.createdAt;\n      this.data = this.localOptions.metadata;\n      this.rpcSessionId = this.localOptions.sessionId;\n      this.role = this.localOptions.role;\n      this.record = this.localOptions.record;\n      msg += '(local)';\n    } else {\n      // Connection is remote\n      this.remoteOptions = connectionOptions;\n      this.connectionId = this.remoteOptions.id;\n      this.creationTime = this.remoteOptions.createdAt;\n\n      if (this.remoteOptions.metadata) {\n        this.data = this.remoteOptions.metadata;\n      }\n\n      if (this.remoteOptions.streams) {\n        this.initRemoteStreams(this.remoteOptions.streams);\n      }\n\n      msg += \"(remote) with 'connectionId' [\" + this.remoteOptions.id + ']';\n    }\n\n    logger.info(msg);\n  }\n  /* Hidden methods */\n\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.sendIceCandidate = function (candidate) {\n    var _this = this;\n\n    logger.debug((!!this.stream.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' + this.connectionId, candidate);\n    this.session.openvidu.sendRequest('onIceCandidate', {\n      endpointName: this.connectionId,\n      candidate: candidate.candidate,\n      sdpMid: candidate.sdpMid,\n      sdpMLineIndex: candidate.sdpMLineIndex\n    }, function (error, response) {\n      if (error) {\n        logger.error('Error sending ICE candidate: ' + JSON.stringify(error));\n\n        _this.session.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(_this.session, ExceptionEvent_1.ExceptionEventName.ICE_CANDIDATE_ERROR, _this.session, \"There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side\", error)]);\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.initRemoteStreams = function (options) {\n    var _this = this; // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n    // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n\n\n    options.forEach(function (opts) {\n      var streamOptions = {\n        id: opts.id,\n        createdAt: opts.createdAt,\n        connection: _this,\n        hasAudio: opts.hasAudio,\n        hasVideo: opts.hasVideo,\n        audioActive: opts.audioActive,\n        videoActive: opts.videoActive,\n        typeOfVideo: opts.typeOfVideo,\n        frameRate: opts.frameRate,\n        videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n        filter: !!opts.filter ? opts.filter : undefined\n      };\n      var stream = new Stream_1.Stream(_this.session, streamOptions);\n\n      _this.addStream(stream);\n    });\n    logger.info(\"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ', this.stream.inboundStreamOpts);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.addStream = function (stream) {\n    stream.connection = this;\n    this.stream = stream;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.removeStream = function (streamId) {\n    delete this.stream;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Connection.prototype.dispose = function () {\n    if (!!this.stream) {\n      delete this.stream;\n    }\n\n    this.disposed = true;\n  };\n\n  return Connection;\n}();\n\nexports.Connection = Connection;","map":null,"metadata":{},"sourceType":"script"}