{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamManagerEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Triggered by:\n * - [[streamPlaying]]\n * - [[streamAudioVolumeChange]]\n */\n\n\nvar StreamManagerEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamManagerEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamManagerEvent(target, type, value) {\n    var _this = _super.call(this, false, target, type) || this;\n\n    _this.value = value;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  StreamManagerEvent.prototype.callDefaultBehavior = function () {};\n\n  return StreamManagerEvent;\n}(Event_1.Event);\n\nexports.StreamManagerEvent = StreamManagerEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAGA;;;;;;;AAKA;AAAA;AAAA;EAAwCA;EAWpC;;;;;EAGA,4BAAYC,MAAZ,EAAmCC,IAAnC,EAAiDC,KAAjD,EAA0E;IAA1E,YACIC,kBAAM,KAAN,EAAaH,MAAb,EAAqBC,IAArB,KAA0B,IAD9B;;IAEIG,KAAI,CAACF,KAAL,GAAaA,KAAb;;EACH;EAED;;;EAGA;;;EACAG,gEAAyB,CAAzB;;EAEJ;AAAC,CAzBD,CAAwCC,aAAxC;;AAAaC","names":["__extends","target","type","value","_super","_this","StreamManagerEvent","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\StreamManagerEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { StreamManager } from '../../OpenVidu/StreamManager';\n\n/**\n * Triggered by:\n * - [[streamPlaying]]\n * - [[streamAudioVolumeChange]]\n */\nexport class StreamManagerEvent extends Event {\n\n    /**\n     * For `streamAudioVolumeChange` event:\n     * - `{newValue: number, oldValue: number}`: new and old audio volume values. These values are between -100 (silence) and 0 (loudest possible volume).\n     * They are not exact and depend on how the browser is managing the audio track, but -100 and 0 can be taken as limit values.\n     * \n     * For `streamPlaying` event undefined\n     */\n    value: Object | undefined;\n\n    /**\n     * @hidden\n     */\n    constructor(target: StreamManager, type: string, value: Object | undefined) {\n        super(false, target, type);\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n\n}"]},"metadata":{},"sourceType":"script"}