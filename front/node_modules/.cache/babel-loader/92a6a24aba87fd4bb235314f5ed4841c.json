{"ast":null,"code":"var _jsxFileName = \"C:\\\\SSAFY\\\\2nd semester\\\\S07P12D106\\\\front\\\\src\\\\components\\\\GameRoomPageCom\\\\AllCam.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { OpenVidu } from \"openvidu-browser\";\nimport axios from \"axios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser } from \"../../redux/slice/UserSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AllCam() {\n  _s();\n\n  let OV, session, mySession;\n  let ovToken;\n  let roomNum = 60;\n  const currentUser = useSelector(selectUser);\n\n  joinSession = async () => {\n    OV = new OpenVidu();\n    session = OV.initSession();\n    mySession = session;\n    mySession.on(\"streamCreated\", event => {\n      // Subscribe to the Stream to receive it. Second parameter is undefined\n      // so OpenVidu doesn't create an HTML video by its own\n      var subscriber = mySession.subscribe(event.stream, undefined);\n      var subscribers = this.state.subscribers;\n      subscribers.push(subscriber); // Update the state with the new subscribers\n\n      this.setState({\n        subscribers: subscribers\n      });\n    });\n    mySession.on(\"streamDestroyed\", event => {\n      // Remove the stream from 'subscribers' array\n      this.deleteSubscriber(event.stream.streamManager);\n    }); // On every asynchronous exception...\n\n    mySession.on(\"exception\", exception => {\n      console.warn(exception);\n    });\n    await axios({\n      url: `https://i7d106.p.ssafy.io:8080/api/room/${roomNum}/video-token`,\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accessToken: `Bearer ${currentUser.accessToken}`\n      }\n    }).then(_ref => {\n      let {\n        data\n      } = _ref;\n      ovToken = data;\n    }).catch(err => {\n      console.log(err);\n    });\n    await mySession.connect(ovToken, {\n      clientData: currentUser.nickname\n    }.then(async () => {\n      var devices = await OV.getDevices();\n      var videoDevices = devices.filter(device => device.kind === \"videoinput\"); // --- 5) Get your own camera stream ---\n      // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n      // element: we will manage it on our own) and with the desired properties\n\n      let publisher = OV.initPublisher(undefined, {\n        audioSource: undefined,\n        // The source of audio. If undefined default microphone\n        videoSource: videoDevices[0].deviceId,\n        // The source of video. If undefined default webcam\n        publishAudio: true,\n        // Whether you want to start publishing with your audio unmuted or not\n        publishVideo: true,\n        // Whether you want to start publishing with your video enabled or not\n        resolution: \"640x480\",\n        // The resolution of your video\n        frameRate: 30,\n        // The frame rate of your video\n        insertMode: \"APPEND\",\n        // How the video is inserted in the target element 'video-container'\n        mirror: false // Whether to mirror your local video or not\n\n      }); // --- 6) Publish your stream ---\n\n      mySession.publish(publisher); // Set the main video in the page to display our webcam and store our Publisher\n\n      this.setState({\n        currentVideoDevice: videoDevices[0],\n        mainStreamManager: publisher,\n        publisher: publisher\n      });\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this) // <Grid container spacing={2}>\n  //   <Grid item xs={4}>\n  //     <Grid>\n  //     </Grid>\n  //     <Grid>cam4</Grid>\n  //     <Grid>cam6</Grid>\n  //   </Grid>\n  //   <Grid item xs={4}>\n  //     <Grid>cam2</Grid>\n  //     <Grid>empty</Grid>\n  //     <Grid>cam7</Grid>\n  //   </Grid>\n  //   <Grid item xs={4}>\n  //     <Grid>cam3</Grid>\n  //     <Grid>cam5</Grid>\n  //     <Grid>cam8</Grid>\n  //   </Grid>\n  // </Grid>\n  ;\n}\n\n_s(AllCam, \"lZdPyK/MobwtETtTACdKAch84Kw=\", false, function () {\n  return [useSelector];\n});\n\n_c = AllCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCam\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Grid","OpenVidu","axios","useSelector","useDispatch","selectUser","AllCam","OV","session","mySession","ovToken","roomNum","currentUser","joinSession","initSession","on","event","subscriber","subscribe","stream","undefined","subscribers","state","push","setState","deleteSubscriber","streamManager","exception","console","warn","url","method","headers","accessToken","then","data","catch","err","log","connect","clientData","nickname","devices","getDevices","videoDevices","filter","device","kind","publisher","initPublisher","audioSource","videoSource","deviceId","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","publish","currentVideoDevice","mainStreamManager"],"sources":["C:/SSAFY/2nd semester/S07P12D106/front/src/components/GameRoomPageCom/AllCam.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { OpenVidu } from \"openvidu-browser\";\r\nimport axios from \"axios\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectUser } from \"../../redux/slice/UserSlice\";\r\n\r\nexport default function AllCam() {\r\n  let OV, session, mySession;\r\n  let ovToken;\r\n  let roomNum = 60;\r\n  const currentUser = useSelector(selectUser);\r\n  joinSession = async () => {\r\n    OV = new OpenVidu();\r\n    session = OV.initSession();\r\n    mySession = session;\r\n\r\n    mySession.on(\"streamCreated\", (event) => {\r\n      // Subscribe to the Stream to receive it. Second parameter is undefined\r\n      // so OpenVidu doesn't create an HTML video by its own\r\n      var subscriber = mySession.subscribe(event.stream, undefined);\r\n      var subscribers = this.state.subscribers;\r\n      subscribers.push(subscriber);\r\n\r\n      // Update the state with the new subscribers\r\n      this.setState({\r\n        subscribers: subscribers,\r\n      });\r\n    });\r\n\r\n    mySession.on(\"streamDestroyed\", (event) => {\r\n      // Remove the stream from 'subscribers' array\r\n      this.deleteSubscriber(event.stream.streamManager);\r\n    });\r\n\r\n    // On every asynchronous exception...\r\n    mySession.on(\"exception\", (exception) => {\r\n      console.warn(exception);\r\n    });\r\n\r\n    await axios({\r\n      url: `https://i7d106.p.ssafy.io:8080/api/room/${roomNum}/video-token`,\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        accessToken: `Bearer ${currentUser.accessToken}`,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        ovToken = data;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    await mySession.connect(\r\n      ovToken,\r\n      { clientData: currentUser.nickname }.then(async () => {\r\n        var devices = await OV.getDevices();\r\n        var videoDevices = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n        // --- 5) Get your own camera stream ---\r\n\r\n        // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\r\n        // element: we will manage it on our own) and with the desired properties\r\n        let publisher = OV.initPublisher(undefined, {\r\n          audioSource: undefined, // The source of audio. If undefined default microphone\r\n          videoSource: videoDevices[0].deviceId, // The source of video. If undefined default webcam\r\n          publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\r\n          publishVideo: true, // Whether you want to start publishing with your video enabled or not\r\n          resolution: \"640x480\", // The resolution of your video\r\n          frameRate: 30, // The frame rate of your video\r\n          insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\r\n          mirror: false, // Whether to mirror your local video or not\r\n        });\r\n\r\n        // --- 6) Publish your stream ---\r\n\r\n        mySession.publish(publisher);\r\n\r\n        // Set the main video in the page to display our webcam and store our Publisher\r\n        this.setState({\r\n          currentVideoDevice: videoDevices[0],\r\n          mainStreamManager: publisher,\r\n          publisher: publisher,\r\n        });\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div></div>\r\n    // <Grid container spacing={2}>\r\n    //   <Grid item xs={4}>\r\n    //     <Grid>\r\n\r\n    //     </Grid>\r\n    //     <Grid>cam4</Grid>\r\n    //     <Grid>cam6</Grid>\r\n    //   </Grid>\r\n    //   <Grid item xs={4}>\r\n    //     <Grid>cam2</Grid>\r\n    //     <Grid>empty</Grid>\r\n    //     <Grid>cam7</Grid>\r\n    //   </Grid>\r\n    //   <Grid item xs={4}>\r\n    //     <Grid>cam3</Grid>\r\n    //     <Grid>cam5</Grid>\r\n    //     <Grid>cam8</Grid>\r\n    //   </Grid>\r\n    // </Grid>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}