{"ast":null,"code":"// import React from \"react\";\n// import { OpenVidu } from \"openvidu-browser\";\n// import axios from \"axios\";\n// import { useSelector } from \"react-redux\";\n// import { selectUser } from \"../../redux/slice/UserSlice\";\n// export default function AllCam() {\n//   let OV, session, mySession;\n//   let ovToken;\n//   let roomNum = 62;\n//   const currentUser = useSelector(selectUser);\n//   let mySessionId = \"이청 테스트 2\";\n//   let myUserName = currentUser.nickname;\n//   console.log(\"currentUser: \", currentUser);\n//   let currentVideoDevice, mainStreamManager, publisher, subscribers;\n//   const componentDidMount = () => {\n//     window.addEventListener(\"beforeunload\", this.onbeforeunload);\n//   };\n//   const componentWillUnmount = () => {\n//     window.removeEventListener(\"beforeunload\", this.onbeforeunload);\n//   };\n//   const onbeforeunload = (event) => {\n//     leaveSession();\n//   };\n//   const handleChangeSessionId = (e) => {\n//     mySessionId = e.target.value;\n//   };\n//   const handleChangeUserName = (e) => {\n//     myUserName = e.target.value;\n//   };\n//   const handleMainVideoStream = (stream) => {\n//     if (this.state.mainStreamManager !== stream) {\n//       mainStreamManager = stream;\n//     }\n//   };\n//   const deleteSubscriber = (streamManager) => {\n//     let subscribers = this.state.subscribers;\n//     let index = subscribers.indexOf(streamManager, 0);\n//     if (index > -1) {\n//       subscribers.splice(index, 1);\n//       subscribers = subscribers;\n//     }\n//   };\n//   const joinSession = async () => {\n//     OV = new OpenVidu();\n//     session = OV.initSession();\n//     mySession = session;\n//     mySession.on(\"streamCreated\", (event) => {\n//       // Subscribe to the Stream to receive it. Second parameter is undefined\n//       // so OpenVidu doesn't create an HTML video by its own\n//       var subscriber = mySession.subscribe(event.stream, undefined);\n//       var subscribers = subscribers;\n//       subscribers.push(subscriber);\n//       // Update the state with the new subscribers\n//       subscribers = subscribers;\n//     });\n//     mySession.on(\"streamDestroyed\", (event) => {\n//       // Remove the stream from 'subscribers' array\n//       deleteSubscriber(event.stream.streamManager);\n//     });\n//     // On every asynchronous exception...\n//     mySession.on(\"exception\", (exception) => {\n//       console.warn(exception);\n//     });\n//     await axios({\n//       url: `/api/room/${roomNum}/video-token`,\n//       method: \"get\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${currentUser.accessToken}`,\n//       },\n//     })\n//       .then(({ data }) => {\n//         console.log(\"data: \" + data);\n//         ovToken = data;\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//     await mySession\n//       .connect(ovToken, { clientData: currentUser.nickname })\n//       .then(async () => {\n//         var devices = await OV.getDevices();\n//         var videoDevices = devices.filter((device) => device.kind === \"videoinput\");\n//         // --- 5) Get your own camera stream ---\n//         // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n//         // element: we will manage it on our own) and with the desired properties\n//         publisher = OV.initPublisher(undefined, {\n//           audioSource: undefined, // The source of audio. If undefined default microphone\n//           videoSource: videoDevices[0].deviceId, // The source of video. If undefined default webcam\n//           publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\n//           publishVideo: true, // Whether you want to start publishing with your video enabled or not\n//           resolution: \"640x480\", // The resolution of your video\n//           frameRate: 30, // The frame rate of your video\n//           insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\n//           mirror: false, // Whether to mirror your local video or not\n//         });\n//         // --- 6) Publish your stream ---\n//         mySession.publish(publisher);\n//         // // Set the main video in the page to display our webcam and store our Publisher\n//         // this.setState({\n//         //   currentVideoDevice: videoDevices[0],\n//         //   mainStreamManager: publisher,\n//         //   publisher: publisher,\n//         // });\n//       })\n//       .catch((error) => {\n//         console.log(\"There was an error connecting to the session:\", error.code, error.message);\n//       });\n//   };\n//   const leaveSession = () => {\n//     if (mySession) mySession.disconnect();\n//     OV = null;\n//     session = undefined;\n//     subscribers = [];\n//     mainStreamManager = undefined;\n//     publisher = undefined;\n//   };\n//   const switchCamera = async () => {\n//     try {\n//       const devices = await OV.getDevices();\n//       var videoDevices = devices.filter((device) => device.kind === \"videoinput\");\n//       if (videoDevices && videoDevices.length > 1) {\n//         var newVideoDevice = videoDevices.filter(\n//           (device) => device.deviceId !== currentVideoDevice.deviceId\n//         );\n//         if (newVideoDevice.length > 0) {\n//           // Creating a new publisher with specific videoSource\n//           // In mobile devices the default and first camera is the front one\n//           var newPublisher = OV.initPublisher(undefined, {\n//             videoSource: newVideoDevice[0].deviceId,\n//             publishAudio: true,\n//             publishVideo: true,\n//             mirror: true,\n//           });\n//           //newPublisher.once(\"accessAllowed\", () => {\n//           await session.unpublish(mainStreamManager);\n//           await session.publish(newPublisher);\n//           currentVideoDevice = newVideoDevice;\n//           mainStreamManager = newPublisher;\n//           publisher = newPublisher;\n//         }\n//       }\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n//   return (\n//     <div>\n//       <button\n//         onClick={() => {\n//           joinSession();\n//         }}\n//       >\n//         세션 접속\n//       </button>\n//     </div>\n//     // <Grid container spacing={2}>\n//     //   <Grid item xs={4}>\n//     //     <Grid>\n//     //     </Grid>\n//     //     <Grid>cam4</Grid>\n//     //     <Grid>cam6</Grid>\n//     //   </Grid>\n//     //   <Grid item xs={4}>\n//     //     <Grid>cam2</Grid>\n//     //     <Grid>empty</Grid>\n//     //     <Grid>cam7</Grid>\n//     //   </Grid>\n//     //   <Grid item xs={4}>\n//     //     <Grid>cam3</Grid>\n//     //     <Grid>cam5</Grid>\n//     //     <Grid>cam8</Grid>\n//     //   </Grid>\n//     // </Grid>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/SSAFY/2nd semester/S07P12D106/front/src/components/GameRoomPageCom/AllCam.js"],"sourcesContent":["// import React from \"react\";\r\n// import { OpenVidu } from \"openvidu-browser\";\r\n// import axios from \"axios\";\r\n\r\n// import { useSelector } from \"react-redux\";\r\n// import { selectUser } from \"../../redux/slice/UserSlice\";\r\n\r\n// export default function AllCam() {\r\n//   let OV, session, mySession;\r\n//   let ovToken;\r\n//   let roomNum = 62;\r\n//   const currentUser = useSelector(selectUser);\r\n//   let mySessionId = \"이청 테스트 2\";\r\n//   let myUserName = currentUser.nickname;\r\n//   console.log(\"currentUser: \", currentUser);\r\n//   let currentVideoDevice, mainStreamManager, publisher, subscribers;\r\n\r\n//   const componentDidMount = () => {\r\n//     window.addEventListener(\"beforeunload\", this.onbeforeunload);\r\n//   };\r\n\r\n//   const componentWillUnmount = () => {\r\n//     window.removeEventListener(\"beforeunload\", this.onbeforeunload);\r\n//   };\r\n\r\n//   const onbeforeunload = (event) => {\r\n//     leaveSession();\r\n//   };\r\n\r\n//   const handleChangeSessionId = (e) => {\r\n//     mySessionId = e.target.value;\r\n//   };\r\n\r\n//   const handleChangeUserName = (e) => {\r\n//     myUserName = e.target.value;\r\n//   };\r\n\r\n//   const handleMainVideoStream = (stream) => {\r\n//     if (this.state.mainStreamManager !== stream) {\r\n//       mainStreamManager = stream;\r\n//     }\r\n//   };\r\n\r\n//   const deleteSubscriber = (streamManager) => {\r\n//     let subscribers = this.state.subscribers;\r\n//     let index = subscribers.indexOf(streamManager, 0);\r\n//     if (index > -1) {\r\n//       subscribers.splice(index, 1);\r\n\r\n//       subscribers = subscribers;\r\n//     }\r\n//   };\r\n\r\n//   const joinSession = async () => {\r\n//     OV = new OpenVidu();\r\n//     session = OV.initSession();\r\n//     mySession = session;\r\n\r\n//     mySession.on(\"streamCreated\", (event) => {\r\n//       // Subscribe to the Stream to receive it. Second parameter is undefined\r\n//       // so OpenVidu doesn't create an HTML video by its own\r\n//       var subscriber = mySession.subscribe(event.stream, undefined);\r\n//       var subscribers = subscribers;\r\n//       subscribers.push(subscriber);\r\n\r\n//       // Update the state with the new subscribers\r\n//       subscribers = subscribers;\r\n//     });\r\n\r\n//     mySession.on(\"streamDestroyed\", (event) => {\r\n//       // Remove the stream from 'subscribers' array\r\n//       deleteSubscriber(event.stream.streamManager);\r\n//     });\r\n\r\n//     // On every asynchronous exception...\r\n//     mySession.on(\"exception\", (exception) => {\r\n//       console.warn(exception);\r\n//     });\r\n\r\n//     await axios({\r\n//       url: `/api/room/${roomNum}/video-token`,\r\n//       method: \"get\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: `Bearer ${currentUser.accessToken}`,\r\n//       },\r\n//     })\r\n//       .then(({ data }) => {\r\n//         console.log(\"data: \" + data);\r\n//         ovToken = data;\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n\r\n//     await mySession\r\n//       .connect(ovToken, { clientData: currentUser.nickname })\r\n//       .then(async () => {\r\n//         var devices = await OV.getDevices();\r\n//         var videoDevices = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n//         // --- 5) Get your own camera stream ---\r\n\r\n//         // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\r\n//         // element: we will manage it on our own) and with the desired properties\r\n//         publisher = OV.initPublisher(undefined, {\r\n//           audioSource: undefined, // The source of audio. If undefined default microphone\r\n//           videoSource: videoDevices[0].deviceId, // The source of video. If undefined default webcam\r\n//           publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\r\n//           publishVideo: true, // Whether you want to start publishing with your video enabled or not\r\n//           resolution: \"640x480\", // The resolution of your video\r\n//           frameRate: 30, // The frame rate of your video\r\n//           insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\r\n//           mirror: false, // Whether to mirror your local video or not\r\n//         });\r\n\r\n//         // --- 6) Publish your stream ---\r\n//         mySession.publish(publisher);\r\n\r\n//         // // Set the main video in the page to display our webcam and store our Publisher\r\n//         // this.setState({\r\n//         //   currentVideoDevice: videoDevices[0],\r\n//         //   mainStreamManager: publisher,\r\n//         //   publisher: publisher,\r\n//         // });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(\"There was an error connecting to the session:\", error.code, error.message);\r\n//       });\r\n//   };\r\n\r\n//   const leaveSession = () => {\r\n//     if (mySession) mySession.disconnect();\r\n\r\n//     OV = null;\r\n//     session = undefined;\r\n//     subscribers = [];\r\n//     mainStreamManager = undefined;\r\n//     publisher = undefined;\r\n//   };\r\n//   const switchCamera = async () => {\r\n//     try {\r\n//       const devices = await OV.getDevices();\r\n//       var videoDevices = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n//       if (videoDevices && videoDevices.length > 1) {\r\n//         var newVideoDevice = videoDevices.filter(\r\n//           (device) => device.deviceId !== currentVideoDevice.deviceId\r\n//         );\r\n\r\n//         if (newVideoDevice.length > 0) {\r\n//           // Creating a new publisher with specific videoSource\r\n//           // In mobile devices the default and first camera is the front one\r\n//           var newPublisher = OV.initPublisher(undefined, {\r\n//             videoSource: newVideoDevice[0].deviceId,\r\n//             publishAudio: true,\r\n//             publishVideo: true,\r\n//             mirror: true,\r\n//           });\r\n\r\n//           //newPublisher.once(\"accessAllowed\", () => {\r\n//           await session.unpublish(mainStreamManager);\r\n\r\n//           await session.publish(newPublisher);\r\n//           currentVideoDevice = newVideoDevice;\r\n//           mainStreamManager = newPublisher;\r\n//           publisher = newPublisher;\r\n//         }\r\n//       }\r\n//     } catch (e) {\r\n//       console.log(e);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <button\r\n//         onClick={() => {\r\n//           joinSession();\r\n//         }}\r\n//       >\r\n//         세션 접속\r\n//       </button>\r\n//     </div>\r\n//     // <Grid container spacing={2}>\r\n//     //   <Grid item xs={4}>\r\n//     //     <Grid>\r\n\r\n//     //     </Grid>\r\n//     //     <Grid>cam4</Grid>\r\n//     //     <Grid>cam6</Grid>\r\n//     //   </Grid>\r\n//     //   <Grid item xs={4}>\r\n//     //     <Grid>cam2</Grid>\r\n//     //     <Grid>empty</Grid>\r\n//     //     <Grid>cam7</Grid>\r\n//     //   </Grid>\r\n//     //   <Grid item xs={4}>\r\n//     //     <Grid>cam3</Grid>\r\n//     //     <Grid>cam5</Grid>\r\n//     //     <Grid>cam8</Grid>\r\n//     //   </Grid>\r\n//     // </Grid>\r\n//   );\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"module"}