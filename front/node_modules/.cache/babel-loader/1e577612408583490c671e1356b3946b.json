{"ast":null,"code":"import { globalThisShim as globalThis } from \"./globalThis.js\";\nexport function pick(obj) {\n  for (var _len = arguments.length, attr = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    attr[_key - 1] = arguments[_key];\n  }\n\n  return attr.reduce(function (acc, k) {\n    if (obj.hasOwnProperty(k)) {\n      acc[k] = obj[k];\n    }\n\n    return acc;\n  }, {});\n} // Keep a reference to the real timeout functions so they can be used when overridden\n\nvar NATIVE_SET_TIMEOUT = setTimeout;\nvar NATIVE_CLEAR_TIMEOUT = clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n  if (opts.useNativeTimers) {\n    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n  } else {\n    obj.setTimeoutFn = setTimeout.bind(globalThis);\n    obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n  }\n} // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\n\nvar BASE64_OVERHEAD = 1.33; // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\n\nexport function byteLength(obj) {\n  if (typeof obj === \"string\") {\n    return utf8Length(obj);\n  } // arraybuffer or blob\n\n\n  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\n\nfunction utf8Length(str) {\n  var c = 0,\n      length = 0;\n\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      length += 1;\n    } else if (c < 0x800) {\n      length += 2;\n    } else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    } else {\n      i++;\n      length += 4;\n    }\n  }\n\n  return length;\n}","map":null,"metadata":{},"sourceType":"module"}