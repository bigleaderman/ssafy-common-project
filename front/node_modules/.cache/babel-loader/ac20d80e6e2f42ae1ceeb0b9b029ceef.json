{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebRtcPeerSendrecv = exports.WebRtcPeerSendonly = exports.WebRtcPeerRecvonly = exports.WebRtcPeer = void 0;\n\nvar freeice = require(\"freeice\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar ExceptionEvent_1 = require(\"../Events/ExceptionEvent\");\n\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n\nvar Platform_1 = require(\"../Utils/Platform\");\n/**\n * @hidden\n */\n\n\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\n\nvar platform;\n\nvar WebRtcPeer =\n/** @class */\nfunction () {\n  function WebRtcPeer(configuration) {\n    var _this = this;\n\n    this.remoteCandidatesQueue = [];\n    this.localCandidatesQueue = [];\n    this.iceCandidateList = [];\n    this.candidategatheringdone = false;\n    platform = Platform_1.PlatformUtils.getInstance();\n    this.configuration = __assign(__assign({}, configuration), {\n      iceServers: !!configuration.iceServers && configuration.iceServers.length > 0 ? configuration.iceServers : freeice(),\n      mediaStream: configuration.mediaStream !== undefined ? configuration.mediaStream : null,\n      mode: !!configuration.mode ? configuration.mode : \"sendrecv\",\n      id: !!configuration.id ? configuration.id : this.generateUniqueId()\n    }); // prettier-ignore\n\n    logger.debug(\"[WebRtcPeer] configuration:\\n\".concat(JSON.stringify(this.configuration, null, 2)));\n    this.pc = new RTCPeerConnection({\n      iceServers: this.configuration.iceServers\n    });\n    this.pc.addEventListener(\"icecandidate\", function (event) {\n      if (event.candidate !== null) {\n        // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n        //\n        // But in practice, it is actually an RTCIceCandidateInit that can be used to\n        // obtain a proper candidate, using the RTCIceCandidate constructor:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n        var candidateInit = event.candidate;\n        var iceCandidate = new RTCIceCandidate(candidateInit);\n\n        _this.configuration.onIceCandidate(iceCandidate);\n\n        if (iceCandidate.candidate !== '') {\n          _this.localCandidatesQueue.push(iceCandidate);\n        }\n      }\n    });\n    this.pc.addEventListener('signalingstatechange', function () {\n      if (_this.pc.signalingState === 'stable') {\n        // SDP Offer/Answer finished. Add stored remote candidates.\n        while (_this.iceCandidateList.length > 0) {\n          var candidate = _this.iceCandidateList.shift();\n\n          _this.pc.addIceCandidate(candidate);\n        }\n      }\n    });\n  }\n\n  WebRtcPeer.prototype.getId = function () {\n    return this.configuration.id;\n  };\n  /**\n   * This method frees the resources used by WebRtcPeer\n   */\n\n\n  WebRtcPeer.prototype.dispose = function () {\n    logger.debug('Disposing WebRtcPeer');\n\n    if (this.pc) {\n      if (this.pc.signalingState === 'closed') {\n        return;\n      }\n\n      this.pc.close();\n      this.remoteCandidatesQueue = [];\n      this.localCandidatesQueue = [];\n    }\n  }; // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n  // Transceivers, and instead depend on the deprecated\n  // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n\n\n  WebRtcPeer.prototype.createOfferLegacy = function () {\n    if (!!this.configuration.mediaStream) {\n      this.deprecatedPeerConnectionTrackApi();\n    }\n\n    var hasAudio = this.configuration.mediaConstraints.audio;\n    var hasVideo = this.configuration.mediaConstraints.video;\n    var options = {\n      offerToReceiveAudio: this.configuration.mode !== \"sendonly\" && hasAudio,\n      offerToReceiveVideo: this.configuration.mode !== \"sendonly\" && hasVideo\n    };\n    logger.debug(\"[createOfferLegacy] RTCPeerConnection.createOffer() options:\", JSON.stringify(options));\n    return this.pc.createOffer(options);\n  };\n  /**\n   * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n   * Only if the negotiation was initiated by this peer.\n   */\n\n\n  WebRtcPeer.prototype.createOffer = function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, _j, track, tcInit, trackSettings, trackConsts, trackWidth, trackHeight, trackPixels, maxLayers, l, layerDiv, encoding, tc, sendParams, needSetParams, error_1, message, _k, _l, kind, sdpOffer, error_2, message;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if (!(\"addTransceiver\" in this.pc)) {\n              logger.warn(\"[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}\");\n              return [2\n              /*return*/\n              , this.createOfferLegacy()];\n            } else {\n              logger.debug(\"[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it\");\n            }\n\n            if (!(this.configuration.mode !== \"recvonly\")) return [3\n            /*break*/\n            , 7]; // To send media, assume that all desired media tracks have been\n            // already added by higher level code to our MediaStream.\n\n            if (!this.configuration.mediaStream) {\n              throw new Error(\"[WebRtcPeer.createOffer] Direction is '\".concat(this.configuration.mode, \"', but no stream was configured to be sent\"));\n            }\n\n            _i = 0, _j = this.configuration.mediaStream.getTracks();\n            _m.label = 1;\n\n          case 1:\n            if (!(_i < _j.length)) return [3\n            /*break*/\n            , 6];\n            track = _j[_i];\n            tcInit = {\n              direction: this.configuration.mode,\n              streams: [this.configuration.mediaStream]\n            };\n\n            if (track.kind === \"video\" && this.configuration.simulcast) {\n              trackSettings = track.getSettings();\n              trackConsts = track.getConstraints();\n              trackWidth = (_c = (_b = (_a = trackSettings.width) !== null && _a !== void 0 ? _a : trackConsts.width.ideal) !== null && _b !== void 0 ? _b : trackConsts.width) !== null && _c !== void 0 ? _c : 0;\n              trackHeight = (_f = (_e = (_d = trackSettings.height) !== null && _d !== void 0 ? _d : trackConsts.height.ideal) !== null && _e !== void 0 ? _e : trackConsts.height) !== null && _f !== void 0 ? _f : 0;\n              logger.info(\"[createOffer] Video track dimensions: \".concat(trackWidth, \"x\").concat(trackHeight));\n              trackPixels = trackWidth * trackHeight;\n              maxLayers = 0;\n\n              if (trackPixels >= 960 * 540) {\n                maxLayers = 3;\n              } else if (trackPixels >= 480 * 270) {\n                maxLayers = 2;\n              } else {\n                maxLayers = 1;\n              }\n\n              tcInit.sendEncodings = [];\n\n              for (l = 0; l < maxLayers; l++) {\n                layerDiv = Math.pow(2, maxLayers - l - 1);\n                encoding = {\n                  rid: \"rdiv\" + layerDiv.toString(),\n                  // @ts-ignore -- Property missing from DOM types.\n                  scalabilityMode: \"L1T1\"\n                };\n\n                if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                  // Prioritize best resolution, for maximum picture detail.\n                  encoding.scaleResolutionDownBy = 1.0; // @ts-ignore -- Property missing from DOM types.\n\n                  encoding.maxFramerate = Math.floor(30 / layerDiv);\n                } else {\n                  encoding.scaleResolutionDownBy = layerDiv;\n                }\n\n                tcInit.sendEncodings.push(encoding);\n              }\n            }\n\n            tc = this.pc.addTransceiver(track, tcInit);\n            if (!(track.kind === \"video\")) return [3\n            /*break*/\n            , 5];\n            sendParams = tc.sender.getParameters();\n            needSetParams = false;\n\n            if (!((_g = sendParams.degradationPreference) === null || _g === void 0 ? void 0 : _g.length)) {\n              // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n              // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n              if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                sendParams.degradationPreference = \"maintain-resolution\";\n              } else {\n                sendParams.degradationPreference = \"balanced\";\n              }\n\n              logger.info(\"[createOffer] Video sender Degradation Preference set: \".concat(sendParams.degradationPreference)); // FIXME: Firefox implements degradationPreference on each individual encoding!\n              // (set it on every element of the sendParams.encodings array)\n\n              needSetParams = true;\n            } // FIXME: Check that the simulcast encodings were applied.\n            // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n            // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n            //\n            // This next block can be deleted when Firefox fixes bug #1396918:\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n            //\n            // NOTE: This is done in a way that is compatible with all browsers, to save on\n            // browser-conditional code. The idea comes from WebRTC Adapter.js:\n            // * https://github.com/webrtcHacks/adapter/issues/998\n            // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n\n\n            if (this.configuration.simulcast) {\n              if (((_h = sendParams.encodings) === null || _h === void 0 ? void 0 : _h.length) !== tcInit.sendEncodings.length) {\n                sendParams.encodings = tcInit.sendEncodings;\n                needSetParams = true;\n              }\n            }\n\n            if (!needSetParams) return [3\n            /*break*/\n            , 5];\n            logger.debug(\"[createOffer] Setting new RTCRtpSendParameters to video sender\");\n            _m.label = 2;\n\n          case 2:\n            _m.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , tc.sender.setParameters(sendParams)];\n\n          case 3:\n            _m.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender\";\n\n            if (error_1 instanceof Error) {\n              message += \": \".concat(error_1.message);\n            }\n\n            throw new Error(message);\n\n          case 5:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // To just receive media, create new recvonly transceivers.\n            for (_k = 0, _l = [\"audio\", \"video\"]; _k < _l.length; _k++) {\n              kind = _l[_k]; // Check if the media kind should be used.\n\n              if (!this.configuration.mediaConstraints[kind]) {\n                continue;\n              }\n\n              this.configuration.mediaStream = new MediaStream();\n              this.pc.addTransceiver(kind, {\n                direction: this.configuration.mode,\n                streams: [this.configuration.mediaStream]\n              });\n            }\n\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , this.pc.createOffer()];\n\n          case 9:\n            sdpOffer = _m.sent();\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            error_2 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Browser failed creating an SDP Offer\";\n\n            if (error_2 instanceof Error) {\n              message += \": \".concat(error_2.message);\n            }\n\n            throw new Error(message);\n\n          case 11:\n            return [2\n            /*return*/\n            , sdpOffer];\n        }\n      });\n    });\n  };\n\n  WebRtcPeer.prototype.deprecatedPeerConnectionTrackApi = function () {\n    for (var _i = 0, _a = this.configuration.mediaStream.getTracks(); _i < _a.length; _i++) {\n      var track = _a[_i];\n      this.pc.addTrack(track, this.configuration.mediaStream);\n    }\n  };\n  /**\n   * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n   * Only if the negotiation was initiated by the other peer\n   */\n\n\n  WebRtcPeer.prototype.createAnswer = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      // TODO: Delete this conditional when all supported browsers are\n      // modern enough to implement the Transceiver methods.\n      if (\"getTransceivers\" in _this.pc) {\n        logger.debug(\"[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it\");\n\n        var _loop_1 = function (kind) {\n          // Check if the media kind should be used.\n          if (!_this.configuration.mediaConstraints[kind]) {\n            return \"continue\";\n          }\n\n          var tc = _this.pc.getTransceivers().find(function (tc) {\n            return tc.receiver.track.kind === kind;\n          });\n\n          if (tc) {\n            // Enforce our desired direction.\n            tc.direction = _this.configuration.mode;\n          } else {\n            return {\n              value: reject(new Error(\"\".concat(kind, \" requested, but no transceiver was created from remote description\")))\n            };\n          }\n        }; // Ensure that the PeerConnection already contains one Transceiver\n        // for each kind of media.\n        // The Transceivers should have been already created internally by\n        // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n\n\n        for (var _i = 0, _a = [\"audio\", \"video\"]; _i < _a.length; _i++) {\n          var kind = _a[_i];\n\n          var state_1 = _loop_1(kind);\n\n          if (typeof state_1 === \"object\") return state_1.value;\n        }\n\n        _this.pc.createAnswer().then(function (sdpAnswer) {\n          return resolve(sdpAnswer);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      } else {\n        // TODO: Delete else branch when all supported browsers are\n        // modern enough to implement the Transceiver methods\n        var offerAudio = void 0,\n            offerVideo = true;\n\n        if (!!_this.configuration.mediaConstraints) {\n          offerAudio = typeof _this.configuration.mediaConstraints.audio === 'boolean' ? _this.configuration.mediaConstraints.audio : true;\n          offerVideo = typeof _this.configuration.mediaConstraints.video === 'boolean' ? _this.configuration.mediaConstraints.video : true;\n          var constraints = {\n            offerToReceiveAudio: offerAudio,\n            offerToReceiveVideo: offerVideo\n          };\n\n          _this.pc.createAnswer(constraints).then(function (sdpAnswer) {\n            return resolve(sdpAnswer);\n          }).catch(function (error) {\n            return reject(error);\n          });\n        }\n      } // else, there is nothing to do; the legacy createAnswer() options do\n      // not offer any control over which tracks are included in the answer.\n\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processLocalOffer = function (offer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.pc.setLocalDescription(offer).then(function () {\n        var localDescription = _this.pc.localDescription;\n\n        if (!!localDescription) {\n          logger.debug('Local description set', localDescription.sdp);\n          return resolve();\n        } else {\n          return reject('Local description is not defined');\n        }\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processRemoteOffer = function (sdpOffer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var offer = {\n        type: 'offer',\n        sdp: sdpOffer\n      };\n      logger.debug('SDP offer received, setting remote description', offer);\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n\n      _this.setRemoteDescription(offer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processLocalAnswer = function (answer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('SDP answer created, setting local description');\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set local description');\n      }\n\n      _this.pc.setLocalDescription(answer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n   */\n\n\n  WebRtcPeer.prototype.processRemoteAnswer = function (sdpAnswer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var answer = {\n        type: 'answer',\n        sdp: sdpAnswer\n      };\n      logger.debug('SDP answer received, setting remote description');\n\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n\n      _this.setRemoteDescription(answer).then(function () {\n        // DEBUG: Uncomment for details.\n        // {\n        //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n        //     // prettier-ignore\n        //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n        // }\n        resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  WebRtcPeer.prototype.setRemoteDescription = function (sdp) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pc.setRemoteDescription(sdp)];\n      });\n    });\n  };\n  /**\n   * Callback function invoked when an ICE candidate is received\n   */\n\n\n  WebRtcPeer.prototype.addIceCandidate = function (iceCandidate) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('Remote ICE candidate received', iceCandidate);\n\n      _this.remoteCandidatesQueue.push(iceCandidate);\n\n      switch (_this.pc.signalingState) {\n        case 'closed':\n          reject(new Error('PeerConnection object is closed'));\n          break;\n\n        case 'stable':\n          if (!!_this.pc.remoteDescription) {\n            _this.pc.addIceCandidate(iceCandidate).then(function () {\n              return resolve();\n            }).catch(function (error) {\n              return reject(error);\n            });\n          } else {\n            _this.iceCandidateList.push(iceCandidate);\n\n            resolve();\n          }\n\n          break;\n\n        default:\n          _this.iceCandidateList.push(iceCandidate);\n\n          resolve();\n      }\n    });\n  };\n\n  WebRtcPeer.prototype.addIceConnectionStateChangeListener = function (otherId) {\n    var _this = this;\n\n    this.pc.addEventListener('iceconnectionstatechange', function () {\n      var iceConnectionState = _this.pc.iceConnectionState;\n\n      switch (iceConnectionState) {\n        case 'disconnected':\n          // Possible network disconnection\n          var msg1 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"disconnected\". Possible network disconnection';\n          logger.warn(msg1);\n\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n\n          break;\n\n        case 'failed':\n          var msg2 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') to \"failed\"';\n          logger.error(msg2);\n\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n\n          break;\n\n        case 'closed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"closed\"');\n          break;\n\n        case 'new':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"new\"');\n          break;\n\n        case 'checking':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"checking\"');\n          break;\n\n        case 'connected':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"connected\"');\n          break;\n\n        case 'completed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"completed\"');\n          break;\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  WebRtcPeer.prototype.generateUniqueId = function () {\n    return (0, uuid_1.v4)();\n  };\n\n  return WebRtcPeer;\n}();\n\nexports.WebRtcPeer = WebRtcPeer;\n\nvar WebRtcPeerRecvonly =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerRecvonly, _super);\n\n  function WebRtcPeerRecvonly(configuration) {\n    var _this = this;\n\n    configuration.mode = 'recvonly';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerRecvonly;\n}(WebRtcPeer);\n\nexports.WebRtcPeerRecvonly = WebRtcPeerRecvonly;\n\nvar WebRtcPeerSendonly =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerSendonly, _super);\n\n  function WebRtcPeerSendonly(configuration) {\n    var _this = this;\n\n    configuration.mode = 'sendonly';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerSendonly;\n}(WebRtcPeer);\n\nexports.WebRtcPeerSendonly = WebRtcPeerSendonly;\n\nvar WebRtcPeerSendrecv =\n/** @class */\nfunction (_super) {\n  __extends(WebRtcPeerSendrecv, _super);\n\n  function WebRtcPeerSendrecv(configuration) {\n    var _this = this;\n\n    configuration.mode = 'sendrecv';\n    _this = _super.call(this, configuration) || this;\n    return _this;\n  }\n\n  return WebRtcPeerSendrecv;\n}(WebRtcPeer);\n\nexports.WebRtcPeerSendrecv = WebRtcPeerSendrecv;","map":{"version":3,"mappings":"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","names":["logger","OpenViduLogger_1","getInstance","platform","configuration","Platform_1","__assign","iceServers","length","freeice","mediaStream","undefined","mode","id","generateUniqueId","debug","JSON","stringify","pc","RTCPeerConnection","addEventListener","event","candidate","candidateInit","iceCandidate","RTCIceCandidate","_this","onIceCandidate","localCandidatesQueue","push","signalingState","iceCandidateList","shift","addIceCandidate","WebRtcPeer","close","remoteCandidatesQueue","deprecatedPeerConnectionTrackApi","hasAudio","mediaConstraints","audio","hasVideo","video","options","offerToReceiveAudio","offerToReceiveVideo","createOffer","warn","createOfferLegacy","Error","_j","getTracks","_i","track","tcInit","direction","streams","kind","simulcast","trackSettings","getSettings","trackConsts","getConstraints","trackWidth","width","_a","ideal","_b","_c","trackHeight","height","_d","_e","_f","info","concat","trackPixels","maxLayers","sendEncodings","l","layerDiv","Math","encoding","rid","toString","scalabilityMode","includes","contentHint","scaleResolutionDownBy","maxFramerate","floor","tc","addTransceiver","sendParams","sender","getParameters","needSetParams","degradationPreference","_g","encodings","_h","setParameters","_m","message","error_1","_l","_k","MediaStream","sdpOffer","error_2","addTrack","Promise","resolve","reject","getTransceivers","find","receiver","createAnswer","then","sdpAnswer","catch","error","offerAudio","offerVideo","constraints","offer","setLocalDescription","localDescription","sdp","type","setRemoteDescription","answer","remoteDescription","otherId","iceConnectionState","msg1","onIceConnectionStateException","ExceptionEvent_1","ICE_CONNECTION_DISCONNECTED","msg2","ICE_CONNECTION_FAILED","log","exports","__extends"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\WebRtcPeer\\WebRtcPeer.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport freeice = require('freeice');\nimport { v4 as uuidv4 } from 'uuid';\nimport { TypeOfVideo } from '../Enums/TypeOfVideo';\nimport { ExceptionEventName } from '../Events/ExceptionEvent';\nimport { OpenViduLogger } from '../Logger/OpenViduLogger';\nimport { PlatformUtils } from '../Utils/Platform';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nlet platform: PlatformUtils;\n\nexport interface WebRtcPeerConfiguration {\n    mediaConstraints: {\n        audio: boolean;\n        video: boolean;\n    };\n    simulcast: boolean;\n    mediaServer: string;\n    onIceCandidate: (event: RTCIceCandidate) => void;\n    onIceConnectionStateException: (exceptionName: ExceptionEventName, message: string, data?: any) => void;\n    iceServers?: RTCIceServer[];\n    mediaStream?: MediaStream | null;\n    mode?: 'sendonly' | 'recvonly' | 'sendrecv';\n    id?: string;\n    typeOfVideo: TypeOfVideo | undefined;\n}\n\nexport class WebRtcPeer {\n    pc: RTCPeerConnection;\n    remoteCandidatesQueue: RTCIceCandidate[] = [];\n    localCandidatesQueue: RTCIceCandidate[] = [];\n\n    // Same as WebRtcPeerConfiguration but without optional fields.\n    protected configuration: Required<WebRtcPeerConfiguration>;\n\n    private iceCandidateList: RTCIceCandidate[] = [];\n    private candidategatheringdone = false;\n\n    constructor(configuration: WebRtcPeerConfiguration) {\n        platform = PlatformUtils.getInstance();\n\n        this.configuration = {\n            ...configuration,\n            iceServers:\n                !!configuration.iceServers &&\n                    configuration.iceServers.length > 0\n                    ? configuration.iceServers\n                    : freeice(),\n            mediaStream:\n                configuration.mediaStream !== undefined\n                    ? configuration.mediaStream\n                    : null,\n            mode: !!configuration.mode ? configuration.mode : \"sendrecv\",\n            id: !!configuration.id ? configuration.id : this.generateUniqueId(),\n        };\n        // prettier-ignore\n        logger.debug(`[WebRtcPeer] configuration:\\n${JSON.stringify(this.configuration, null, 2)}`);\n\n        this.pc = new RTCPeerConnection({ iceServers: this.configuration.iceServers });\n\n        this.pc.addEventListener(\"icecandidate\", (event: RTCPeerConnectionIceEvent) => {\n            if (event.candidate !== null) {\n                // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n                //\n                // But in practice, it is actually an RTCIceCandidateInit that can be used to\n                // obtain a proper candidate, using the RTCIceCandidate constructor:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n                const candidateInit: RTCIceCandidateInit = event.candidate as RTCIceCandidateInit;\n                const iceCandidate = new RTCIceCandidate(candidateInit);\n\n                this.configuration.onIceCandidate(iceCandidate);\n                if (iceCandidate.candidate !== '') {\n                    this.localCandidatesQueue.push(iceCandidate);\n                }\n            }\n        });\n\n        this.pc.addEventListener('signalingstatechange', () => {\n            if (this.pc.signalingState === 'stable') {\n                // SDP Offer/Answer finished. Add stored remote candidates.\n                while (this.iceCandidateList.length > 0) {\n                    let candidate = this.iceCandidateList.shift();\n                    this.pc.addIceCandidate(<RTCIceCandidate>candidate);\n                }\n            }\n        });\n    }\n\n    getId(): string {\n        return this.configuration.id;\n    }\n\n    /**\n     * This method frees the resources used by WebRtcPeer\n     */\n    dispose() {\n        logger.debug('Disposing WebRtcPeer');\n        if (this.pc) {\n            if (this.pc.signalingState === 'closed') {\n                return;\n            }\n            this.pc.close();\n            this.remoteCandidatesQueue = [];\n            this.localCandidatesQueue = [];\n        }\n    }\n\n    // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n    // Transceivers, and instead depend on the deprecated\n    // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n    private createOfferLegacy(): Promise<RTCSessionDescriptionInit> {\n        if (!!this.configuration.mediaStream) {\n            this.deprecatedPeerConnectionTrackApi();\n        }\n\n        const hasAudio = this.configuration.mediaConstraints.audio;\n        const hasVideo = this.configuration.mediaConstraints.video;\n\n        const options: RTCOfferOptions = {\n            offerToReceiveAudio: this.configuration.mode !== \"sendonly\" && hasAudio,\n            offerToReceiveVideo: this.configuration.mode !== \"sendonly\" && hasVideo,\n        };\n\n        logger.debug(\"[createOfferLegacy] RTCPeerConnection.createOffer() options:\", JSON.stringify(options));\n\n        return this.pc.createOffer(options);\n    }\n\n    /**\n     * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n     * Only if the negotiation was initiated by this peer.\n     */\n    async createOffer(): Promise<RTCSessionDescriptionInit> {\n        // TODO: Delete this conditional when all supported browsers are\n        // modern enough to implement the Transceiver methods.\n        if (!(\"addTransceiver\" in this.pc)) {\n            logger.warn(\n                \"[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}\"\n            );\n            return this.createOfferLegacy();\n        } else {\n            logger.debug(\"[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it\");\n        }\n\n        // Spec doc: https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtransceiver\n\n        if (this.configuration.mode !== \"recvonly\") {\n            // To send media, assume that all desired media tracks have been\n            // already added by higher level code to our MediaStream.\n\n            if (!this.configuration.mediaStream) {\n                throw new Error(\n                    `[WebRtcPeer.createOffer] Direction is '${this.configuration.mode}', but no stream was configured to be sent`\n                );\n            }\n\n            for (const track of this.configuration.mediaStream.getTracks()) {\n                const tcInit: RTCRtpTransceiverInit = {\n                    direction: this.configuration.mode,\n                    streams: [this.configuration.mediaStream],\n                };\n\n                if (track.kind === \"video\" && this.configuration.simulcast) {\n                    // Check if the requested size is enough to ask for 3 layers.\n                    const trackSettings = track.getSettings();\n                    const trackConsts = track.getConstraints();\n\n                    const trackWidth: number =\n                        trackSettings.width ??\n                        (trackConsts.width as ConstrainULongRange).ideal ??\n                        (trackConsts.width as number) ??\n                        0;\n                    const trackHeight: number =\n                        trackSettings.height ??\n                        (trackConsts.height as ConstrainULongRange).ideal ??\n                        (trackConsts.height as number) ??\n                        0;\n                    logger.info(`[createOffer] Video track dimensions: ${trackWidth}x${trackHeight}`);\n\n                    const trackPixels = trackWidth * trackHeight;\n                    let maxLayers = 0;\n                    if (trackPixels >= 960 * 540) {\n                        maxLayers = 3;\n                    } else if (trackPixels >= 480 * 270) {\n                        maxLayers = 2;\n                    } else {\n                        maxLayers = 1;\n                    }\n\n                    tcInit.sendEncodings = [];\n                    for (let l = 0; l < maxLayers; l++) {\n                        const layerDiv = 2 ** (maxLayers - l - 1);\n\n                        const encoding: RTCRtpEncodingParameters = {\n                            rid: \"rdiv\" + layerDiv.toString(),\n\n                            // @ts-ignore -- Property missing from DOM types.\n                            scalabilityMode: \"L1T1\",\n                        };\n\n                        if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                            // Prioritize best resolution, for maximum picture detail.\n                            encoding.scaleResolutionDownBy = 1.0;\n\n                            // @ts-ignore -- Property missing from DOM types.\n                            encoding.maxFramerate = Math.floor(30 / layerDiv);\n                        } else {\n                            encoding.scaleResolutionDownBy = layerDiv;\n                        }\n\n                        tcInit.sendEncodings.push(encoding);\n                    }\n                }\n\n                const tc = this.pc.addTransceiver(track, tcInit);\n\n                if (track.kind === \"video\") {\n                    let sendParams = tc.sender.getParameters();\n                    let needSetParams = false;\n\n                    if (!sendParams.degradationPreference?.length) {\n                        // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n                        // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n                        if ([\"detail\", \"text\"].includes(track.contentHint)) {\n                            sendParams.degradationPreference = \"maintain-resolution\";\n                        } else {\n                            sendParams.degradationPreference = \"balanced\";\n                        }\n\n                        logger.info(\n                            `[createOffer] Video sender Degradation Preference set: ${sendParams.degradationPreference}`\n                        );\n\n                        // FIXME: Firefox implements degradationPreference on each individual encoding!\n                        // (set it on every element of the sendParams.encodings array)\n\n                        needSetParams = true;\n                    }\n\n                    // FIXME: Check that the simulcast encodings were applied.\n                    // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n                    // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n                    //\n                    // This next block can be deleted when Firefox fixes bug #1396918:\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n                    //\n                    // NOTE: This is done in a way that is compatible with all browsers, to save on\n                    // browser-conditional code. The idea comes from WebRTC Adapter.js:\n                    // * https://github.com/webrtcHacks/adapter/issues/998\n                    // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n                    if (this.configuration.simulcast) {\n                        if (sendParams.encodings?.length !== tcInit.sendEncodings!.length) {\n                            sendParams.encodings = tcInit.sendEncodings!;\n\n                            needSetParams = true;\n                        }\n                    }\n\n                    if (needSetParams) {\n                        logger.debug(`[createOffer] Setting new RTCRtpSendParameters to video sender`);\n                        try {\n                            await tc.sender.setParameters(sendParams);\n                        } catch (error) {\n                            let message = `[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender`;\n                            if (error instanceof Error) {\n                                message += `: ${error.message}`;\n                            }\n                            throw new Error(message);\n                        }\n                    }\n                }\n\n                // DEBUG: Uncomment for details.\n                // if (track.kind === \"video\" && this.configuration.simulcast) {\n                //     // Print browser capabilities.\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send capabilities (static):\\n${JSON.stringify(RTCRtpSender.getCapabilities?.(\"video\"), null, 2)}`);\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver recv capabilities (static):\\n${JSON.stringify(RTCRtpReceiver.getCapabilities?.(\"video\"), null, 2)}`);\n\n                //     // Print requested Transceiver encodings and parameters.\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send encodings (requested):\\n${JSON.stringify(tcInit.sendEncodings, null, 2)}`);\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send parameters (accepted):\\n${JSON.stringify(tc.sender.getParameters(), null, 2)}`);\n                // }\n            }\n        } else {\n            // To just receive media, create new recvonly transceivers.\n            for (const kind of [\"audio\", \"video\"]) {\n                // Check if the media kind should be used.\n                if (!this.configuration.mediaConstraints[kind]) {\n                    continue;\n                }\n\n                this.configuration.mediaStream = new MediaStream();\n                this.pc.addTransceiver(kind, {\n                    direction: this.configuration.mode,\n                    streams: [this.configuration.mediaStream],\n                });\n            }\n        }\n\n        let sdpOffer: RTCSessionDescriptionInit;\n        try {\n            sdpOffer = await this.pc.createOffer();\n        } catch (error) {\n            let message = `[WebRtcPeer.createOffer] Browser failed creating an SDP Offer`;\n            if (error instanceof Error) {\n                message += `: ${error.message}`;\n            }\n            throw new Error(message);\n        }\n\n        return sdpOffer;\n    }\n\n    deprecatedPeerConnectionTrackApi() {\n        for (const track of this.configuration.mediaStream!.getTracks()) {\n            this.pc.addTrack(track, this.configuration.mediaStream!);\n        }\n    }\n\n    /**\n     * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n     * Only if the negotiation was initiated by the other peer\n     */\n    createAnswer(): Promise<RTCSessionDescriptionInit> {\n        return new Promise((resolve, reject) => {\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if (\"getTransceivers\" in this.pc) {\n                logger.debug(\"[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it\");\n\n                // Ensure that the PeerConnection already contains one Transceiver\n                // for each kind of media.\n                // The Transceivers should have been already created internally by\n                // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n\n                for (const kind of [\"audio\", \"video\"]) {\n                    // Check if the media kind should be used.\n                    if (!this.configuration.mediaConstraints[kind]) {\n                        continue;\n                    }\n\n                    let tc = this.pc\n                        .getTransceivers()\n                        .find((tc) => tc.receiver.track.kind === kind);\n\n                    if (tc) {\n                        // Enforce our desired direction.\n                        tc.direction = this.configuration.mode;\n                    } else {\n                        return reject(new Error(`${kind} requested, but no transceiver was created from remote description`));\n                    }\n                }\n\n                this.pc\n                    .createAnswer()\n                    .then((sdpAnswer) => resolve(sdpAnswer))\n                    .catch((error) => reject(error));\n\n            } else {\n\n                // TODO: Delete else branch when all supported browsers are\n                // modern enough to implement the Transceiver methods\n\n                let offerAudio, offerVideo = true;\n                if (!!this.configuration.mediaConstraints) {\n                    offerAudio = (typeof this.configuration.mediaConstraints.audio === 'boolean') ?\n                        this.configuration.mediaConstraints.audio : true;\n                    offerVideo = (typeof this.configuration.mediaConstraints.video === 'boolean') ?\n                        this.configuration.mediaConstraints.video : true;\n                    const constraints: RTCOfferOptions = {\n                        offerToReceiveAudio: offerAudio,\n                        offerToReceiveVideo: offerVideo\n                    };\n                    this.pc!.createAnswer(constraints)\n                        .then(sdpAnswer => resolve(sdpAnswer))\n                        .catch(error => reject(error));\n                }\n\n            }\n\n            // else, there is nothing to do; the legacy createAnswer() options do\n            // not offer any control over which tracks are included in the answer.\n        });\n    }\n\n    /**\n     * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n     */\n    processLocalOffer(offer: RTCSessionDescriptionInit): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.pc.setLocalDescription(offer)\n                .then(() => {\n                    const localDescription = this.pc.localDescription;\n                    if (!!localDescription) {\n                        logger.debug('Local description set', localDescription.sdp);\n                        return resolve();\n                    } else {\n                        return reject('Local description is not defined');\n                    }\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n     */\n    processRemoteOffer(sdpOffer: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const offer: RTCSessionDescriptionInit = {\n                type: 'offer',\n                sdp: sdpOffer\n            };\n            logger.debug('SDP offer received, setting remote description', offer);\n\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            this.setRemoteDescription(offer)\n                .then(() => resolve())\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n     */\n    processLocalAnswer(answer: RTCSessionDescriptionInit): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.debug('SDP answer created, setting local description');\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set local description');\n            }\n            this.pc.setLocalDescription(answer)\n                .then(() => resolve())\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n     */\n    processRemoteAnswer(sdpAnswer: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const answer: RTCSessionDescriptionInit = {\n                type: 'answer',\n                sdp: sdpAnswer\n            };\n            logger.debug('SDP answer received, setting remote description');\n\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            this.setRemoteDescription(answer)\n                .then(() => {\n                    // DEBUG: Uncomment for details.\n                    // {\n                    //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n                    //     // prettier-ignore\n                    //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n                    // }\n\n                    resolve();\n                })\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    async setRemoteDescription(sdp: RTCSessionDescriptionInit): Promise<void> {\n        return this.pc.setRemoteDescription(sdp);\n    }\n\n    /**\n     * Callback function invoked when an ICE candidate is received\n     */\n    addIceCandidate(iceCandidate: RTCIceCandidate): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.debug('Remote ICE candidate received', iceCandidate);\n            this.remoteCandidatesQueue.push(iceCandidate);\n            switch (this.pc.signalingState) {\n                case 'closed':\n                    reject(new Error('PeerConnection object is closed'));\n                    break;\n                case 'stable':\n                    if (!!this.pc.remoteDescription) {\n                        this.pc.addIceCandidate(iceCandidate).then(() => resolve()).catch(error => reject(error));\n                    } else {\n                        this.iceCandidateList.push(iceCandidate);\n                        resolve();\n                    }\n                    break;\n                default:\n                    this.iceCandidateList.push(iceCandidate);\n                    resolve();\n            }\n        });\n    }\n\n    addIceConnectionStateChangeListener(otherId: string) {\n        this.pc.addEventListener('iceconnectionstatechange', () => {\n            const iceConnectionState: RTCIceConnectionState = this.pc.iceConnectionState;\n            switch (iceConnectionState) {\n                case 'disconnected':\n                    // Possible network disconnection\n                    const msg1 = 'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"disconnected\". Possible network disconnection';\n                    logger.warn(msg1);\n                    this.configuration.onIceConnectionStateException(ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n                    break;\n                case 'failed':\n                    const msg2 = 'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') to \"failed\"';\n                    logger.error(msg2);\n                    this.configuration.onIceConnectionStateException(ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n                    break;\n                case 'closed':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"closed\"');\n                    break;\n                case 'new':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"new\"');\n                    break;\n                case 'checking':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"checking\"');\n                    break;\n                case 'connected':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"connected\"');\n                    break;\n                case 'completed':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"completed\"');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    generateUniqueId(): string {\n        return uuidv4();\n    }\n\n}\n\n\nexport class WebRtcPeerRecvonly extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'recvonly';\n        super(configuration);\n    }\n}\n\nexport class WebRtcPeerSendonly extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'sendonly';\n        super(configuration);\n    }\n}\n\nexport class WebRtcPeerSendrecv extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'sendrecv';\n        super(configuration);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}