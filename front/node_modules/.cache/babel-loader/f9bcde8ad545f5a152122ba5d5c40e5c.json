{"ast":null,"code":"\"use strict\";\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamPropertyChangedEvent = void 0;\n\nvar Event_1 = require(\"./Event\");\n/**\n * Triggered by `streamPropertyChanged` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamPropertyChanged) and [StreamManager](/en/stable/api/openvidu-browser/interfaces/StreamManagerEventMap.html#streamPropertyChanged) objects)\n */\n\n\nvar StreamPropertyChangedEvent =\n/** @class */\nfunction (_super) {\n  __extends(StreamPropertyChangedEvent, _super);\n  /**\n   * @hidden\n   */\n\n\n  function StreamPropertyChangedEvent(target, stream, changedProperty, newValue, oldValue, reason) {\n    var _this = _super.call(this, false, target, 'streamPropertyChanged') || this;\n\n    _this.stream = stream;\n    _this.changedProperty = changedProperty;\n    _this.newValue = newValue;\n    _this.oldValue = oldValue;\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n\n\n  StreamPropertyChangedEvent.prototype.callDefaultBehavior = function () {};\n\n  return StreamPropertyChangedEvent;\n}(Event_1.Event);\n\nexports.StreamPropertyChangedEvent = StreamPropertyChangedEvent;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAKA;;;;;AAGA;AAAA;AAAA;EAAgDA;EA+B5C;;;;;EAGA,oCAAYC,MAAZ,EAA6CC,MAA7C,EAA6DC,eAA7D,EAAsFC,QAAtF,EAAwGC,QAAxG,EAA0HC,MAA1H,EAAwI;IAAxI,YACIC,kBAAM,KAAN,EAAaN,MAAb,EAAqB,uBAArB,KAA6C,IADjD;;IAEIO,KAAI,CAACN,MAAL,GAAcA,MAAd;IACAM,KAAI,CAACL,eAAL,GAAuBA,eAAvB;IACAK,KAAI,CAACJ,QAAL,GAAgBA,QAAhB;IACAI,KAAI,CAACH,QAAL,GAAgBA,QAAhB;IACAG,KAAI,CAACF,MAAL,GAAcA,MAAd;;EACH;EAED;;;EAGA;;;EACAG,wEAAyB,CAAzB;;EAEJ;AAAC,CAjDD,CAAgDC,aAAhD;;AAAaC","names":["__extends","target","stream","changedProperty","newValue","oldValue","reason","_super","_this","StreamPropertyChangedEvent","Event_1","exports"],"sources":["C:\\SSAFY\\2nd semester\\S07P12D106\\front\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\StreamPropertyChangedEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Session } from '../../OpenVidu/Session';\nimport { Stream } from '../../OpenVidu/Stream';\nimport { StreamManager } from '../../OpenVidu/StreamManager';\n\n/**\n * Triggered by `streamPropertyChanged` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamPropertyChanged) and [StreamManager](/en/stable/api/openvidu-browser/interfaces/StreamManagerEventMap.html#streamPropertyChanged) objects)\n */\nexport class StreamPropertyChangedEvent extends Event {\n\n    /**\n     * The Stream whose property has changed. You can always identify the user publishing the changed stream by consulting property [[Stream.connection]]\n     */\n    stream: Stream;\n\n    /**\n     * The property of the stream that changed. This value is either `\"videoActive\"`, `\"audioActive\"`, `\"videoDimensions\"` or `\"filter\"`\n     */\n    changedProperty: string;\n\n    /**\n     * Cause of the change on the stream's property:\n     * - For `videoActive`: `\"publishVideo\"`\n     * - For `audioActive`: `\"publishAudio\"`\n     * - For `videoDimensions`: `\"deviceRotated\"`, `\"screenResized\"` or `\"trackReplaced\"`\n     * - For `filter`: `\"applyFilter\"`, `\"execFilterMethod\"` or `\"removeFilter\"`\n     */\n    reason: string;\n\n    /**\n     * New value of the property (after change, current value)\n     */\n    newValue: Object;\n\n    /**\n     * Previous value of the property (before change)\n     */\n    oldValue: Object;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session | StreamManager, stream: Stream, changedProperty: string, newValue: Object, oldValue: Object, reason: string) {\n        super(false, target, 'streamPropertyChanged');\n        this.stream = stream;\n        this.changedProperty = changedProperty;\n        this.newValue = newValue;\n        this.oldValue = oldValue;\n        this.reason = reason;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n\n}"]},"metadata":{},"sourceType":"script"}