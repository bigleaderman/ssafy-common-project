{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenViduLogger = void 0;\n\nvar jsnlog_1 = require(\"jsnlog\");\n\nvar ConsoleLogger_1 = require(\"./ConsoleLogger\");\n\nvar OpenViduLoggerConfiguration_1 = require(\"./OpenViduLoggerConfiguration\");\n\nvar OpenViduLogger =\n/** @class */\nfunction () {\n  function OpenViduLogger() {\n    this.JSNLOG_URL = \"/openvidu/elk/openvidu-browser-logs\";\n    this.MAX_JSNLOG_BATCH_LOG_MESSAGES = 100;\n    this.MAX_MSECONDS_BATCH_MESSAGES = 5000;\n    this.MAX_LENGTH_STRING_JSON = 1000;\n    this.defaultConsoleLogger = new ConsoleLogger_1.ConsoleLogger(window.console);\n    this.isProdMode = false;\n    this.isJSNLogSetup = false;\n  }\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.configureJSNLog = function (openVidu, token) {\n    var _this = this;\n\n    try {\n      // If dev mode or...\n      if (window['LOG_JSNLOG_RESULTS'] || // If instance is created and it is OpenVidu Pro\n      this.instance && openVidu.isAtLeastPro // If logs are enabled\n      && this.instance.isOpenViduBrowserLogsDebugActive(openVidu) // Only reconfigure it if session or finalUserId has changed\n      && this.instance.canConfigureJSNLog(openVidu, this.instance)) {\n        // Check if app logs can be sent\n        // and replace console.log function to send\n        // logs of the application\n        if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app) {\n          this.instance.replaceWindowConsole();\n        } // isJSNLogSetup will not be true until completed setup\n\n\n        this.instance.isJSNLogSetup = false;\n        this.instance.info(\"Configuring JSNLogs.\");\n        var finalUserId_1 = openVidu.finalUserId;\n        var sessionId_1 = openVidu.session.sessionId;\n\n        var beforeSendCallback = function beforeSendCallback(xhr) {\n          // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n          // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n          var parentReadyStateFunction = xhr.onreadystatechange;\n\n          xhr.onreadystatechange = function () {\n            if (_this.isInvalidResponse(xhr)) {\n              Object.defineProperty(xhr, \"readyState\", {\n                value: 4\n              });\n              Object.defineProperty(xhr, \"status\", {\n                value: 200\n              }); // Disable JSNLog too to not send periodically errors\n\n              _this.instance.disableLogger();\n            }\n\n            parentReadyStateFunction();\n          }; // Headers to identify and authenticate logs\n\n\n          xhr.setRequestHeader('Authorization', \"Basic \" + btoa(\"\".concat(finalUserId_1, \"%/%\").concat(sessionId_1) + \":\" + token));\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Additional headers for OpenVidu\n\n          xhr.setRequestHeader('OV-Final-User-Id', finalUserId_1);\n          xhr.setRequestHeader('OV-Session-Id', sessionId_1);\n          xhr.setRequestHeader('OV-Token', token);\n        }; // Creation of the appender.\n\n\n        this.instance.currentAppender = jsnlog_1.JL.createAjaxAppender(\"appender-\".concat(finalUserId_1, \"-\").concat(sessionId_1));\n        this.instance.currentAppender.setOptions({\n          beforeSend: beforeSendCallback,\n          maxBatchSize: 1000,\n          batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n          batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n        }); // Avoid circular dependencies\n\n        var logSerializer = function logSerializer(obj) {\n          var getCircularReplacer = function getCircularReplacer() {\n            var seen = new WeakSet();\n            return function (key, value) {\n              if (typeof value === \"object\" && value != null) {\n                if (seen.has(value) || HTMLElement && value instanceof HTMLElement) {\n                  return;\n                }\n\n                seen.add(value);\n              }\n\n              return value;\n            };\n          }; // Cut long messages\n\n\n          var stringifyJson = JSON.stringify(obj, getCircularReplacer());\n\n          if (stringifyJson.length > _this.instance.MAX_LENGTH_STRING_JSON) {\n            stringifyJson = \"\".concat(stringifyJson.substring(0, _this.instance.MAX_LENGTH_STRING_JSON), \"...\");\n          }\n\n          if (window['LOG_JSNLOG_RESULTS']) {\n            console.log(stringifyJson);\n          }\n\n          return stringifyJson;\n        }; // Initialize JL to send logs\n\n\n        jsnlog_1.JL.setOptions({\n          defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n          serialize: logSerializer,\n          enabled: true\n        });\n        (0, jsnlog_1.JL)().setOptions({\n          appenders: [this.instance.currentAppender]\n        });\n        this.instance.isJSNLogSetup = true;\n        this.instance.loggingSessionId = sessionId_1;\n        this.instance.info(\"JSNLog configured.\");\n      }\n    } catch (e) {\n      // Print error\n      console.error(\"Error configuring JSNLog: \");\n      console.error(e); // Restore defaults values just in case any exception happen-\n\n      this.instance.disableLogger();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.getInstance = function () {\n    if (!OpenViduLogger.instance) {\n      OpenViduLogger.instance = new OpenViduLogger();\n    }\n\n    return OpenViduLogger.instance;\n  };\n\n  OpenViduLogger.isInvalidResponse = function (xhr) {\n    return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n  };\n\n  OpenViduLogger.prototype.canConfigureJSNLog = function (openVidu, logger) {\n    return openVidu.session.sessionId != logger.loggingSessionId;\n  };\n\n  OpenViduLogger.prototype.isOpenViduBrowserLogsDebugActive = function (openVidu) {\n    return openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug || openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app;\n  }; // Return console functions with jsnlog integration\n\n\n  OpenViduLogger.prototype.getConsoleWithJSNLog = function () {\n    return function (openViduLogger) {\n      return {\n        log: function log() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        info: function info() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        debug: function debug() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n        },\n        warn: function warn() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().warn(arguments);\n          }\n        },\n        error: function error() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().error(arguments);\n          }\n        }\n      };\n    }(this);\n  };\n\n  OpenViduLogger.prototype.replaceWindowConsole = function () {\n    window.console = this.defaultConsoleLogger.logger;\n    window.console.log = this.getConsoleWithJSNLog().log;\n    window.console.info = this.getConsoleWithJSNLog().info;\n    window.console.debug = this.getConsoleWithJSNLog().debug;\n    window.console.warn = this.getConsoleWithJSNLog().warn;\n    window.console.error = this.getConsoleWithJSNLog().error;\n  };\n\n  OpenViduLogger.prototype.disableLogger = function () {\n    jsnlog_1.JL.setOptions({\n      enabled: false\n    });\n    this.isJSNLogSetup = false;\n    this.loggingSessionId = undefined;\n    this.currentAppender = undefined;\n    window.console = this.defaultConsoleLogger.logger;\n    window.console.log = this.defaultConsoleLogger.log;\n    window.console.info = this.defaultConsoleLogger.info;\n    window.console.debug = this.defaultConsoleLogger.debug;\n    window.console.warn = this.defaultConsoleLogger.warn;\n    window.console.error = this.defaultConsoleLogger.error;\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().warn(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().error(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  OpenViduLogger.prototype.flush = function () {\n    if (this.isJSNLogSetup && this.currentAppender != null) {\n      this.currentAppender.sendBatch();\n    }\n  };\n\n  OpenViduLogger.prototype.enableProdMode = function () {\n    this.isProdMode = true;\n  };\n\n  return OpenViduLogger;\n}();\n\nexports.OpenViduLogger = OpenViduLogger;","map":null,"metadata":{},"sourceType":"script"}